modoff
beats
beats + modoff
off
beats + modoff
modoff
beats
off
off
beats
beats + modoff
off
c(0,beats) + head(off,-1)
c(0,head(beats-1)) + off
c(0,head(beats-1)) + modoff
c(0,head(beats,-1)) + modoff
modff
beats
beatsmodoff
modoff
beats * sum(pattern)
(beats * sum(pattern)) + modoff
off
beats
beats %1% length(pattern)
pattern[beats %1% length(pattern)[]
pattern[beats %1% length(pattern)[]
pattern[beats %1% length(pattern)]
cumsum(0, pattern[beats %1% length(pattern)])
cumsum(c(0, pattern[beats %1% length(pattern)]))
beats
segments(beats)
changes(beats)
segments(changes(beats))
segments(changes(beats)) %1% 1
segments(changes(beats) - 1) %1% 1
segments(changes(beats)) %1% 1
pattern[segments(changes(beats)) %1% 1]
changes[beats]
beats
which(changes(beats))
which(changes(beats)) <- pattern
beats[which(changes(beats))] <- pattern
beats
which(changes(beats))
which(changes(beats))[1]
beats <- function(off, pattern = c(2,3)) {
measures <- length(pattern) * (off %/% sum(pattern))
modoff <- off %% sum(pattern)
beats <- if (length(pattern) > 1L) {
measures + findInterval(modoff, pattern - pattern[1], rightmost.closed = TRUE)
} else {
measures
}
downbeats <- integer(length(beats))
downbeats[which(changes(beats))[-1]] <- pattern
downbeats <- cumsum(downbeats)
cbind(downbeats,beats)
}
cbind(beats(sigma(c(0,duration(x))), .5),c(x,NA))
cbind(beats(sigma(c(0,duration(x))), c(1/4,3/8)),c(x,NA))
beats <- function(off, pattern = c(2,3)) {
measures <- length(pattern) * (off %/% sum(pattern))
modoff <- off %% sum(pattern)
beats <- if (length(pattern) > 1L) {
measures + findInterval(modoff, pattern - pattern[1], rightmost.closed = TRUE)
} else {
measures
}
downbeats <- integer(length(beats))
downbeats[which(changes(beats))[-1]] <- pattern
downbeats <- cumsum(downbeats)
data.table(Offset = off, Measure = measures, Beat = beats, Downbeat = downbeats)
}
cbind(beats(sigma(c(0,duration(x))), c(1/4,3/8)),c(x,NA))
beats(sigma(c(0,duration(x))), c(1/4,3/8))
cbind(beats(sigma(c(0,duration(x))), c(1/4,3/8)),c(x,NA))
devtools::load_all()
cbind(beats(sigma(c(0,duration(x))), c(1/4,3/8)),c(x,NA))
rm(beats)
devtools::load_all()
cbind(beats(sigma(c(0,duration(x))), c(1/4,3/8)),c(x,NA))
cbind(beats(sigma(c(0,duration(z))), c(1/4,3/8)),c(x,NA))
cbind(beats(sigma(c(0,duration(z))), c(1/4,3/8)),c(z,NA))
devtools::load_all()
cbind(beats(sigma(c(0,duration(z))), c(1/4,3/8)),c(z,NA))
devtools::load_all()
cbind(beats(sigma(c(0,duration(z))), c(1/4,3/8)),c(z,NA))
cbind(beats(sigma(c(0,duration(z))), c(1/4,3/8)),c(z,NA))
cbind(beats(sigma(c(0,duration(z))), c(1/2)),c(z,NA))
cbind(beats(sigma(c(0,duration(z))), c(1/2,`/1`)),c(z,NA))
cbind(beats(sigma(c(0,duration(z))), c(1/2,1/2)),c(z,NA))
cbind(beats(sigma(c(0,duration(z))), c(1/c(4,4,4,4))),c(z,NA))
devtools::load_all()
cbind(beats(sigma(c(0,duration(z))), c(1/c(4,4,4,4))),c(z,NA))
devtools::load_all()
cbind(beats(sigma(c(0,duration(z))), c(1/c(4,4,4,4))),c(z,NA))
cbind(beats(sigma(c(0,duration(z))), c(1/c(4,4,4,4))),c(z,NA))
subdiv
delta(off)
c(pattern)
c(pattern, unique(delta(off)))
unique(c(pattern, unique(delta(off))))
gcd(unique(c(pattern, unique(delta(off)))))
delta(off)
devtools::load_all()
x <- c('4.','8','4','4','4','8','4','8','4','2','2')
cbind(beats(sigma(c(0,duration(z))), c(1/c(4,4,4,4))),c(z,NA))
z <- c('4.','4','4.','8','8','2','8','4','8','4')
cbind(beats(sigma(c(0,duration(z))), c(1/c(4,4,4,4))),c(z,NA))
cbind(beats(sigma(c(0,duration(z))), c(1/c(4,4,4,4))),c(z,NA))
subdiv
cbind(beats(sigma(c(0,duration(x))), c(1/c(4,4,4,4))),c(x,NA))
cbind(beats(sigma(c(0,duration(x))), c(1/c(4,4,4,4))),c(x,NA))
beats
measures
modoff
pattern
devtools::load_all()
cbind(beats(sigma(c(0,duration(x))), c(1/c(4,4,4,4))),c(x,NA))
cbind(beats(sigma(c(0,duration(x))), c(1/c(4,4,4,4))),c(x,NA))
measures
modoff
cumsum(pattern - pattern[1])
cumsum(pattern) - pattern[1]
devtools::load_all()
cbind(beats(sigma(c(0,duration(x))), c(1/c(4,4,4,4))),c(x,NA))
cbind(beats(sigma(c(0,duration(x))), c(1/c(4,4,4,4))),c(x,NA))
modoff
cumsum(pattern)
findInterval(modoff,cumsum(pattern))
devtools::load_all()
cbind(beats(sigma(c(0,duration(x))), c(1/c(4,4,4,4))),c(x,NA))
Q
devtools::load_all()
cbind(beats(sigma(c(0,duration(x))), c(1/c(4,4,4,4))),c(x,NA))
devtools::load_all()
cbind(beats(sigma(c(0,duration(x))), c(1/c(4,4,4,4))),c(x,NA))
cbind(beats(sigma(c(0,duration(x))), c(1/c(4,4,4,4))),c(x,NA))
beats
changes(beats)
devtools::load_all()
cbind(beats(sigma(c(0,duration(x))), c(1/c(4,4,4,4))),c(x,NA))
x <- c('4.','8','4','4','4','8','4','16','16','4','2','2')
cbind(beats(sigma(c(0,duration(x))), c(1/c(4,4,4,4))),c(x,NA))
test <- data.table(c(0:16)/4, c(1,1,.75,.75,1))
test
test <- data.table(c(0:16)/4, c(1,1,1,1, 1,1,1,1, .75,.75,.75,.75,.75,.75,1,1,1,1))
test <- data.table(c(0:15)/4, c(1,1,1,1, 1,1,1,1, .75,.75,.75,.75,.75,.75,1,1,1,1))
test <- data.table(c(0:17)/4, c(1,1,1,1, 1,1,1,1, .75,.75,.75,.75,.75,.75,1,1,1,1))
test
test[,V1/V2]
test[,V1 %% V2]
seq
cumsum(0:16 %% 4)
0:16 %% 4
test
test[,changes(V2)]
devtools::load_all()
test[,changes(V2)]
test[,changes(V2, value=T)]
test
test[,dur := delta(V1)]
test
test[ , change := changes(V2, value=T)]
test[ , off2 := dur - ifelse(is.na(change), 0, change)]
test
test[ , off2 := sigma(off2)]
test
test[, mod := off2 %% C2]
test[, mod := off2 %% V2]
test
test <- data.table(c(0:17)/4, c(1,1,1,1, 1,1,1,1, .75,.75,.75,.75,.75,.75,1,1,1,1))
test
test[,V1 %% V2]
test[,mod := V1 %% V2]
test
test[ , changes(V2)]
test[ , changes(V2,value=T)]
test[ , sigma(changes(V2,value=T))]
test[ , ditto(sigma(changes(V2,value=T)))]
test[ , fillForward(sigma(changes(V2,value=T)))]
test[ , V1-fillForward(sigma(changes(V2,value=T)))]
test[ , fillForward(sigma(changes(V2,value=T)))]
test[ , fillForward(sigma(changes(V2,value=T))) %% V2]
test[ , V1 - fillForward(sigma(changes(V2,value=T))) %% V2]
test[ , (V1 - fillForward(sigma(changes(V2,value=T))) %% V2) %% V2]
test[ , mod:=4*(V1 - fillForward(sigma(changes(V2,value=T))) %% V2) %% V2]
test
test[ , mod:=4*(V1 - fillForward(sigma(changes(V2,value=T))) %1% V2) %% V2]
test
test[ , mod:=4*(V1 - fillForward(sigma(changes(V2,value=T))) %1% V2) %1% V2]
test
test
measureOffset <- function(dur, meter = 1) {
meter <- rep_along(dur, meter)
meter
}
measureOffset(test$dur)
?rep_along
measureOffset(test$V1)
sigma(c(1,1,1,))
sigma(c(1,1,1))
sigma(c(1,1,2,1,1,2))
sigma(c(1,1,2,1,1,2)) - 1
measureOffset <- function(dur, meter = 1) {
meter <- rep_along(dur, meter)
dur <- dur / meter
offset <- sigma(c(0, dur))
moffset <- floor(offset)
moffset * meter
}
test
x
test <- data.table(Dur = c('4.','8','4','4','4','4','2','4.','8','4','4.','8','4','4','8','8','2'),
Meter = c(1, 1, 1, 1, 1, 1, 1, .75, .75, .75, .75, .75, .75, 1,1,1,1))
test
test[,measureOffset(duration(Dur), meter = Meter)]
measureOffset <- function(dur, meter = 1) {
meter <- rep_along(dur, meter)
dur <- dur / meter
offset <- sigma(c(0, dur))
moffset <- floor(offset)
moffset
}
test[,measureOffset(duration(Dur), meter = Meter)]
test[,Moffest:=measureOffset(duration(Dur), meter = Meter)]
measureOffset <- function(dur, meter = 1) {
meter <- rep_along(dur, meter)
dur <- dur / meter
offset <- sigma(c(0, dur))
moffset <- floor(offset)
head(moffset, -1) * meter
}
test[,Moffest:=measureOffset(duration(Dur), meter = Meter)]
test
measureOffset <- function(dur, meter = 1) {
meter <- rep_along(dur, meter)
dur <- dur / meter
offset <- sigma(c(0, dur))
moffset <- offset %% 1
head(moffset, -1) * meter
}
test[,Moffest:=measureOffset(duration(Dur), meter = Meter)]
test
test[,Moffest:=measureOffset(duration(Dur), meter = 1)]
test
test <- data.table(Dur = c('4.','8','4','4','4','4','2','4.','8','4','4.','8','4','4','8','8','2'),
Meter = c(1, 1, 1, 1, 1, 1, .75, .75, .75, .75, .75, .75, .75, 1,1,1,1))
test[,Moffest:=measureOffset(duration(Dur), meter = Meter)]
test
beats <- function(moff,  beats = c(.25), subbeat = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (beats != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
if (Reduce('gcd', c(delta(beats), subbeat)) != subbeat) .stop('{subbeat} is not a valid subdivider of the beats pattern {paste(beats, collapse="-")}.')
beat <- findInterval(modoff, cumsum(beats), rightmost.closed = TRUE)
data.table(Moffset = moff,
Beat = beat)
}
test
test[,Moffest:=measureOffset(duration(Dur), meter = 1)]
test
test[,beats(Moffest, measure = 1)]
beats <- function(moff,  beats = c(.25), subbeat = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (beats != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
if (Reduce('gcd', unique(c(delta(beats), subbeat))) != subbeat) .stop('{subbeat} is not a valid subdivider of the beats pattern {paste(beats, collapse="-")}.')
beat <- findInterval(modoff, cumsum(beats), rightmost.closed = TRUE)
data.table(Moffset = moff,
Beat = beat)
}
beats <- function(moff,  beats = c(.25), subbeat = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (beats != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
browser()
if (Reduce('gcd', unique(c(delta(beats), subbeat))) != subbeat) .stop('{subbeat} is not a valid subdivider of the beats pattern {paste(beats, collapse="-")}.')
beat <- findInterval(modoff, cumsum(beats), rightmost.closed = TRUE)
data.table(Moffset = moff,
Beat = beat)
}
beats <- function(moff,  beats = c(.25), subbeat = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (beats != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
if (Reduce('gcd', unique(c(delta(beats), subbeat))) != subbeat) .stop('{subbeat} is not a valid subdivider of the beats pattern {paste(beats, collapse="-")}.')
beat <- findInterval(modoff, cumsum(beats), rightmost.closed = TRUE)
data.table(Moffset = moff,
Beat = beat)
}
test[,beats(Moffest, measure = 1)]
beats <- function(moff,  beats = c(.25), subbeat = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (beats != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
if (Reduce('gcd', unique(c(delta(beats), subbeat))) != subbeat) .stop('{subbeat} is not a valid subdivider of the beats pattern {paste(beats, collapse="-")}.')
beat <- findInterval(modoff, cumsum(beats), rightmost.closed = TRUE)
data.table(Moffset = moff,
Beat = beat)
}
test[,beats(Moffest, measure = 1)]
beats <- function(moff,  beats = c(.25), subbeat = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (sum(beats) != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
if (Reduce('gcd', unique(c(delta(beats), subbeat))) != subbeat) .stop('{subbeat} is not a valid subdivider of the beats pattern {paste(beats, collapse="-")}.')
beat <- findInterval(modoff, cumsum(beats), rightmost.closed = TRUE)
data.table(Moffset = moff,
Beat = beat)
}
test[,beats(Moffest, measure = 1)]
beats <- function(moff,  beats = c(.25), subbeat = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (sum(beats) != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
if (Reduce('gcd', unique(c(delta(beats), subbeat))) != subbeat) .stop('{subbeat} is not a valid subdivider of the beats pattern.')
beat <- findInterval(modoff, cumsum(beats), rightmost.closed = TRUE)
data.table(Moffset = moff,
Beat = beat)
}
test[,beats(Moffest, measure = 1)]
devtools::load_all()
beats <- function(moff,  beats = c(.25), subbeat = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (sum(beats) != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
if (Reduce('gcd', unique(c(delta(beats), subbeat))) != subbeat) .stop('{subbeat} is not a valid subdivider of the beats pattern.')
beat <- findInterval(modoff, cumsum(beats), rightmost.closed = TRUE)
data.table(Moffset = moff,
Beat = beat)
}
beats <- function(moff,  beats = c(.25), subbeat = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (sum(beats) != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
browser()
if (Reduce('gcd', unique(c(delta(beats), subbeat))) != subbeat) .stop('{subbeat} is not a valid subdivider of the beats pattern.')
beat <- findInterval(modoff, cumsum(beats), rightmost.closed = TRUE)
data.table(Moffset = moff,
Beat = beat)
}
devtools::load_all()
test[,beats(Moffest, measure = 1)]
beats
unique(c(delta(beats,subbeat)))
unique(c(delta(beats),subbeat)))
unique(c(delta(beats),subbeat))
Qunique(c(delta(beats),subbeat))
beats <- function(moff,  beats = c(.25), subbeat = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (sum(beats) != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
durs <- unique(c(delta(beats), subbeat))
durs <- durs[durs != 0]
if (Reduce('gcd', durs) != subbeat) .stop('{subbeat} is not a valid subdivider of the beats pattern.')
beat <- findInterval(modoff, cumsum(beats), rightmost.closed = TRUE)
data.table(Moffset = moff,
Beat = beat)
}
test[,beats(Moffest, measure = 1)]
beats <- function(moff,  beats = c(.25), subbeat = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (sum(beats) != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
durs <- unique(c(delta(beats), subbeat))
durs <- durs[durs != 0]
if (Reduce('gcd', durs) != subbeat) .stop('{subbeat} is not a valid subdivider of the beats pattern.')
beat <- findInterval(mooff, cumsum(beats), rightmost.closed = TRUE)
data.table(Moffset = moff,
Beat = beat)
}
test[,beats(Moffest, measure = 1)]
beats <- function(moff,  beats = c(.25), subbeat = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (sum(beats) != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
durs <- unique(c(delta(beats), subbeat))
durs <- durs[durs != 0]
if (Reduce('gcd', durs) != subbeat) .stop('{subbeat} is not a valid subdivider of the beats pattern.')
beat <- findInterval(ooff, cumsum(beats), rightmost.closed = TRUE)
data.table(Moffset = moff,
Beat = beat)
}
test[,beats(Moffest, measure = 1)]
beats <- function(moff,  beats = c(.25), subbeat = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (sum(beats) != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
durs <- unique(c(delta(beats), subbeat))
durs <- durs[durs != 0]
if (Reduce('gcd', durs) != subbeat) .stop('{subbeat} is not a valid subdivider of the beats pattern.')
beat <- findInterval(moff, cumsum(beats), rightmost.closed = TRUE)
data.table(Moffset = moff,
Beat = beat)
}
test[,beats(Moffest, measure = 1)]
test
test[,Beat:=beats(Moffest, measure = 1)]
test
test[,beats(Moffest, measure = 1)]
test[,Beat:=beats(Moffest, measure = 1)$Beat]
test
beats <- function(moff,  beats = c(.25), subbeat = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (sum(beats) != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
durs <- unique(c(delta(beats), subbeat))
durs <- durs[durs != 0]
if (Reduce('gcd', durs) != subbeat) .stop('{subbeat} is not a valid subdivider of the beats pattern.')
beat <- findInterval(moff, cumsum(beats), rightmost.closed = TRUE)
data.table(Moffset = moff,
Beat = beat,
Subbeat = moff %/% subbeat)
}
test
beats <- function(moff,  beats = c(.25), subbeat = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (sum(beats) != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
durs <- unique(c(delta(beats), subbeat))
durs <- durs[durs != 0]
if (Reduce('gcd', durs) != subbeat) .stop('{subbeat} is not a valid subdivider of the beats pattern.')
beat <- findInterval(moff, cumsum(beats), rightmost.closed = TRUE)
data.table(Moffset = moff,
Beat = beat,
Subbeat = moff %/% subbeat)
}
test[,beats(Moffest, measure = 1)]
test[,list(Dur,beats(Moffest, measure = 1))]
beats <- function(moff,  beats = c(.25), subdiv = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (sum(beats) != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
durs <- unique(c(delta(beats), subdiv))
durs <- durs[durs != 0]
if (Reduce('gcd', durs) != subdiv) .stop('{subbeat} is not a valid subdivider of the beats pattern.')
beat <- findInterval(moff, cumsum(beats), rightmost.closed = TRUE)
subbeat <- sigma(c(0, head(beats, -1))) %/% subdiv
subbeat <- (moff %/% subdiv) - subbeat[beat + 1]
data.table(Moffset = moff,
Beat = beat,
Subbeat = subbeat)
}
test[,list(Dur,beats(Moffest, measure = 1))]
beats <- function(moff,  beats = c(.25), subdiv = 1/8, measure = 1) {
span <- sum(beats)
beats <- rep(beats, measure / span)
if (sum(beats) != measure) .stop('In call to beats, the beats argument cannot evenly divide the measure span.')
durs <- unique(c(delta(beats), subdiv))
durs <- durs[durs != 0]
if (Reduce('gcd', durs) != subdiv) .stop('{subbeat} is not a valid subdivider of the beats pattern.')
beat <- findInterval(moff, cumsum(beats), rightmost.closed = TRUE)
subbeat <- sigma(c(0, head(beats, -1))) %/% subdiv
subbeat <- (moff %/% subdiv) - subbeat[beat + 1]
data.table(Moffset = moff,
Beat = beat,
Subbeat = subbeat,
Remainder = moff %% subdiv)
}
test[,list(Dur,beats(Moffest, measure = 1))]
test[,list(Dur,beats(Moffest, measure = 1, subdiv=1/4))]
meterAnalyze <- function(dur, meter = c(.25, .25, .25, .25), subdiv = 1/16) {
measure <- sum(meter)
moff <- measureOffset(dur, measure)
beats <- beats(moff, meter, subdiv = subdiv, measure = measure)
beats$Dur <- dur
beats$Moff <- moff
beats
}
meterAnalyze(duration(c('4.','8','8','4.','4','4.','8','8','4','4','8','4','8','4','2')), meter = c(3/8,/1/4), subdiv=1/8)
meterAnalyze(duration(c('4.','8','8','4.','4','4.','8','8','4','4','8','4','8','4','2')), meter = c(3/8, 1/4), subdiv=1/8)
rm(beats)
rm(measureOffset)
rm(meterAnalyze)
devtools::load_all()
meterAnalyze(duration(c('4.','8','8','4.','4','4.','8','8','4','4','8','4','8','4','2')), meter = c(3/8, 1/4), subdiv=1/8)
meterAnalyze(duration(c('4.','8','8','4.','4','4.','8','8','4','4','8','4','8','4','2')), meter = c(3/8, 1/4), subdiv=1/8)
moff
beats
cumsum(beats)
beats
beat
moff
meterAnalyze(duration(c('4.','8','8','4.','4','4.','8','8','4','4','8','4','8','4','2')), meter = c(3/8, 1/4), subdiv=1/8)
subbeat
moff %/% subdiv
moff
subdiv
cbind(moff, moff %/% subdiv)
cbind(moff, 1 + (moff %/% subdiv))
.5 %/% subdiv
moff / subdiv
devtools::load_all()
meterAnalyze(duration(c('4.','8','8','4.','4','4.','8','8','4','4','8','4','8','4','2')), meter = c(3/8, 1/4), subdiv=1/8)
meterAnalyze(duration(c('4.','8','8','4.','4','4.','8','8','4','4','8','4','8','4','2')), meter = c(3/8, 1/4), subdiv=1/8)
subbeat
devtools::load_all()
meterAnalyze(duration(c('4.','8','8','4.','4','4.','8','8','4','4','8','4','8','4','2')), meter = c(3/8, 1/4), subdiv=1/8)
meterAnalyze(duration(c('4.','8','8','4.','4','4.','8','8','4','4','8','4','8','4','2')), meter = c(3/8, 1/4), subdiv=1/8)
cbind(moff, 1 + (moff %/% subdiv))
cbind(moff, 1 + floor(moff / subdiv))
moff / subdiv
1 + (moff / subdiv)
cbind(moff, 1 + floor(moff / subdiv))
cbind(1 + floor(moff / subdiv))
cbind(moff, 1 + floor(moff / subdiv))
1 + floor(moff / subdiv)
moff / subdiv
1 + (moff / subdiv)
1 + floor(moff / subdiv)
