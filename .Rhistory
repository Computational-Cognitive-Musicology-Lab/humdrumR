(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
cocot[[, ~Spine == 1 | Exclusive == 'timestamp']] -> cocot
census(cocot)
census(coco)
cocot[1]
coco[1]
cocot[]
cocot[1]
cocot$Token
cocot$Token[1]
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd')) -> cocot
cocot$Token
cocot$Pipe1
cocot$Pipe1
cocot[[, ~Spine == 1 | Exclusive == 'timestamp']] -> cocot
cocot
spinePipe(cocot, 2,1) -> cocot
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd')) -> cocot
cocot$Token[[, ~Spine == 1 | Exclusive == 'timestamp']] -> cocot
cocot
cocot$Pipe1
spinePipe(cocot, 2,1) -> cocot
cocot
cocot$Pipe3
cocot$Pipe2
cocot$Pipe1
census(cocot)
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd')) -> cocot
cocot$Token[[, ~Spine == 1 | Exclusive == 'timestamp']] -> cocot
census(cocot)
census(coco)
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
humtab[,table(Type)]
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
humtab
humtab[,table(Type)]
result[,table(Type)]
result
dim(result)
dim(humtab)
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
humdrumR@Humtable$G
cocot@Humtable$G
cocot@Humtable$G
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
humdrumR@Humtable$G
humdrumR@Humtable$G
cocot@Humtable$G
census(cocot)
cocot$Token[[, ~is.na(Spine) | Spine == 1 | Exclusive == 'timestamp']] -> cocot
census(coco)
cocot
cocot[[1]]
cocot[1[]
cocot$Token[1]
census(cocot)
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
census(cocot)
census(cocot$Token[[,, ~is.na(Spine) | Spine == 1 | Exclusive == 'timestamp']])
census(cocot$Token[[, ~is.na(Spine) | Spine == 1 | Exclusive == 'timestamp']])
cocot$Token[[,, ~is.na(Spine) | Spine == 1 | Exclusive == 'timestamp']] -> cocot
spinePipe(cocot, 2,1) -> cocot
census(cocot)
cocot$Pipe3 -> cocot$TimeStamp
census(cocot)
cocot$Token %hum>% duration -> cocot$Dur
cocot$TimeStamp %hum>% c(~as.numeric(TimeStamp[n = -1]) - as.numeric(TimeStamp)) -> cocot$Diff
(cocot %hum>% c(dofill~max(Diff), by ~ File ~ TimeStamp)) -> cocot$Span
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
cocot$Token[[,, ~is.na(Spine) | Spine == 1 | Exclusive == 'timestamp']] -> cocot
spinePipe(cocot, 2,1) -> cocot
cocot$Pipe3 -> cocot$TimeStamp
cocot$Token %hum>% duration -> cocot$Dur
census(cocot)
cocot$Dur
removeEmptySpines(cocot)
removeEmptySpines(cocot) |> census()
removeEmptySpines(cocot)
targets
nullTypes
targets[!humtab$Type %in% nullTypes]
targets
dim(targets)
targets[!humtab$Type %in% nullTypes]
humtab[,table(Type)]
humtab[,table(Type) %in% nullTypes]
humtab[Type %in% nullTypes]
humtab[Type %in% nullTypes, table(Type)]
humtab[Type %in% nullTypes, table(Type)]
targets[Type %in% nullTypes]
targets[humtab$Type %in% nullTypes]
targets[!humtab$Type %in% nullTypes]
targets[!humtab$Type %in% nullTypes][,any(is.na(Spine))]
humtab[,any(is.na(Spine))]
humtab[Type=='G',any(is.na(Spine))]
humtab[Type=='G',table(is.na(Spine))]
targets[humtab$Type == 'G', table(Spine)]
targets[humtab$Type == 'G', table(Spine, useNA='always')]
targets[!humtab$Type %in% nullTypes, table(Spine, useNA='always')]
targets[!humtab$Type %in% c(nullTypes, 'G'), table(Spine, useNA='always')]
d
targets[!humtab$Type, table(Spine, useNA='always')]
targets[!humtab$Type %in% nullTypes, table(Spine, useNA='always')]
targets[humtab$Type %in% nullTypes, table(Spine, useNA='always')]
targets[humtab$Type %in% nullTypes, table(Type, useNA='always')]
targets[humtab$Type %in% nullTypes, table(Spine, useNA='always')]
nullTypes
devtools::load_all(".")
cocot$Token[[, ~is.na(Spine) | Spine == 1 | Exclusive == 'timestamp']] -> cocot
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
cocot$Token[[, ~is.na(Spine) | Spine == 1 | Exclusive == 'timestamp']] -> cocot
census(cocot)
cocot
spinePipe(cocot, 2,1) -> cocot
cocot
cocot$Pipe3
cocot$Pipe3 -> cocot$TimeStamp
cocot$Token %hum>% duration -> cocot$Dur
cocot
cocot$TimeStamp %hum>% c(~as.numeric(TimeStamp[n = -1]) - as.numeric(TimeStamp))
cocot$TimeStamp %hum>% c(~as.numeric(TimeStamp[n = -1]) - as.numeric(TimeStamp)) -> cocot$Diff
census(cocot)
(cocot %hum>% c(dofill~max(Diff), by ~ File ~ TimeStamp))
(cocot %hum>% c(dofill~max(Diff), by ~ File ~ TimeStamp)) |> census()
(cocot %hum>% c(dofill~max(Diff), by ~ File ~ TimeStamp)) -> cocot$Span
cocot %hum>% c(~(SOI(Dur)$Onset / Span) + as.numeric(TimeStamp), by ~ TimeStamp)
cocot %hum>% c(~round((SOI(Dur)$Onset / Span) + as.numeric(TimeStamp), 2), by ~ TimeStamp) |> census()
cocot %hum>% c(~round((SOI(Dur)$Onset / Span) + as.numeric(TimeStamp), 2), by ~ TimeStamp) -> cocot$TS
cocot
cocot %hum<% ~diff(TS)
cocot %hum<% c(~table(diff(TS)> 0), by ~ File)
cocot %hum<% c(~table(diff(TS)>= 0), by ~ File)
cocot[~diff(TS) < 0]
cocot
writeHumdrum(cocot, fieldname = TS, affix = 'timestamped')
writeHumdrum(cocot, fieldname = 'TS', affix = 'timestamped')
census(cocot)
census(coco)
source("~/.active-rstudio-document")
readHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*.hum') -> coco
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ readHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*.hum') -> coco
Token)) -> cocot
cocot$Token[[, ~is.na(Spine) | Spine == 1 | Exclusive == 'timestamp']] -> cocot
spinePipe(cocot, 2,1) -> cocot
cocot$Pipe3 -> cocot$TimeStamp
cocot$Token %hum>% duration -> cocot$Dur
cocot$TimeStamp %hum>% c(~as.numeric(TimeStamp[n = -1]) - as.numeric(TimeStamp)) -> cocot$Diff
(cocot %hum>% c(dofill~max(Diff), by ~ File ~ TimeStamp)) -> cocot$Span
validateHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*.hum', errorReport.path = '~/Desktop') -> coco
validateHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*.hum') -> coco
validateHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*.hum', errorReport.path = '~/Desktop') -> coco
validateHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*.hum') -> coco
readHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*.hum') -> coco
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ readHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*.hum') -> coco
Token)) -> cocot
readHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*.hum') -> coco
readHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*\\.hum') -> coco
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ readHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*.hum') -> coco
Token)) -> cocot
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
cocot$Token[[, ~is.na(Spine) | Spine == 1 | Exclusive == 'timestamp']] -> cocot
spinePipe(cocot, 2,1) -> cocot
cocot$Pipe3 -> cocot$TimeStamp
cocot$Token %hum>% duration -> cocot$Dur
cocot$TimeStamp %hum>% c(~as.numeric(TimeStamp[n = -1]) - as.numeric(TimeStamp)) -> cocot$Diff
(cocot %hum>% c(dofill~max(Diff), by ~ File ~ TimeStamp)) -> cocot$Span
census(cocot)
cocot
readHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*\\.hum') -> coco
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
cocot$Token[[, ~is.na(Spine) | Spine == 1 | Exclusive == 'timestamp']] -> cocot
spinePipe(cocot, 2,1) -> cocot
cocot$Pipe3 -> cocot$TimeStamp
cocot$Token %hum>% duration -> cocot$Dur
cocot$TimeStamp %hum>% c(~as.numeric(TimeStamp[n = -1]) - as.numeric(TimeStamp))
cocot
census(cocot)
cocot$TimeStamp %hum>% c(~as.numeric(TimeStamp[n = -1]) - as.numeric(TimeStamp))
cocot %hum<% ~TimeStamp[is.na(as.numeric(Timestamp))]
cocot %hum<% ~TimeStamp[is.na(as.numeric(TimeStamp))]
cocot %hum<% ~table(TimeStamp)
cocot %hum<% ~sort(unique(TimeStamp))
cocot %hum<% ~sort(unique(TimeStamp)) -> a
cat(a,sep='\n')
a
grep('^[0-9\\.]')
grep('^[0-9\\.]',avalue=T)
grep('^[0-9\\.]',a,value=T)
grep('[^0-9\\.]',a,value=T)
cocot['E']
cocot$TimeStamp['E']
cocot %hum<% ~unique(File[grepl('E', TimeStamp)])
cocot[54]
cocot[54]$TimeStamp
readHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*\\.hum') -> coco
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
cocot$Token[[, ~is.na(Spine) | Spine == 1 | Exclusive == 'timestamp']] -> cocot
spinePipe(cocot, 2,1) -> cocot
cocot$Pipe3 -> cocot$TimeStamp
cocot$Token %hum>% duration -> cocot$Dur
cocot$TimeStamp %hum>% c(~as.numeric(TimeStamp[n = -1]) - as.numeric(TimeStamp)) -> cocot$Diff
(cocot %hum>% c(dofill~max(Diff), by ~ File ~ TimeStamp)) -> cocot$Span
cocot %hum>% c(~{soi <- SOI(Dur) ; round((soi$Onset / max(soi$Offset))*Span + as.numeric(TimeStamp), 2)}, by ~ TimeStamp) -> cocot$TS
cocot$TS
cocot %hum<% ~c(TS - TS[n=-1])
cocot %hum<% ~c(TS - TS[n=1])
cocot %hum<% ~c(table(TS - TS[n=1]))
cocot %hum<% ~c(sort(TS - TS[n=1]))
cocot %hum<% ~c(plot(sort(TS - TS[n=1])))
cocot %hum<% ~c(plot(sort(TS - TS[n=1])))
cocot %hum<% ~c(hist(sort(TS - TS[n=1])))
cocot %hum<% ~c(hist(sort(TS - TS[n=1]), breaks=1000))
cocot %hum<% ~c(hist(sort(TS - TS[n=1]), breaks=1000, xlim=c(0,3)))
cocot[1]
census(cocot)
cocot[1932]
cocot[193]
setActiveFields(cocot[193], c('Token', 'TS'))
setActiveFields(cocot[193], c('Token', 'TS'))
setActiveFields(cocot[193], c('Token', 'Diff','TS'))
setActiveFields(cocot[193], c('Token', 'TimeStamp', 'Dur','TS'))
coco[193]
coco[193]
setActiveFields(cocot[193], c('Token', 'TimeStamp', 'Dur','Span','TS'))
setActiveFields(cocot[193], c('Token', 'TimeStamp', 'Span','TS'))
setActiveFields(cocot[193], c('Token', 'Span','TS'))
setActiveFields(cocot[193], c('Token', 'Span','Dur'))
cocot %hum>% c(~{soi <- SOI(Dur) ; round((soi$Onset / max(soi$Offset))*Span + as.numeric(TimeStamp), 2)}, by ~ TimeStamp ~ File) -> cocot$TS
setActiveFields(cocot[193], c('Token', 'TS'))
cocot %hum>% c(~SOR(Dur)$Onset, by ~ File ~ TimeStamp) -> cocot$Onsets
cocot %hum>% c(~SOI(Dur)$Onset, by ~ File ~ TimeStamp) -> cocot$Onsets
setActiveFields(cocot[193], c('Token', 'Dur', 'Onsets'))
cocot$Dur %hum<% ~.
cocot[193]$Dur %hum<% ~.
cocot[193]$Dur %hum<% ~cbind(., SOI(.))
cocot[193]$Dur %hum<% ~cbind(., SOI(.)) -> x
x
x[1:100]
cocot[193]$Dur %hum<% c(~cbind(., SOI(.)), by ~ TimeStamp) -> x
x
x[1:100]
cocot[193]$Dur %hum<% c(~cbind(., SOI(.), TimeStamp), by ~ TimeStamp) -> x
x
x[1:100,]
cocot[193]$Dur %hum<% c(~cbind(., SOI(.), TimeStamp,Bar), by ~ TimeStamp) -> x
x
x[1:100,]
cocot[193]$Dur %hum<% c(~cbind(., SOI(.), TimeStamp,Bar,Span), by ~ TimeStamp) -> x
x[1:100]
cocot %hum>% c(~SOI(Dur)$Onset, by ~ File ~ TimeStamp) -> cocot$Onsets
cocot[193]$Onsets
cocot$Dur %hum<% c(~cbind(., SOI(.), TimeStamp,Bar,Span), by ~ TimeStamp ~ File) -> x
x
x[100]
cocot$Dur %hum<% c(~cbind(., SOI(.), TimeStamp,Bar,Span,File), by ~ TimeStamp ~ File) -> x
x[File == 193]
x[File == 193][1:100,]
cocot[193]
cocot$Token[193]
cocot$tOKEN %hum>% c(~SOI(Dur)$Onset, by ~ File ~ TimeStamp) -> cocot$Onsets
cocot$Token %hum>% c(~SOI(Dur)$Onset, by ~ File ~ TimeStamp) -> cocot$Onsets
cocot[193]
cocot$Token %hum>% c(~{soi <- SOI(Dur) ; round((soi$Onset / max(soi$Offset))*Span + as.numeric(TimeStamp), 2)}, by ~ TimeStamp ~ File) -> cocot$TS
setActiveFields(cocot[193], c('Token', 'TS'))
cocot %hum<% ~c(hist(sort(TS - TS[n=1]), breaks=1000, xlim=c(0,3)))
cocot %hum<% ~c((TS - TS[n=1])))
cocot %hum<% ~c((TS - TS[n=1]))
cocot %hum<% ~c(table((TS - TS[n=1]) < 0))
cocot %hum<% ~c(sum((TS - TS[n=1]) < 0))
cocot %hum<% ~c(sum((TS - TS[n=1]) < 0, na.rm=T))
readHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*\\.hum') -> coco
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
cocot$Token[[, ~is.na(Spine) | Spine == 1 | Exclusive == 'timestamp']] -> cocot
spinePipe(cocot, 2,1) -> cocot
cocot$Pipe3 -> cocot$TimeStamp
cocot$Token %hum>% duration -> cocot$Dur
cocot$TimeStamp %hum>% c(~as.numeric(TimeStamp[n = -1]) - as.numeric(TimeStamp)) -> cocot$Diff
(cocot %hum>% c(dofill~max(Diff), by ~ File ~ TimeStamp)) -> cocot$Span
cocot$Token %hum>% c(~{soi <- SOI(Dur) ; round((soi$Onset / max(soi$Offset))*Span + as.numeric(TimeStamp), 2)}, by ~ TimeStamp ~ File) -> cocot$TS
writeHumdrum(cocot, fieldname = 'TS', affix = '_timestamped')
readHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*\\.hum') -> coco
(coco %hum>% c(~fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
cocot$Token[[, ~is.na(Spine) | Spine == 1 | Exclusive == 'timestamp']] -> cocot
spinePipe(cocot, 2,1) -> cocot
cocot$Pipe3 -> cocot$TimeStamp
cocot$Token %hum>% duration -> cocot$Dur
cocot$TimeStamp %hum>% c(~as.numeric(TimeStamp[n = -1]) - as.numeric(TimeStamp)) -> cocot$Diff
(cocot %hum>% c(dofill~max(Diff), by ~ File ~ TimeStamp)) -> cocot$Span
cocot$Token %hum>% c(~{soi <- SOI(Dur) ; round((soi$Onset / max(soi$Offset))*Span + as.numeric(TimeStamp), 2)}, by ~ TimeStamp ~ File) -> cocot$TS
writeHumdrum(cocot, fieldname = 'TS', affix = '_timestamped')
list(A=3,B=2)[c('B','C')]
interval
devtools::load_all(".")
interval(c('do','re','fi','so','vti','do'))
interval(c('do','re','fi','so','vti','do'), melodic=T)
interval(c('do','re','fi','so','tiv','do'), melodic=T)
interval(c('do','re','fi','so',',ti','do'), melodic=T)
interval(c('do','re','fi','so','ti,','do'), melodic=T)
kern(c('do','re','fi','so',',ti','do'), melodic=T)
kern(c('do','re','fi','so',',vti','do'), melodic=T)
kern(c('do','re','fi','so',',ti,','do'), melodic=T)
kern(c('do','re','fi','so',',vti','do'), melodic=T)
kern(c('do','re','fi','so',',vti,','do'), melodic=T)
kern(c('do','re','fi','so',',vti,','do'), melodic=F)
kern(c('do','re','fi','so',',vti,','do'))
devtools::load_all(".")
kern(c('do','re','fi','so',',vti,','do'))
kern(c('do','re','fi','so',',vti,','do'))
devtools::load_all(".")
kern(c('do','re','fi','so',',vti,','do'))
str
str_
kern(c('do','re','fi','so',',vti,','do'))
devtools::load_all(".")
kern(c('do','re','fi','so',',vti,','do'))
REs
devtools::load_all(".")
kern(c('do','re','fi','so',',vti,','do'))
syl
str
devtools::load_all(".")
makeRE.solfa()
c('do','re','fi','so',',vti,','do')->z
grepl(makeRE.solfa(), z)
stringr::str_extrach(makeRE.solfa(), z)
stringr::str_extract(makeRE.solfa(), z)
stringr::str_extract(z,makeRE.solfa())
devtools::load_all(".")
stringr::str_extract(z,makeRE.solfa())
kern(c('do','re','fi','so',',vti,','do'))
interval(c('do','re','fi','so',',vti,','do'))
interval(c('do','re','fi','so',',vti,','do'), melodic=T)
semit(c('do','re','fi','so',',vti,','do'), melodic=T)
semit(c('do','re','fi','so',',vti,','do'), melodic=F)
semit(c('do','re','fi','so',',vti,','do'), melodic=T)
devtools::load_all(".")
semit(c('do','re','fi','so',',vti,','do'), melodic=T)
kern(c(0L, 0L,2L,2L,3L))
kern(c(0L, 0L,2L,2L,3L), melodic=T)
devtools::load_all(".")
kern(c(0L, 0L,2L,2L,3L), melodic=T)
z <- c('M2','M2','m2','-d5','m2')
z
kern(z)
kern(z, melodic=T)
kern(z, parseArgs(melodic=T))
kern(z, parseArgs(melodic=T))
args
kern(z, parseArgs(melodic=T))
args
kern(z, parse(melodic=T))
kern(z, parse(simple=T))
kern(z, parse(melodic=T))
args
callname
kern(z, parse(melodic=T))
arg
args
interval2tint(z)
z
interval2tint(z,melodic=F)
interval2tint(z,melodic=T)
interval2tint(z,melodic=T) ->z
kern(z)
z@Fifth
z
c('do','re','fi','so',',vti,','do')->z
z
c('+M2','+M2','+m2')
c('+M2','+M2','+m2') -> x
x
interval2tint(x)
interval2tint(x)@Fifth
interval2tint(x)
interval2tint(x)
args
devtools::load_all(".")
interval2tint(x)
x
interval2tint(x)
parseArgs
fargs
devtools::load_all(".")
interval2tint(x)
devtools::load_all(".")
interval2tint(x)
args
parseArgs
devtools::load_all(".")
interval2tint(x)
length(args)
fargs
q
kern
kern2tint
tint2kern
fargs(kern)
fargs(interval)
interval2tint(x)
interval2tint(z,melodic=T)
interval2tint(z,melodic=F)
z
z <- c('M2','M2','m2','-d5','m2')
interval2tint(z,melodic=F)
tint(0,2)
tint(0,2)
kern(tint(0,2)) -> a
kern(tint(0,2))
n
n
kern(tint(0,2))
kern(tint(0,2))
parseArgs
args
length(args)
fargs(kern)
fargs(kern)
kern
devtools::load_all(".")
kern(tint(0,2))
interval2tint(z,melodic=F)
interval2tint(z,melodic=T)
z
interval2tint(z,melodic=T)
z
kern(z)
z
kern(z)
z
kern(z, deparse=F)
kern(z)
kern(z, deparse=F)
z
z <- c('M2','M2','m2','-D5','m2')
z <- c('M2','M2','m2','d5','m2')
kern(z, deparse=F)
kern(z, deparse=T)
kern(z, deparse=F)
z <- c('M2','M2','m2','-d5','m2')
kern(z, deparse=F)
kern(z, deparse=F, directed=T)
kern(z, deparse=T)
kern(z, deparse=F)
kern(z, deparse=F)
kern(z, deparse=T)
kern(z, deparse=T)
class(x)
x
pats
parts
class(x)
x
kern(z, deparse=T)
class(x)
x@Fifth
x@Fifth
tonalInterval(z)
z
interval2tint(z)
y <- c('+M2','+M2','+m2','-d5','+m2')
interval2tint(z)
kern(z)
tonalInterval(z)
interval2tint(z)
z
interval2tint(y)
tonalInterval(y)
tonalInterval.character(y)
tonalInterval(y)
tonalInterval.character(y)
devtools::load_all(".")
tonalInterval(y)
devtools::load_all(".")
tonalInterval.character(y)
interval2tint(y)
makeRE.interval()
makeRE.interval(collapse=F)
devtools::load_all(".")
makeRE.interval(collapse=F)
interval2tint(y)
tonalInterval.character(y)
tonalInterval.character(z)
tonalInterval.character(y)
kern(y)
tonalInterval.character(y)
tonalInterval.character(y) -> a
tint2kern(a)
a
kern(a)
kern(z)
kern(z)
class(x)
z
a
tint2kern(a)
class(x)
x@Fifth
devtools::load_all(".")
tint2kern(a)
devtools::load_all(".")
tint2kern(a)
devtools::load_all(".")
tint2kern(a)
devtools::load_all(".")
tint2kern(a)
kern(z)
kern(z)
class(x)
x@Fifth
tonalInterval(z)
tonalInterval.character(z)
