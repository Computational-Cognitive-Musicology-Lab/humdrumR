devtools::document()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
devtools::document()
knitr::opts_knit$set(root.dir = humdrumR::humdrumRroot)
knitr::opts_chunk$set(
collapse = TRUE,
comment = ""
)
library(humdrumR)
?humdrumR
library(humdrumR)
setwd(humdrumRroot)
dir('HumdrumData')
dir('HumdrumData/BachChorales')
library(humdrumR)
setwd(humdrumRroot)
dir('HumdrumData')
setwd(humdrumRroot)
dir('HumdrumData/BachChorales')
setwd(humdrumRroot)
dir('HumdrumData/BachChorales')
setwd(humdrumRroot)
dir('HumdrumData/BachChorales')
setwd(humdrumRroot)
readHumdrum('HumdrumData/BachChorales/chor001.krn') -> chor1
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(humdrumR)
pkgdown::build_site()
knitr::opts_knit$set(root.dir = humdrumR::humdrumRroot)
knitr::opts_chunk$set(
collapse = TRUE,
comment = ""
)
library(humdrumR)
?humdrumR
library(humdrumR)
setwd(humdrumRroot)
dir('HumdrumData')
setwd(humdrumRroot)
dir('HumdrumData/BachChorales')
setwd(humdrumRroot)
readHumdrum('HumdrumData/BachChorales/chor001.krn') -> chor1
chor1
setwd(humdrumRroot)
readHumdrum('HumdrumData/BachChorales/chor0') -> chorales
chorales
setwd(humdrumRroot)
ex1 <- readLines('examples/BasicExample.krn')
rest <- ex1[-1]
tokens <- c(ex1[1], unlist(strsplit(rest, split = '\t| ')))
##
ex1df <- as.data.frame(t(stringi::stri_list2matrix(strsplit(rest, '\t'))), stringsAsFactors = FALSE)
cat(' ', sep = '', ex1[1], '\n')
apply(format.data.frame(ex1df, justify = 'left', width = 30), 1,
function(x) cat(' ', x, sep = '', '\n'))
printquoted <- function(ex) {
quoted <- ex
quoted[] <- lapply(quoted,
function(col) {
col <- strsplit(col, split = ' ')
col <- lapply(col,  function(x) paste0('<', x, '>'))
sapply(col, paste, collapse = ' ')
})
cat('<', ex1[1], '>', '\n', sep ='')
apply(format.data.frame(quoted, justify = 'left', width = 30), 1,
function(x) cat(x, sep = '', '\n'))
invisible(NULL)
}
printquoted(ex1df)
setwd(humdrumRroot)
example1 <- readHumdrum('examples/BasicExample.krn')
example1
humtab <- getHumtab(example1)
humtab
colnames(humtab)
fields(example1)
fields(chorales)
example1$Spine
# example1$Record
example1$Type
example1$Filename
setwd(humdrumRroot)
stops <- readHumdrum('examples/Stops.krn')
stops
getHumtab(stops)
setwd(humdrumRroot)
paths1 <- readHumdrum('examples/Paths.krn')
paths1
paths1$Path
getHumtab(paths1)
setwd(humdrumRroot)
paths2 <- readHumdrum('examples/Paths2.krn')
paths2
paths2$Path
getHumtab(paths2)
~ Spine + File
~ nchar(Token)
~ paste0(Token, Record)
chorales %hum>% ~ Spine + File
chorales %hum>% ~ nchar(Token)
chorales %hum>% ~ paste0(Token, Record)
chorales %hum>% ~ semit(Token)
chorales
semit('ee-')
semit(c('ee-','c#'))
pitch(c('ee-','c#'))
pitch(c('ee-','c#'),deparse=F)
pitch(c('ee-','c#','G'),deparse=F)
pitch(c('ee-','c#','G'),deparse=F, multiDispatch=T)
pitch(c('ee-','c#','G'),deparse=F, multiDispatch=F)
tonalInterval.character(c('ee-','c#','G'),deparse=F, multiDispatch=T)
humdrumR:::tonalInterval.character(c('ee-','c#','G'),deparse=F, multiDispatch=T)
humdrumR:::tonalInterval.character(c('ee-','c#','G'))
humdrumR:::tonalInterval.character
pitch(c('ee-','c#','G'),deparse=F, multiDispatch=F)
Lmatches
dispatchDF$regex
pitch(c('ee-','c#','G'),deparse=F, multiDispatch=F)
dispatchDF
dispatchDF$regex
list(...)
dispatchDF$regex(...)
dispatchDF$regex[[1(...)
dispatchDF$regex[[1]](...)
dispatchDF$regex[[1]](..., flat='b')
dispatchDF$regex
devtools::document()
pitch(c('ee-','c#','G'),deparse=F, multiDispatch=F)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
build_home_index(); init_site()
library(pkgdown)
build_home_index(); init_site()
build_home_index(); init_site()
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site()
library(humdrumR)
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*.krn') -> ch
ch
sensus(ch)
census(ch)
spines(ch)
devtools::document()
spines(ch)
devtools::document()
census(ch)
summary(ch)
reference(ch)
summary(ch)
devtools::load_all()
summary(ch)
devtools::load_all()
summary(ch)
census(ch)
ch
ch
devtools::load_all()
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*.krn') -> ch
ch
ch
ch
ch
devtools::load_all()
ch
library(humdrumR)
ch
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*.krn') -> ch
ch
ch
ch
reference(ch)
reference(ch)
reference(ch)
ch[1:10]
o tonalInterval
ch %hum>% ~kern(., simple = TRUE) -> ch$Kern
ch
ch %hum<% table |> barplot()
ch %hum<% ~table(Kern, Kern[n = -1])
length(ch)
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*.krn') -> ch
ch
length(ch)
ch %hum>% ~kern(., simple = TRUE) -> ch$Kern
length(ch)
ch
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*.krn') -> ch
ch %hum<% ~Token -> tok
tok
length(tok)
length(kern(tok))
length(kern(tok, simple=T))
kern(tok, simple=T)
kern(tok, simple=T) |> table()
ch %hum>% ~kern(Token, simple=T)
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
ch %hum>% ~kern(Token, simple=T)
ls()
length(x)
ch %hum<% ~length(Token)
ch %hum>% ~kern(Token, simple=T)
length(x)
x
unique(x)
unique(x) |> length()
length(x)
unique(cbind(x, Key)) |> length()
x
length(output)
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
get('x')
get('x') |> length()
do.call(tonalInterval, c(list(x, inPlace = inPlace, memoize = FALSE), parseArgs)) |> length()
length(list(x)pp1)
length(list(x)[[1]])
parseArgs
names(parseArgs)
length(Exclusive)
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
length(x)
ch %hum>% ~kern(Token, simple=T)
length(x)
length(Exclusive)
length(parseArgs$Excluisive)
lengths(parseArgs)
memoize
ch %hum>% ~kern(Token, simple=T)
length(x)
lengths(c(list(x, inPlace=inPlace), parseArgs))
parsedTint <- do.call(tonalInterval, c(list(x, inPlace = inPlace), parseArgs))
length(parsedTint)
class(parsedTint)
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
length(na)
length(output)
any(!ina)
any(!na)
deparseArgs
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
options(warn = 3)
ch %hum>% ~kern(Token, simple=T)
ch %hum>% ~kern(Token, simple=T)
class(na)
length(na)
table(na)
length(output)
method
class(method)
callf...
lengths(c(list(strs[!na]), list(...)))
callf...(method, c(list(strs[!na]), list(...)))
callf...(method, c(list(strs[!na]), list(...))) |> length()
output[!na]
output[!na] <- callf...(method, c(list(strs[!na]), list(...)))
sum(na)
table(na)
lengths(c(list(strs[!na]), list(...)))
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
system.time(ch %hum>% ~kern(Token, simple=T))
ch %hum>% ~solfa(Token, simple=T)
ch %hum<% ~solfa(Token, simple=T) |> table()
ch %hum<% ~solfa(Token, simple=T) |> table() |> barplot()
ch %hum>% ~solfa(Token, simple=T) -> ch$Solfa
ch %hum<% ~table(Solfa, Solfa[n = -1])
ch %hum<% ~table(Solfa, Solfa[n = -1], useNA='always')
ch[[1:50,]]
system.time(ch %hum>% ~kern(Token, simple=T))
system.time(ch %hum>% ~kern(Token, simple=T, memoize=F))
system.time(ch %hum>% ~kern(Token, simple=T, memoize=T))
devtools::load_all()
system.time(ch %hum>% ~kern(Token, simple=T, memoize=T))
length(x)
length(x)
devtools::load_all()
ch %hum<% c(~table(Solfa, Solfa[n = -1], useNA='always'), by ~ 'File')
ch %hum<% c(do~table(Solfa, Solfa[n = -1], useNA='always'), by ~ 'File')
ch %hum<% c(do~table(Solfa, Solfa[n = -1], useNA='always'), by ~ File)
devtools::document()
library(humdrumR)
system.time(ch %hum>% ~kern(Token, simple=T, memoize=T))
system.time(ch %hum>% ~kern(Token, simple=T, memoize=F))
system.time(ch %hum>% ~kern(Token, simple=T, memoize=F))
system.time(ch %hum>% ~kern(Token, simple=T, memoize=T))
ch %hum<% ~Token -> tok
length(tok)
length(unique(tok))
toku <- unique(tok)
kern(tok)
system.time(kern(tok))
system.time(kern(toku))
system.time(kern(toku))
kern(toku)
devtools::load_all()
kern(toku)
length(str)
kern(tok)
length(str)
kern(tok, memoize=T)
length(tok)
kern(tok, memoize=T)
length(str)
kern(tok, memoize=F)
length(str)
'E-' + M2
devtools::load_all()
'E-' + M2
'E-' + M2
library(humdrumR)
'E-' + M2
'Eb5' + M2
'E-' + M2
x
devtools::load_all()
makeRE.kern()
stringr::str_match('e--', makeRE.kern())
stringr::str_match('e--', makeRE.kern()[[1]])
stringr::str_extract('e--', makeRE.kern()[[1]])
devtools::load_all()
readHumdrum('~/Bridge/Research/Data/CoCoPops/RollingStoneCorpus/Humdrum/*hum') -> rs
rs[[~'OTL' %~% 'Love']]
rs[[~'OTL' == 'Hey Jude']]
rs
reference(rs)$OTL
reference(rs)$OTL |> sort()
rs[~OTL == 'Love and Happiness']
rs[~OTL == 'Love and Happiness'] -> lh
lh %hum>% c(~semit(Token, memoize=FALSE), where ~ Spine == 3) -> lh$SEmit
lh
setActiveFields(lh, c('Token', 'SEmit'))
kern('b3')
kern('b3', Exclusive='deg')
kern('b3', Exclusive='deg', parse(flat='b'))
lh %hum>% c(~semit(Token, memoize=FALSE,parse(flat='b')), where ~ Spine == 3) -> lh$SEmit
lh
rs %hum>% c(~semit(Token, memoize = FALSE, parse(flat = 'b')), where ~ Spine == 3, elsedo ~ Token, by ~ Spine) -> rs$Semit
rs
rs[1]
rs[2]
rs %hum<% c(~c(File[1], min(Semit, na.rm=T)), by ~ File)
rs %hum<% c(~list(File[1], min(Semit, na.rm=T)), by ~ File)
rs %hum<% c(~c(File[1], min(Semit, na.rm=T)), by ~ File)
rs10
rs[10]
setActiveFiels(rs[10], c('Token', Semit))
setActiveFields(rs[10], c('Token', Semit))
setActiveFields(rs[10], c('Token', Semits))
rs
setActiveFields(rs[10], c('Token', Semit))
setActiveFields(rs[10], c('Token', 'Semit'))
rs$Token %hum>% c(~semit(Token, memoize = FALSE, parse(flat = 'b')), where ~ Spine == 3, elsedo ~ Token, by ~ File) -> rs$Semit
rs
rs %hum<% ~hist(Semit)
rs$Semit %hum<% ~hist(Semit)
rs$Semit %hum<% ~Semit
rs[[,3]] %hum<% ~hist(Semit)
rs[[,3]] %hum<% ~hist(as.integer(Semit))
rs[[,3]] %hum<% ~plot(sort(as.integer(Semit))
rs[[,3]] %hum<% ~plot(sort(as.integer(Semit)))
rs$Semit %hum<% ~mean(Semit)
rs$Semit %hum<% c(~mean(as.numeric(Semit)), where ~ Spine == 3,by ~File)
rs$Semit %hum<% c(~c(File, mean(as.numeric(Semit))), where ~ Spine == 3,by ~File)
rs$Semit %hum<% c(~c(File[1], mean(as.numeric(Semit))), where ~ Spine == 3,by ~File)
rs$Semit %hum<% c(~list(File[1], mean(as.numeric(Semit))), where ~ Spine == 3,by ~File)
rs$Semit %hum<% c(~list(c(File[1], mean(as.numeric(Semit)))), where ~ Spine == 3,by ~File)
rs$Semit %hum<% c(~list(c(File[1], mean(as.numeric(Semit)))), where ~ Spine == 3,by ~File) |> rbindlist()
rs$Semit %hum<% c(~list(c(File[1], mean(as.numeric(Semit)))), where ~ Spine == 3,by ~File) |> do.call(what='rbind')
rs$Semit %hum<% c(~list(c(File[1], mean(as.numeric(Semit)))), where ~ Spine == 3,by ~File) |> do.call(what='rbind') -> h
h[order(h[,2]),]
rs[48]
setActiveField(rs[48], c('Token', 'Semit'))
setActiveFields(rs[48], c('Token', 'Semit'))
readHumdrum('~/Bridge/Research/Data/CoCoPops/RollingStoneCorpus/Humdrum/Elvis*hum') -> rs
readHumdrum('~/Bridge/Research/Data/CoCoPops/RollingStoneCorpus/Humdrum/Elvis*hum') -> pe
readHumdrum('~/Bridge/Research/Data/CoCoPops/RollingStoneCorpus/Humdrum/Elvis.*hum') -> pe
pe
pe$Token %hum>% c(~semit(Token, memoize = FALSE, parse(flat = 'b')), where ~ Spine == 3, elsedo ~ Token, by ~ File) -> pe$Semit
pe %hum<% c(hist(as.numeric(Semit)))
pe$Token %hum>% c(~semit(Token, memoize = FALSE, parse(flat = 'b')), where ~ Spine == 3, by ~ File) -> pe$Semit
pe %hum<% ~hist(Semit)
pe %hum<% ~c(range(Semit),by~ File)
pe %hum<% c(~range(Semit),by~ File)
pe %hum<% c(~list(File =File[1], Range=range(Semit)),by~ File)
re[2]
pe[2]
setActiveFields(pe[2], c('Token', 'Semit'))
rs
pe
devtools::load_all()
pe
pe
devtools::load_all()
devtools::load_all()
pe
filei
filei
i
i
plot(i)
length(global)
tokmat
which(global)
tokmat[1:10,]
pe
tokmat[1:10,]
pe
tokmat[1:10,]
pe
class(x)
records
records[1:20]
records[1]
records[[1]][1:10]
pe
newhumtab
newhumtab[,plot(Record)]
devtools::load_all()
pe
devtools::load_all()
pe
plot(newhumtab$Record)
plot(orderHumtab(newhumtab)$Record)
newhumtab
newhumtab[1:30]
newhumtab[1:30, Record]
orderHumtab(newhumtab)[1:30,Record]
devtools::load_all()
pe
orderingcols
?setorderv
humtab[1:30,cbind(Record, Type)]
humtab[1:30,cbind(Record, Type)]
humtab[1:30,cbind(Record, Type)]
humtab[1:30,cbind(Record, Type)]
humtab[1:30,cbind(Record, Type)]
humtab[1:30,cbind(Record, Type)]
humtab[1:30,cbind(Record, Type)]
pe
newhumtab[1:30, cbind(Type, Record)]
newhumtab <- orderHumtab(newhumtab)
newhumtab[1:30, cbind(Type, Record)]
newhumtab$Record
newhumtab$Record |> class()
newhumtab[1:30, cbind(Type, Record,File)]
setorder(newhumtab, File, Column)
newhumtab[1:30, cbind(Type, Record,Column)]
setorderv(newhumtab, cols = c('File', 'Column', 'Record'), na.last = F)[1:30, cbind(Type, Record,Column)]
setorderv(newhumtab, cols = c('File', 'Column', 'Record'), na.last = R)[1:30, cbind(Type, Record,Column)]
setorderv(newhumtab, cols = c('File', 'Column', 'Record'), na.last = T)[1:30, cbind(Type, Record,Column)]
devtools::load_all()
pe
devtools::load_all()
pe
devtools::load_all()
pe
devtools::load_all()
pe
pe
devtools::load_all()
pe
devtools::load_all()
pe
devtools::load_all()
pe
newhumtab[1:30]
newhumtab[1:30,list(File, Token, Record,Column)]
devtools::load_all()
pe
records
records[[1]]
records[[1]][1:30]
getHumtab(x)[1:30,list(Record,Type,Token)]
