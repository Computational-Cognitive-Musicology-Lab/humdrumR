parseAnchors(letters,open = ~close-2, close = ~open + 4)
devtools::load_all()
parseAnchors(letters,open = ~close-2, close = ~open + 4)
lower.tri(parseAnchors(letters,open = ~close-2, close = ~open + 4))
devtools::load_all()
lower.tri(parseAnchors(letters,open = ~close-2, close = ~open + 4))
glue::glue_collapse()
glue::glue_collapse
devtools::load_all()
parseAnchors(letters,open = ~close-2, close = ~open + 4)
devtools::load_all()
parseAnchors(letters,open = ~close-2, close = ~open + 4)
parseAnchors(letters,open = ~hop(10), close = ~open + 4)
devtools::load_all()
parseAnchors(letters,open = ~hop(10), close = ~open + 4)
bad
references
references & t(references)
lower.tri(references & t(references))
devtools::load_all()
parseAnchors(letters,open = ~hop(10), close = ~open + 4)
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=1)
devtools::load_all()
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=1)
references
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=1)
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=1)
names(formulae)
devtools::load_all()
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=1)
devtools::load_all()
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=1)
devtools::load_all()
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=1)
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=open+2)
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=~open+2)
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=~close-3)
parseAnchors(letters,open = ~start+1, close = ~open + 4,start=~close-3)
parseAnchors(letters,open = ~start+1, close = ~open + 4,start=~close-3)
parseAnchors(letters,open = ~start+1, close = ~open + 4,start=~close-3)
references
diag(reference())
diag(reference())Q
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=~open+2)
diag(references)
?diag
diag(3)
references
diag(3) - references
parseAnchors(letters,open = ~start+1, close = ~open + 4,start=~close-3)
diag(3) - references
eigen(diag(3) - references)
eigen(diag(3) - references)$values == 0
eigen(diag(3) - references)$values < .00000001
eigen(diag(3) - references)$values < .0000001
abs(eigen(diag(3) - references)$values) == 0
abs(eigen(diag(3) - references)$values) < .00001
devtools::load_all()
parseAnchors(letters,open = ~start+1, close = ~open + 4,start=~close-3)
parseAnchors(letters,open = ~start+1, close = ~open + 4)
parseAnchors(letters,open = ~close+2, close = ~open + 4)
devtools::load_all()
parseAnchors(letters,open = ~close+2, close = ~open + 4)
parseAnchors(letters,open = ~close+2, close = ~'a')
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open + 2)
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open - close)
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open)
parseAnchors(letters,open = ~start+2, close = ~'a', start = ~open)
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open)
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
sort(which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T))
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
devtools::load_all()
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
safe
formulae[safe]
references
!safe
safe
devtools::load_all()
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
references
devtools::load_all()
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
references
forms
devtools::load_all()
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
forms
formulae
colnames(formulae)
safe
devtools::load_all()
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
references
forms
references
safe
references
forms
references
references
devtools::load_all()
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open)
devtools::load_all()
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open)
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open)
safe
safe
devtools::load_all()
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open)
parseAnchors(letters,open = ~start+3, close = ~'a', start = ~'2')
parseAnchors(letters,open = ~start+3, close = ~'a', start = ~first(close + 10))
devtools::load_all()
parseAnchors(letters,open = ~start+3, close = ~'a', start = ~first(close + 10))
parseAnchors(letters,open = ~close+4, close = ~1:10)
devtools::load_all()
parseAnchors(letters,open = ~close+4, close = ~1:10)
parseAnchors(letters,open = 1:10, close = ~1:10)
parseAnchors(letters,open = 1:10, close = ~1:10)
referebces
references
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~1:10)
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~1:10)
references
names
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~1:10)
parseAnchors(letters,open = 1:10, close = ~1:10)
references
parseAnchors(letters,open = 1:10, close = ~1:10)
length(anchors)
length9names
length(names)
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~1:10)
parseAnchors(letters,open = 1:10, close = ~1:10)
references
parseAnchors(letters,open = 1:10, close = ~open + 2)
references
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open + 2)
parseAnchors(letters,open = 1:10, close = ~2)
gc()
parseAnchors(letters,open = 1:10, close = ~2)
parseAnchors(letters,open = 1:10, close = ~2)
formulae
forms
references
parseAnchors(letters,open = 1:10, close = ~2)
references
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~2)
parseAnchors(letters,open = 1:10, close = ~open+5)
parseAnchors(letters,open = 1:10, close = ~open+5)
references
safe
forms
colnames(references)
references
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
parseAnchors(letters,open = 1:10, close = ~open+5)
safe
forms
parseAnchors(letters,open = 1:10, close = ~open+5)
references
close
Q
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
references
formulate
formulae
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
safe
references
froms
forms
colnames(references)
safe
formulae
colnames(references)[safe]
safe
parseAnchors(letters,open = 1:10, close = ~open+5)
references
args
evaled
anchors
references
formulae
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
references
anchors
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
anhors
anchors
references
forms
references
safe
parseAnchors(letters,open = 1:10, close = ~open+5)
anchors
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
parseAnchors(letters,open = 1:10, close = '[aeiou]')
parseAnchors(letters,open = ~close - 4, close = '[aeiou]')
parseAnchors(letters,open = ~next(close) - 4, close = '[aeiou]')
parseAnchors(letters,open = ~next(close) + 2, close = '[aeiou]')
mext
next
parseAnchors(letters,open = ~Next(close) + 2, close = '[aeiou]')
parseAnchors(letters,open = ~hop(3), close = '[aeiou]')
parseAnchors(letters,open = ~hop(3), close = ~'[aeiou]' %after% open)
parseAnchors(letters,open = ~hop(3), close = ~'[aeiou]' %after% open)
references
parseAnchors(letters,open = ~hop(3), close = ~'[aeiou]' %after% open)
anchor
x
eng
env$open
parseAnchors(letters,open = ~hop(3), close = ~'[aeiou]' %after% open)
anchor
anchor
analyzeExpr(quote(a + "e"))
analyzeExpr(quote("e"))
devtools::load_all()
parseAnchor(letters, ~open + 'a')
devtools::load_all()
parseAnchor(letters, ~open + 'a')
devtools::load_all()
parseAnchor(letters, ~open + 'a')
parseAnchor(letters, ~open + 'a')
exprA
exprA
devtools::load_all()
parseAnchor(letters, ~open + 'a')
parseAnchors(letters,open = ~hop(3), close = ~'[aeiou]' %after% open)
parseAnchors(letters,open = ~hop(3), close = ~'[aeiou]' %after% open)
parseAnchors(letters,open = ~hop(3), close = ~'[aeiouz]' %after% open)
devtools::load_all()
align(c(5,10,20),c(1,9,19,15,25), overlap=4)
align(c(5,10,20),c(1,9,19,15,25), overlap=1)
align(c(5,10,20),c(1,9,19,15,25), overlap=0)
align(c(5,10,20),c(1,9,19,15,25), overlap=1)
devtools::load_all()
align(c(5,10,20),c(1,9,19,15,25), overlap=1)
align(c(5,10,20),c(1,9,19,15,25), overlap=0:1)
depth(align(c(5,10,20),c(1,9,19,15,25), overlap=0:1))
depth(align(c(5,10,20),c(1,9,19,15,25), overlap=0:1))
devtools::load_all()
depth(align(c(5,10,20),c(1,9,19,15,25), overlap=0:1))
depth(align(c(5,10,20),c(1,9,19,15,25), overlap=0:1))
devtools::load_all()
depth(align(c(5,10,20),c(1,9,19,15,25), overlap=0:1))
depth(align(c(5,10,20),c(1,9,19,15,25), overlap=0:1)) |> as.data.frame()
devtools::load_all()
depth(align(c(5,10,20),c(1,9,19,15,25), overlap=0:1)) |> as.data.frame()
depth(align(c(5,10,20),c(1,9,19,15,25)) |> as.data.frame()
depth(align(c(5,10,20),c(1,9,19,15,25))) |> as.data.frame()
align(c(5,10,20),c(1,9,19,15,25)) |> as.data.frame()
depth(align(c(5,10,20),c(1,9,19,15,25))) |> as.data.frame()
devtools::load_all()
align(c(5,10,20),c(1,9,19,15,25)) |> as.data.frame()
align(c(5,10,20),c(1,9,19,15,25))
devtools::load_all()
align(c(5,10,20),c(1,9,19,15,25)) |> as.data.frame()
align(c(5,10,20),c(1,9,19,15,25)) |> as.data.frame()
output
align(c(5,10,20),c(1,9,19,15,25)) |> as.data.frame()
align(c(5,10,20),c(1,9,19,15,25)) |> as.data.frame()
i
dts <- lapply(nearest,
\(o) {
i <- i - o
i[i <= 0L] <- NA_integer_
data.table(Open = open[i], Close = ifelse(is.na(i), NA_integer_, close))
})
dts
nearest
devtools::load_all()
align(c(5,10,20),c(1,9,19,15,25)) |> as.data.frame()
align(c(5,10,20),c(1,9,19,15,25)) |> as.data.frame()
i
nearest
align(c(5,10,20),c(1,9,19,15,25)) |> as.data.frame()
i
open[i]
ifelse(is.na(i), NA_integer_, close)
align(c(5,10,20),c(1,9,19,15,25))
devtools::load_all()
align(c(5,10,20),c(1,9,19,15,25))
outuput
output
Reduce('|', lapply(output, is.na))
!Reduce('|', lapply(output, is.na))
output[!Reduce('|', lapply(output, is.na))]
devtools::load_all()
align(c(5,10,20),c(1,9,19,15,25))
align(c(5,10,20),c(1,9,19,15,25), nearest=0:1)
align(c(5,10,20),c(1,9,19,15,25))
align(c(5,10,20),c(1,9,19,15,25), nearest=1)
devtools::load_all()
align(c(5,10,20),c(1,9,19,15,25), nearest=1)
align(c(5,10,20),c(1,9,19,15,25), nearest=1, duplicateOpen=T,duplicateClose=T)
devtools::load_all()
align(c(5,10,20),c(1,9,19,15,25), nearest=1, duplicateOpen=T,duplicateClose=T)
align(c(5,10,20),c(1,9,19,15,25), nearest=1, duplicateOpen=T,duplicateClose=F)
align(c(5,10,20),c(1,9,19,15,25), nearest=1, duplicateOpen=F,duplicateClose=F)
align(c(5,10,20),c(1,9,19,15,25), nearest=1, duplicateOpen=T,duplicateClose=T)
devtools::load_all()
align(c(5,10,20),c(1,9,19,15,25), nearest=1, duplicateOpen=T,duplicateClose=T)
devtools::load_all()
align(c(5,10,20),c(1,9,19,15,25), nearest=1, duplicateOpen=T,duplicateClose=T)\
align(c(5,10,20),c(1,9,19,15,25), nearest=1, duplicateOpen=T,duplicateClose=T)
devtools::load_all()
align(c(5,10,20),c(1,9,19,15,25), nearest=1, duplicateOpen=T,duplicateClose=T)
align(c(5,10,20),c(1,9,19,15,25), nearest=1, duplicateOpen=T,duplicateClose=T)
align(c(5,10,20),c(1,9,19,15,25), nearest=0, duplicateOpen=T,duplicateClose=T)
align(c(5,10,20),c(1,9,19,15,25), nearest=0, duplicateOpen=F,duplicateClose=F)
align(c(5,10,20),c(1,9,19,15,25), nearest=0, duplicateOpen=F,duplicateClose=F)
dups
devtools::load_all()
align(c(5,10,20),c(1,9,19,15,25), nearest=0, duplicateOpen=F,duplicateClose=F)
dups
output
Reduce('|', dups)
output[!Reduce('|;, dups')]
output[!Reduce('|, dups)]
output[!Reduce('|', dups)]
devtools::load_all()
align(c(5,10,20),c(1,9,19,15,25), nearest=0, duplicateOpen=F,duplicateClose=F)
align(c(5,10,20),c(1,9,19,15,25), nearest=0, duplicateOpen=F,duplicateClose=T)
align(c(5,10,20),c(1,9,19,15,25), nearest=0, duplicateOpen=T,duplicateClose=T)
align(c(5,10,20),c(1,9,19,15,25), nearest=0, duplicateOpen=T,duplicateClose=F)
align(c(5,10,20),c(1,9,19,15,25), nearest=0, duplicateOpen=F,duplicateClose=F)
align(c(5,10,20),c(1,9,19,15,25), nearest=0, duplicateOpen=T,duplicateClose=T)
depth(align(c(5,10,20),c(1,9,19,15,25), nearest=0, duplicateOpen=T,duplicateClose=T))
depth(align(c(5,10,20),c(1,9,19,15,25), nearest=0, duplicateOpen=T,duplicateClose=T)) |> as.data.frame()
depth(align(1:20,1:10, nearest=0, duplicateOpen=T,duplicateClose=T)) |> as.data.frame()
depth(align(1:20,1:20, nearest=0, duplicateOpen=T,duplicateClose=T)) |> as.data.frame()
depth(align(1:20,2:20, nearest=0, duplicateOpen=T,duplicateClose=T)) |> as.data.frame()
depth(align(1:19,2:20, nearest=0, duplicateOpen=T,duplicateClose=T)) |> as.data.frame()
depth(align(1:19,2:20, duplicateOpen=T,duplicateClose=T)) |> as.data.frame()
depth(align(1:18,3:20, duplicateOpen=T,duplicateClose=T)) |> as.data.frame()
depth(align(1:18,3:20,nearest=0 duplicateOpen=T,duplicateClose=T)) |> as.data.frame()
depth(align(1:18,3:20,nearest=0, duplicateOpen=T,duplicateClose=T)) |> as.data.frame()
depth(align(1:18,3:20,nearest=1, duplicateOpen=T,duplicateClose=T)) |> as.data.frame()
depth(align(1:18,3:20,nearest=2, duplicateOpen=T,duplicateClose=T)) |> as.data.frame()
depth(align(1:18,3:20,nearest=4, duplicateOpen=T,duplicateClose=T)) |> as.data.frame()
devtools::load_all()
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*.krn') -> ch
ch[1] %hum<% ~Token
devtools::load_all()
ch[1] %hum<% ~Token
ch[1] %hum<% ~Token
options(warn=0)
ch[1] %hum<% ~Token
options(warn=3)
ch[1] %hum<% ~Token
ch[1] %hum<% ~Token
Type
Head
is.function(Head)
is.function('mean')
devtools::load_all()
ch[1] %hum<% ~Token
ch[1] %hum<% ~Token -> z
windows(z, open = ~close - 5, close = ';')
windows(z, open = ~close - 5, close = ';')
windows(z, open = ~close - 5, close = ';')[,Map(\(f,t) z[f:t], Open,Close)]
windows(z, open = ~close - 5, close = ';')[,Map(\(f,t) z[f:t], Open,Close, simplify=F)]
windows(z, open = ~close - 5, close = ';')[,Map(\(f,t) z[f:t], Open,Close)]
z
windows(z, open = ~close - 5, close = ';')[,Map(\(f,t) z[f:t], Open,Close)]
windows(z, open = ~c(start, close+1), close = ';')[,Map(\(f,t) z[f:t], Open,Close)]
windows(z, open = ~c(start, Next(close)+1), close = ';')[,Map(\(f,t) z[f:t], Open,Close)]
windows(z, open = ~c(start, Next(close)+1), close = ';')[,Map(\(f,t) z[f:t], Open,Close)]
open
close
length(open)
windows(z, open = ~c(Next(close)+1), close = ';')[,Map(\(f,t) z[f:t], Open,Close)]
windows(z, open = ~c(Next(close)+1), close = ';')[,Map(\(f,t) z[f:t], Open,Close)]
windows(z, open = ~c(Next(close)+1), close = ';')[,Map(\(f,t) z[f:t], Open,Close)]
open
close
windowFrame
devtools::load_all()
windows(z, open = ~c(Next(close)+1), close = ';')[,Map(\(f,t) z[f:t], Open,Close)]
windows(z, open = ~c(Next(close)+1), close = ';')[,Map(\(f,t) z[f:t], Open,Close)]
close
open
windows(z, open = ~c(start, Next(close)+1), close = ';')[,Map(\(f,t) z[f:t], Open,Close)]
windows(z, open = ~c(start, Next(close)+1), close = ';')[,Map(\(f,t) z[f:t], Open,Close)]
start
open
close
windows(z, open = ~c(start, Next(close)+1), close = ~c(';',end))[,Map(\(f,t) z[f:t], Open,Close)]
open
close
windows(z, open = ~c(start, Next(close)+1), close = ~c(';',end))[,Map(\(f,t) z[f:t], Open,Close)]
close
windows(z, open = ~c(start, Next(close)+1), close = ~c(';',end))[,Map(\(f,t) z[f:t], Open,Close)]
devtools::load_all()
windows(z, open = ~c(start, Next(close)+1), close = ~c(';',end))[,Map(\(f,t) z[f:t], Open,Close)]
windows(z, open = ~c(start, Next(close)+1), close = ~c(';',end))[,Map(\(f,t) z[f:t], Open,Close)]
close
open
i
output
windows(z, open = ~c(Next(close)+1), close = ~c(';',end))[,Map(\(f,t) z[f:t], Open,Close)]
open
close
windows(z, open = ~c(close+1), close = ~c(';',end))[,Map(\(f,t) z[f:t], Open,Close)]
open
close
windows(z, open = ~c(close+1), close = ~c(';',end))[,Map(\(f,t) z[f:t], Open,Close)]
output
output
dups
output
devtools::load_all()
windows(z, open = ~c(close+1), close = ~c(';',end))[,Map(\(f,t) z[f:t], Open,Close)]
windows(z, open = ~c(close+1), close = ~c(';',end))[,Map(\(f,t) z[f:t], Open,Close)]
windowFrame
windows(z, open = ~c(close+1), close = ~c(';',end))
windows(z, open = ~c(close+1), close = ~c(';',end)) ->g
g
windows(z, open = ~c(close+1), close = ~c(';',end))[,Map(\(f,t) z[f:t], Open,Close)]
windows(z, open = ~c(close+1), close = ~c(';',end))[,mapply(\(f,t) z[f:t], Open,Close,simplify=F)]
windows(z, open = ~c(close+1), close = ~c(';',end))[,mapply(\(f,t) z[f:t], Open,Close,SIMPLIFY =F)]
windows(z, open = ~c(close+1), close = ~c(';',end))[,list(mapply(\(f,t) z[f:t], Open,Close,SIMPLIFY =F)))]
windows(z, open = ~c(close+1), close = ~c(';',end))[,list(mapply(\(f,t) z[f:t], Open,Close,SIMPLIFY =F))]
windows(z, open = ~c(close+1), close = ~c(';',end))[,list(mapply(\(f,t) z[f:t], Open,Close,SIMPLIFY =F))]$V1
z
windows(z, open = ~c(close+1), close = ~c(';',end))[,list(mapply(\(f,t) z[f:t], Open,Close,SIMPLIFY =F))]$V1[1:3]
windows(z, open = ~c(start,close+1), close = ~c(';',end))[,list(mapply(\(f,t) z[f:t], Open,Close,SIMPLIFY =F))]$V1[1:3]
windows(z, open = ~c(start,close+1), close = ~c(';',end))[,list(mapply(\(f,t) z[f:t], Open,Close,SIMPLIFY =F))]$V1[1:3]
windows(z, open = ~c(start,close+1), close = ~c(';',end))[,list(mapply(\(f,t) z[f:t], Open,Close,SIMPLIFY =F))]$V1[1:3]
windows(z, open = ~c(start,close+1), close = ~c(';',end))[,list(mapply(\(f,t) z[f:t], Open,Close,SIMPLIFY =F))]$V1[1:10]
windows(z, open = ~c(start,close+1), close = ~c(';',end), min_length=9)[,list(mapply(\(f,t) z[f:t], Open,Close,SIMPLIFY =F))]$V1[1:10]
windows(z, open = ~c(start,close+1), close = ~c(';',end), min_length=0)[,list(mapply(\(f,t) z[f:t], Open,Close,SIMPLIFY =F))]$V1[1:10]
windows(z, open = ~c(start,close+1), close = ~c(';',end), max_length=10)[,list(mapply(\(f,t) z[f:t], Open,Close,SIMPLIFY =F))]$V1[1:10]
windows(z, open = ~c(start,close+1), close = ~c(';',end), max_length=4)[,list(mapply(\(f,t) z[f:t], Open,Close,SIMPLIFY =F))]$V1[1:10]
windows(z, open = ~c(start,close+1), close = ~c(';',end), max_length=5)[,list(mapply(\(f,t) z[f:t], Open,Close,SIMPLIFY =F))]$V1[1:10]
windows(z, open = ~c(start,close+1), close = ~c(';',end), max_length=5)
windows(z, open = ~c(start,close+1), close = ~c(';',end), max_length=2)
windows(z, open = ~c(start,close+1), close = ~c(';',end), max_length=5)
windows(z, open = ~hop(1), close = ~open+1, max_length=5)
windows(z, open = ~hop(1), close = ~open+1)
z
windows(z, open = ~hop(1), close = ~open+1)
windows(z, open = ~hop(1), close = ~open+1, min_length=0)
windows(z, open = ~hop(1), close = ~open+1, min_length=1)
windows(z, open = ~hop(1), close = ~open+1, min_length=1)
length(z)
windows(z, open = ~hop(1), close = ~open+5, min_length=1)
length(z)
devtools::load_all()
windows(z, open = ~hop(1), close = ~open+5, min_length=1)
devtools::load_all()
windows(z, open = ~hop(1), close = ~open+5, min_length=1)
windows(z, open = ~hop(1), close = ~open+55, min_length=1)
windows(z, open = ~hop(1), close = ~open+55, min_length=1,end=200)
c(0,0,0,0) * rint(1:10)
ring(1)
rint(1)
rint(1:10)
rint(1:10) * c(0,0,0,0,0,0,0,0,0,0,0)
fraction(rint(1:10))
rint2fraction(rint(1:10))
devtools::load_all()
rint2fraction(rint(1:10))
rint2rational(rint(1:10))
rint2rational(rint(1:10)) |> class()
rint2rational(rint(1:10)) |> attributes()
as.fraction(0)
as.fraction(0)@Numerator
as.rational(0)
as.rational(3)
as.rational(3) |> unclass()
as.rational(3)$Numerator
devtools::load_all()
rint2rational(rint(1:10)) |> attributes()
rint(c(1,2,3,4)) * c(0,1,0,1)
sum(rint(c(1,2,3,4)) * c(0,1,0,1))
rhythmInterval(3)
devtools::load_all()
sum(rint(c(1,2,3,4)) * c(0,1,0,1))
devtools::load_all()
sum(rint(c(1,2,3,4)) * c(0,1,0,1))
duration(rint(1:3))
devtools::load_all()
sum(rint(c(1,2,3,4)) * c(0,1,0,1))
sum(rint(c(1,2,3,4)) * c(0,1,``,1))
sum(rint(c(1,2,3,4)) * c(0,1,1,1))
sum(rint(c(1,2,3,4)) * c(0,1,1,0))
sum(rint(c(1,2,3,4)) * c(0,1,1,0)) |> duration()
sum(rint(c(1,2,3,4,5:6)) * c(0,0,1,0,0,1)) |> duration()
sum(rint(c(1,2,3,4,5:6)) * c(0,0,1,0,0,1)) |> duration()
