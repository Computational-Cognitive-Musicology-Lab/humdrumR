twd()
getwd()
library(pkgdown)
install.packages("pkgdown")
library(pkgdown)
devtools::document()
library(humdrumR)
library(humdrumR)
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*.krn') -> ch
ch
ch %hum<% kern -> ch$Kern
ch
ch %hum<% ~kern(Token, simple=T) |> table()
ch %hum<% ~kern(Token, simple=T) |> table() |> barplot()
ch %hum<% ~kern(Token, simple=T, transpose(to = 'C:')) |> table() |> barplot()
ch %hum<% ~solfa(Token) |> table() |> barplot()
ch %hum<% ~kern(Token, simple=T, transpose(to = 'C:')) |> table() |> barplot()
ch %hum<% ~solfa(Token) |> table() |> barplot()
ch %hum<% ~kern(Token, simple=T, transpose(to = 'C:')) |> table() |> barplot()
census(ch)
summary(ch)
reference(ch)
reference(ch)
reference(ch) -> z
print(z)
devtools::document()
print(z)
codeCounts
sapply(codeCounts, \(col) num2str(sum(!is.na(col) & col > 0L)))
sapply(codeCounts, \(x) num2str(sum(x)), na.rm = TRUE)
num2str
devtools::load_all()
census(ch)
summary(ch)
reference(ch)
ch[1:10]
ch[[1:50,]]
ch[[~Record %% 2 == 0,]]
ch[[~DataN %% 2 == 0,]]
fields(ch)
ch[[~NData %% 2 == 0,]]
ch[[,3]]
ch[[,3,drop=F]]
ch[[,3,removeEmpty=F]]
?humdrumR-package
?humdrumRpackage
?humdrumR
?humTable
?humAs
?coercion
?humCoercion
?humColumns
?setActive
?humActive
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
ditto
fillThru
?fillThur
?fillThru
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
?readHumdrum
devtools::document()
devtools::document()
devtools::document()
?readHumdrum
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
devtools::document()
knitr::opts_knit$set(root.dir = humdrumR::humdrumRroot)
knitr::opts_chunk$set(
collapse = TRUE,
comment = ""
)
library(humdrumR)
?humdrumR
library(humdrumR)
setwd(humdrumRroot)
dir('HumdrumData')
dir('HumdrumData/BachChorales')
library(humdrumR)
setwd(humdrumRroot)
dir('HumdrumData')
setwd(humdrumRroot)
dir('HumdrumData/BachChorales')
setwd(humdrumRroot)
dir('HumdrumData/BachChorales')
setwd(humdrumRroot)
dir('HumdrumData/BachChorales')
setwd(humdrumRroot)
readHumdrum('HumdrumData/BachChorales/chor001.krn') -> chor1
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(humdrumR)
pkgdown::build_site()
knitr::opts_knit$set(root.dir = humdrumR::humdrumRroot)
knitr::opts_chunk$set(
collapse = TRUE,
comment = ""
)
library(humdrumR)
?humdrumR
library(humdrumR)
setwd(humdrumRroot)
dir('HumdrumData')
setwd(humdrumRroot)
dir('HumdrumData/BachChorales')
setwd(humdrumRroot)
readHumdrum('HumdrumData/BachChorales/chor001.krn') -> chor1
chor1
setwd(humdrumRroot)
readHumdrum('HumdrumData/BachChorales/chor0') -> chorales
chorales
setwd(humdrumRroot)
ex1 <- readLines('examples/BasicExample.krn')
rest <- ex1[-1]
tokens <- c(ex1[1], unlist(strsplit(rest, split = '\t| ')))
##
ex1df <- as.data.frame(t(stringi::stri_list2matrix(strsplit(rest, '\t'))), stringsAsFactors = FALSE)
cat(' ', sep = '', ex1[1], '\n')
apply(format.data.frame(ex1df, justify = 'left', width = 30), 1,
function(x) cat(' ', x, sep = '', '\n'))
printquoted <- function(ex) {
quoted <- ex
quoted[] <- lapply(quoted,
function(col) {
col <- strsplit(col, split = ' ')
col <- lapply(col,  function(x) paste0('<', x, '>'))
sapply(col, paste, collapse = ' ')
})
cat('<', ex1[1], '>', '\n', sep ='')
apply(format.data.frame(quoted, justify = 'left', width = 30), 1,
function(x) cat(x, sep = '', '\n'))
invisible(NULL)
}
printquoted(ex1df)
setwd(humdrumRroot)
example1 <- readHumdrum('examples/BasicExample.krn')
example1
humtab <- getHumtab(example1)
humtab
colnames(humtab)
fields(example1)
fields(chorales)
example1$Spine
# example1$Record
example1$Type
example1$Filename
setwd(humdrumRroot)
stops <- readHumdrum('examples/Stops.krn')
stops
getHumtab(stops)
setwd(humdrumRroot)
paths1 <- readHumdrum('examples/Paths.krn')
paths1
paths1$Path
getHumtab(paths1)
setwd(humdrumRroot)
paths2 <- readHumdrum('examples/Paths2.krn')
paths2
paths2$Path
getHumtab(paths2)
~ Spine + File
~ nchar(Token)
~ paste0(Token, Record)
chorales %hum>% ~ Spine + File
chorales %hum>% ~ nchar(Token)
chorales %hum>% ~ paste0(Token, Record)
chorales %hum>% ~ semit(Token)
chorales
semit('ee-')
semit(c('ee-','c#'))
pitch(c('ee-','c#'))
pitch(c('ee-','c#'),deparse=F)
pitch(c('ee-','c#','G'),deparse=F)
pitch(c('ee-','c#','G'),deparse=F, multiDispatch=T)
pitch(c('ee-','c#','G'),deparse=F, multiDispatch=F)
tonalInterval.character(c('ee-','c#','G'),deparse=F, multiDispatch=T)
humdrumR:::tonalInterval.character(c('ee-','c#','G'),deparse=F, multiDispatch=T)
humdrumR:::tonalInterval.character(c('ee-','c#','G'))
humdrumR:::tonalInterval.character
pitch(c('ee-','c#','G'),deparse=F, multiDispatch=F)
Lmatches
dispatchDF$regex
pitch(c('ee-','c#','G'),deparse=F, multiDispatch=F)
dispatchDF
dispatchDF$regex
list(...)
dispatchDF$regex(...)
dispatchDF$regex[[1(...)
dispatchDF$regex[[1]](...)
dispatchDF$regex[[1]](..., flat='b')
dispatchDF$regex
devtools::document()
pitch(c('ee-','c#','G'),deparse=F, multiDispatch=F)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
build_home_index(); init_site()
library(pkgdown)
build_home_index(); init_site()
build_home_index(); init_site()
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site()
library(humdrumR)
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*.krn') -> ch
ch
sensus(ch)
census(ch)
spines(ch)
devtools::document()
spines(ch)
devtools::document()
census(ch)
summary(ch)
reference(ch)
summary(ch)
devtools::load_all()
summary(ch)
devtools::load_all()
summary(ch)
census(ch)
ch
ch
devtools::load_all()
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*.krn') -> ch
ch
ch
ch
ch
devtools::load_all()
ch
library(humdrumR)
ch
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*.krn') -> ch
ch
ch
ch
reference(ch)
reference(ch)
reference(ch)
ch[1:10]
o tonalInterval
ch %hum>% ~kern(., simple = TRUE) -> ch$Kern
ch
ch %hum<% table |> barplot()
ch %hum<% ~table(Kern, Kern[n = -1])
length(ch)
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*.krn') -> ch
ch
length(ch)
ch %hum>% ~kern(., simple = TRUE) -> ch$Kern
length(ch)
ch
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*.krn') -> ch
ch %hum<% ~Token -> tok
tok
length(tok)
length(kern(tok))
length(kern(tok, simple=T))
kern(tok, simple=T)
kern(tok, simple=T) |> table()
ch %hum>% ~kern(Token, simple=T)
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
ch %hum>% ~kern(Token, simple=T)
ls()
length(x)
ch %hum<% ~length(Token)
ch %hum>% ~kern(Token, simple=T)
length(x)
x
unique(x)
unique(x) |> length()
length(x)
unique(cbind(x, Key)) |> length()
x
length(output)
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
get('x')
get('x') |> length()
do.call(tonalInterval, c(list(x, inPlace = inPlace, memoize = FALSE), parseArgs)) |> length()
length(list(x)pp1)
length(list(x)[[1]])
parseArgs
names(parseArgs)
length(Exclusive)
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
length(x)
ch %hum>% ~kern(Token, simple=T)
length(x)
length(Exclusive)
length(parseArgs$Excluisive)
lengths(parseArgs)
memoize
ch %hum>% ~kern(Token, simple=T)
length(x)
lengths(c(list(x, inPlace=inPlace), parseArgs))
parsedTint <- do.call(tonalInterval, c(list(x, inPlace = inPlace), parseArgs))
length(parsedTint)
class(parsedTint)
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
length(na)
length(output)
any(!ina)
any(!na)
deparseArgs
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
options(warn = 3)
ch %hum>% ~kern(Token, simple=T)
ch %hum>% ~kern(Token, simple=T)
class(na)
length(na)
table(na)
length(output)
method
class(method)
callf...
lengths(c(list(strs[!na]), list(...)))
callf...(method, c(list(strs[!na]), list(...)))
callf...(method, c(list(strs[!na]), list(...))) |> length()
output[!na]
output[!na] <- callf...(method, c(list(strs[!na]), list(...)))
sum(na)
table(na)
lengths(c(list(strs[!na]), list(...)))
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
system.time(ch %hum>% ~kern(Token, simple=T))
ch %hum>% ~solfa(Token, simple=T)
ch %hum<% ~solfa(Token, simple=T) |> table()
ch %hum<% ~solfa(Token, simple=T) |> table() |> barplot()
ch %hum>% ~solfa(Token, simple=T) -> ch$Solfa
ch %hum<% ~table(Solfa, Solfa[n = -1])
ch %hum<% ~table(Solfa, Solfa[n = -1], useNA='always')
ch[[1:50,]]
system.time(ch %hum>% ~kern(Token, simple=T))
system.time(ch %hum>% ~kern(Token, simple=T, memoize=F))
system.time(ch %hum>% ~kern(Token, simple=T, memoize=T))
devtools::load_all()
system.time(ch %hum>% ~kern(Token, simple=T, memoize=T))
length(x)
length(x)
devtools::load_all()
ch %hum<% c(~table(Solfa, Solfa[n = -1], useNA='always'), by ~ 'File')
ch %hum<% c(do~table(Solfa, Solfa[n = -1], useNA='always'), by ~ 'File')
ch %hum<% c(do~table(Solfa, Solfa[n = -1], useNA='always'), by ~ File)
devtools::document()
library(humdrumR)
system.time(ch %hum>% ~kern(Token, simple=T, memoize=T))
system.time(ch %hum>% ~kern(Token, simple=T, memoize=F))
system.time(ch %hum>% ~kern(Token, simple=T, memoize=F))
system.time(ch %hum>% ~kern(Token, simple=T, memoize=T))
ch %hum<% ~Token -> tok
length(tok)
length(unique(tok))
toku <- unique(tok)
kern(tok)
system.time(kern(tok))
system.time(kern(toku))
system.time(kern(toku))
kern(toku)
devtools::load_all()
kern(toku)
length(str)
kern(tok)
length(str)
kern(tok, memoize=T)
length(tok)
kern(tok, memoize=T)
length(str)
kern(tok, memoize=F)
length(str)
'E-' + M2
devtools::load_all()
'E-' + M2
'E-' + M2
library(humdrumR)
'E-' + M2
'Eb5' + M2
'E-' + M2
