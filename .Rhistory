stretch(g,4)
stretch(g,c(NA,4))
stretch(g,c(1,4))
stretch(g,c(1))
stretch(g,c(1,4))
.stretch <- function(x, length.out, dim) {
pad <- length.out - dim
browser()
# if length.out is smaller in any dimension!
ind <- Map(\(l, d) if (l < d) 1:l else rlang::missing_arg(),
length.out, dim)
x <- rlang::eval_tidy(rlang::expr(`[`(x, !!!ind)))
class <- class(c(x))
Reduce(\(cur, pmar) {
p <- pmar[1]
margin <- pmar[2]
if (p <= 0) {
cur
} else {
dim <- dim(cur)
dim[margin] <- p
pad <- array(as(NA, class), dim =dim)
abind(cur, pad, along = margin)
}
}, Map(c, pad, seq_along(pad)), init = x)
}
stretch(g,c(1,4))
ind
x
.recycle <- function(x, length.out, dim) {
ind <- Map(\(d, l) rlang::expr(rep_len(seq_len(!!d), !!l)), dim, length.out )
rlang::eval_tidy(rlang::expr(`[`(x, !!!ind, drop = FALSE)))
}
stretch(g,c(1,4))
stretch(g,c(1,4))
ind
x
.stretch <- function(x, length.out, dim) {
browser()
# if length.out is smaller in any dimension!
ind <- Map(\(l, d) if (l < d) 1:l else rlang::missing_arg(),
length.out, dim)
x <- rlang::eval_tidy(rlang::expr(`[`(x, !!!ind, drop = FALSE)))
class <- class(c(x))
Reduce(\(cur, pmar) {
p <- pmar[1]
margin <- pmar[2]
if (p <= 0) {
cur
} else {
dim <- dim(cur)
dim[margin] <- p
pad <- array(as(NA, class), dim =dim)
abind(cur, pad, along = margin)
}
}, Map(c, pad, seq_along(pad)), init = x)
}
stretch(g,c(1,4))
.stretch <- function(x, length.out, dim) {
# if length.out is smaller in any dimension!
ind <- Map(\(l, d) if (l < d) 1:l else rlang::missing_arg(),
length.out, dim)
x <- rlang::eval_tidy(rlang::expr(`[`(x, !!!ind, drop = FALSE)))
browser()
class <- class(c(x))
Reduce(\(cur, pmar) {
p <- pmar[1]
margin <- pmar[2]
if (p <= 0) {
cur
} else {
dim <- dim(cur)
dim[margin] <- p
pad <- array(as(NA, class), dim =dim)
abind(cur, pad, along = margin)
}
}, Map(c, pad, seq_along(pad)), init = x)
}
stretch(g,c(1,4))
x
ind
.stretch <- function(x, length.out, dim) {
pad <- length.out - dim
# if length.out is smaller in any dimension!
ind <- Map(\(l, d) if (l < d) 1:l else rlang::missing_arg(),
length.out, dim)
x <- rlang::eval_tidy(rlang::expr(`[`(x, !!!ind, drop = FALSE)))
class <- class(c(x))
Reduce(\(cur, pmar) {
p <- pmar[1]
margin <- pmar[2]
if (p <= 0) {
cur
} else {
dim <- dim(cur)
dim[margin] <- p
pad <- array(as(NA, class), dim =dim)
abind(cur, pad, along = margin)
}
}, Map(c, pad, seq_along(pad)), init = x)
}
stretch(g,c(1,4))
stretch(g,c(2,4))
stretch(g,c(0,4))
.stretch <- function(x, length.out, dim) {
pad <- length.out - dim
# if length.out is smaller in any dimension!
ind <- Map(\(l, d) if (l < d) 1:l else rlang::missing_arg(),
length.out, dim)
browser()
x <- rlang::eval_tidy(rlang::expr(`[`(x, !!!ind, drop = FALSE)))
class <- class(c(x))
Reduce(\(cur, pmar) {
p <- pmar[1]
margin <- pmar[2]
if (p <= 0) {
cur
} else {
dim <- dim(cur)
dim[margin] <- p
pad <- array(as(NA, class), dim =dim)
abind(cur, pad, along = margin)
}
}, Map(c, pad, seq_along(pad)), init = x)
}
stretch(g,c(0,4))
ind
seq_len(0)
Q
.stretch <- function(x, length.out, dim) {
pad <- length.out - dim
# if length.out is smaller in any dimension!
ind <- Map(\(l, d) if (l < d) seq_len(l) else rlang::missing_arg(),
length.out, dim)
browser()
x <- rlang::eval_tidy(rlang::expr(`[`(x, !!!ind, drop = FALSE)))
class <- class(c(x))
Reduce(\(cur, pmar) {
p <- pmar[1]
margin <- pmar[2]
if (p <= 0) {
cur
} else {
dim <- dim(cur)
dim[margin] <- p
pad <- array(as(NA, class), dim =dim)
abind(cur, pad, along = margin)
}
}, Map(c, pad, seq_along(pad)), init = x)
}
Q
seq_len(0)
.stretch <- function(x, length.out, dim) {
pad <- length.out - dim
# if length.out is smaller in any dimension!
ind <- Map(\(l, d) if (l < d) seq_len(l) else rlang::missing_arg(),
length.out, dim)
x <- rlang::eval_tidy(rlang::expr(`[`(x, !!!ind, drop = FALSE)))
class <- class(c(x))
Reduce(\(cur, pmar) {
p <- pmar[1]
margin <- pmar[2]
if (p <= 0) {
cur
} else {
dim <- dim(cur)
dim[margin] <- p
pad <- array(as(NA, class), dim =dim)
abind(cur, pad, along = margin)
}
}, Map(c, pad, seq_along(pad)), init = x)
}
seq_len(0)
seq_len(0)
stretch(g,c(0,4))
stretch(g,c(0,4))
stretch(g,c(2,4))
stretch(g,c(2,4,2))
stretch(g,c(2,4,3))
stretch(g,c(NA,NA,3))
recycle(g,c(NA,NA,3))
recycle(g,c(NA,4))
match_size <- function(..., toEnv = FALSE, recycle = TRUE) {
x <- list(...)[[1]]
rest <- list(...)[-1]
target <- .dim(x)
rest <- lapply(rest, if (hasdim(x)) cbind else c)
recycle <- if (recycle) recycle else stretch
rest <- lapply(rest,
\(y) {
recycle(y, target)
})
output <- c(x, rest)
# if (toEnv) list2env(stuff[names(stuff != '')], envir = parent.frame(1))
# if (toEnv) invisible(stuff) else stuff
}
match_size(1:10,1:3)
source("~/Bridge/Coding/R/Packages/humdrumR/R/tools.R")
match_size(1:10,1:3)
match_size <- function(..., toEnv = FALSE, recycle = TRUE) {
x <- list(...)[[1]]
rest <- list(...)[-1]
target <- .dim(x)
rest <- lapply(rest, if (hasdim(x)) cbind else c)
recycle <- if (recycle) recycle else stretch
rest <- lapply(rest,
\(y) {
recycle(y, target)
})
output <- c(x, rest)
# if (toEnv) list2env(stuff[names(stuff != '')], envir = parent.frame(1))
output
# if (toEnv) invisible(stuff) else stuff
}
match_size(1:10,1:3)
match_size <- function(..., toEnv = FALSE, recycle = TRUE) {
x <- list(...)[[1]]
rest <- list(...)[-1]
target <- .dim(x)
rest <- lapply(rest, if (hasdim(x)) cbind else c)
recycle <- if (recycle) recycle else stretch
rest <- lapply(rest,
\(y) {
browser()
recycle(y, target)
})
output <- c(x, rest)
# if (toEnv) list2env(stuff[names(stuff != '')], envir = parent.frame(1))
output
# if (toEnv) invisible(stuff) else stuff
}
match_size(1:10,1:3)
y
target
match_size <- function(..., toEnv = FALSE, recycle = TRUE) {
x <- list(...)[[1]]
rest <- list(...)[-1]
target <- .dim(x)
rest <- lapply(rest, if (hasdim(x)) cbind else c)
recycle <- if (recycle) recycle else stretch
rest <- lapply(rest,
\(y) {
recycle(y, target)
})
browser()
output <- c(x, rest)
# if (toEnv) list2env(stuff[names(stuff != '')], envir = parent.frame(1))
output
# if (toEnv) invisible(stuff) else stuff
}
match_size(1:10,1:3)
rest
x
c(x, rest)
x
match_size <- function(..., toEnv = FALSE, recycle = TRUE) {
x <- list(...)
target <- .dim(x[[1]])
rest[-1] <- lapply(rest[-1], if (hasdim(x[[1]])) cbind else c)
recycle <- if (recycle) recycle else stretch
x[-1] <- lapply(rest[-1],
\(y) {
recycle(y, target)
})
browser()
x
# if (toEnv) list2env(stuff[names(stuff != '')], envir = parent.frame(1))
# if (toEnv) invisible(stuff) else stuff
}
match_size(1:10,1:3)
match_size <- function(..., toEnv = FALSE, recycle = TRUE) {
x <- list(...)
target <- .dim(x[[1]])
x[-1] <- lapply(x[-1], if (hasdim(x[[1]])) cbind else c)
recycle <- if (recycle) recycle else stretch
x[-1] <- lapply(x[-1],
\(y) {
recycle(y, target)
})
browser()
x
# if (toEnv) list2env(stuff[names(stuff != '')], envir = parent.frame(1))
# if (toEnv) invisible(stuff) else stuff
}
match_size <- function(..., toEnv = FALSE, recycle = TRUE) {
x <- list(...)
target <- .dim(x[[1]])
x[-1] <- lapply(x[-1], if (hasdim(x[[1]])) cbind else c)
recycle <- if (recycle) recycle else stretch
x[-1] <- lapply(x[-1],
\(y) {
recycle(y, target)
})
x
# if (toEnv) list2env(stuff[names(stuff != '')], envir = parent.frame(1))
# if (toEnv) invisible(stuff) else stuff
}
match_size <- function(..., toEnv = FALSE, recycle = TRUE) {
x <- list(...)
target <- .dim(x[[1]])
x[-1] <- lapply(x[-1], if (hasdim(x[[1]])) cbind else c)
recycle <- if (recycle) recycle else stretch
x[-1] <- lapply(x[-1],
\(y) {
recycle(y, target)
})
browser()
x
# if (toEnv) list2env(stuff[names(stuff != '')], envir = parent.frame(1))
# if (toEnv) invisible(stuff) else stuff
}
match_size(1:10,1:3)
match_size(h,1:3)
match_size(g,1:3)
match_size <- function(..., toEnv = FALSE, recycle = TRUE) {
x <- list(...)
target <- .dim(x[[1]])
x[-1] <- lapply(x[-1], if (hasdim(x[[1]])) cbind else c)
recycle <- if (recycle) recycle else stretch
x[-1] <- lapply(x[-1],
\(y) {
recycle(y, target)
})
x
# if (toEnv) list2env(stuff[names(stuff != '')], envir = parent.frame(1))
# if (toEnv) invisible(stuff) else stuff
}
match_size(g,1:3)
match_size(1:3,g)
match_size(letters,g)
match_size(LETTERS,g)
match_size(LETTERS,H=g)
match_size(K=LETTERS,H=g)
match_size(K=LETTERS,H=g, recycle=FALSE)
match_size <- function(..., recycle = TRUE, toEnv = FALSE) {
x <- list(...)
target <- .dim(x[[1]])
x[-1] <- lapply(x[-1], if (hasdim(x[[1]])) cbind else c)
recycle <- if (recycle) recycle else stretch
x[-1] <- lapply(x[-1],
\(y) {
recycle(y, target)
})
x
# if (toEnv) list2env(stuff[names(stuff != '')], envir = parent.frame(1))
# if (toEnv) invisible(stuff) else stuff
}
match_size(K=LETTERS,H=g, recycle=FALSE)
match_size(K=LETTERS,1:3)
match_size <- function(..., recycle = TRUE, toEnv = FALSE) {
x <- list(...)
target <- .dim(x[[1]])
x[-1] <- lapply(x[-1], if (hasdim(x[[1]])) cbind else c)
recycle <- if (recycle) recycle else stretch
browser()
x[-1] <- lapply(x[-1],
\(y) {
recycle(y, target)
})
x
# if (toEnv) list2env(stuff[names(stuff != '')], envir = parent.frame(1))
# if (toEnv) invisible(stuff) else stuff
}
match_size(K=LETTERS,1:3)
recyfcle
recycle
match_size <- function(..., recycle = TRUE, toEnv = FALSE) {
x <- list(...)
target <- .dim(x[[1]])
x[-1] <- lapply(x[-1], if (hasdim(x[[1]])) cbind else c)
recycle <- if (recycle) match.fun('recycle') else match.fun('stretch')
x[-1] <- lapply(x[-1],
\(y) {
recycle(y, target)
})
x
# if (toEnv) list2env(stuff[names(stuff != '')], envir = parent.frame(1))
# if (toEnv) invisible(stuff) else stuff
}
match_size(K=LETTERS,1:3)
match_size(K=LETTERS,1:3,recycle=F)
match_size <- function(..., recycle = TRUE, toEnv = FALSE) {
x <- list(...)
target <- .dim(x[[1]])
x[-1] <- lapply(x[-1], if (hasdim(x[[1]])) cbind else c)
recycle <- if (recycle) match.fun('recycle') else match.fun('stretch')
browser()
x[-1] <- lapply(x[-1],
\(y) {
recycle(y, target)
})
x
# if (toEnv) list2env(stuff[names(stuff != '')], envir = parent.frame(1))
# if (toEnv) invisible(stuff) else stuff
}
match_size(K=LETTERS,1:3,recycle=F)
recycle
.fillout <- function(x, length.out, recycle = TRUE) {
if (length(length.out) <= 0) .stop(ifelse = recycle, "You can't <recycle|stretch> vector with a length argument of less than length 1.")
if (!hasdim(x)) {
if (length(length.out) > 1) {
x <- cbind(x)
} else {
return (rep_len(x, length.out))
}
}
dim <- dim(x)
dim[seq_along(length.out) > length(dim)] <- 1
dim(x) <- dim
length.out[seq_along(dim) > length(length.out)] <- dim[seq_along(dim) > length(length.out)]
length.out[is.na(length.out)] <- dim[is.na(length.out)]
browser()
if (recycle) .recycle(x, length.out, dim) else .stretch(x, length.out, dim)
}
match_size(K=LETTERS,1:3,recycle=F)
recycle
View(true)
View(true)
match_size(K=LETTERS,1:3,recycle=F)
source("~/Bridge/Coding/R/Packages/humdrumR/R/tools.R")
match_size(K=LETTERS,1:3,recycle=F)
match_size <- function(..., recycle = TRUE, toEnv = FALSE) {
x <- list(...)
target <- .dim(x[[1]])
x[-1] <- lapply(x[-1], if (hasdim(x[[1]])) cbind else c)
recycleF <- if (recycle) match.fun('recycle') else match.fun('stretch')
x[-1] <- lapply(x[-1],
\(y) {
recycleF(y, target)
})
x
# if (toEnv) list2env(stuff[names(stuff != '')], envir = parent.frame(1))
# if (toEnv) invisible(stuff) else stuff
}
match_size(K=LETTERS,1:3,recycle=F)
recycle(1:3,10)
stretch(1:3,10)
.fillout(1:3,10)
.fillout(1:3,10, recycle = FALSE)
.fillout <- function(x, length.out, recycle = TRUE) {
if (length(length.out) <= 0) .stop(ifelse = recycle, "You can't <recycle|stretch> vector with a length argument of less than length 1.")
if (!hasdim(x)) {
if (length(length.out) > 1) {
x <- cbind(x)
} else {
return (rep_len(x, length.out))
}
}
dim <- dim(x)
dim[seq_along(length.out) > length(dim)] <- 1
dim(x) <- dim
length.out[seq_along(dim) > length(length.out)] <- dim[seq_along(dim) > length(length.out)]
length.out[is.na(length.out)] <- dim[is.na(length.out)]
browser()
if (recycle) .recycle(x, length.out, dim) else .stretch(x, length.out, dim)
}
.fillout(1:3,10, recycle = FALSE)
.fillout(1:3,10, recycle = FALSE)
.fillout <- function(x, length.out, recycle = TRUE) {
if (length(length.out) <= 0) .stop(ifelse = recycle, "You can't <recycle|stretch> vector with a length argument of less than length 1.")
if (!hasdim(x)) {
if (length(length.out) > 1) {
x <- cbind(x)
} else {
return (rep_len(x, length.out))
}
}
dim <- dim(x)
dim[seq_along(length.out) > length(dim)] <- 1
dim(x) <- dim
length.out[seq_along(dim) > length(length.out)] <- dim[seq_along(dim) > length(length.out)]
length.out[is.na(length.out)] <- dim[is.na(length.out)]
browser()
if (recycle) .recycle(x, length.out, dim) else .stretch(x, length.out, dim)
}
.fillout(1:3,10, recycle = FALSE)
.fillout <- function(x, length.out, recycle = TRUE) {
if (length(length.out) <= 0) .stop(ifelse = recycle, "You can't <recycle|stretch> vector with a length argument of less than length 1.")
if (!hasdim(x)) {
if (length(length.out) > 1) {
x <- cbind(x)
} else {
return (if (recycle) rep_len(x, length.out) else x[seq_len(length.out)])
}
}
dim <- dim(x)
dim[seq_along(length.out) > length(dim)] <- 1
dim(x) <- dim
length.out[seq_along(dim) > length(length.out)] <- dim[seq_along(dim) > length(length.out)]
length.out[is.na(length.out)] <- dim[is.na(length.out)]
a
if (recycle) .recycle(x, length.out, dim) else .stretch(x, length.out, dim)
}
.fillout(1:3,10, recycle = FALSE)
match_size(K=LETTERS,1:3,recycle=F)
match_size(K=LETTERS,1:3,recycle=T)
source("~/Bridge/Coding/R/Packages/humdrumR/R/tools.R")
?list2enc
list2env(list(x=2))
list2env(list(x=2.3))
list2env(list(x=2,3))
devtools::load_all(".")
devtools::document()
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
rational(1:12)
c(rational(1:12))
c(rational(1:12) %<-dim% c(4,3))
rational(1:12) %<-dim% c(4,3)
devtools::load_all(".")
