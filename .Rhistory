length(ch)
ch %hum>% ~kern(., simple = TRUE) -> ch$Kern
length(ch)
ch
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*.krn') -> ch
ch %hum<% ~Token -> tok
tok
length(tok)
length(kern(tok))
length(kern(tok, simple=T))
kern(tok, simple=T)
kern(tok, simple=T) |> table()
ch %hum>% ~kern(Token, simple=T)
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
ch %hum>% ~kern(Token, simple=T)
ls()
length(x)
ch %hum<% ~length(Token)
ch %hum>% ~kern(Token, simple=T)
length(x)
x
unique(x)
unique(x) |> length()
length(x)
unique(cbind(x, Key)) |> length()
x
length(output)
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
get('x')
get('x') |> length()
do.call(tonalInterval, c(list(x, inPlace = inPlace, memoize = FALSE), parseArgs)) |> length()
length(list(x)pp1)
length(list(x)[[1]])
parseArgs
names(parseArgs)
length(Exclusive)
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
length(x)
ch %hum>% ~kern(Token, simple=T)
length(x)
length(Exclusive)
length(parseArgs$Excluisive)
lengths(parseArgs)
memoize
ch %hum>% ~kern(Token, simple=T)
length(x)
lengths(c(list(x, inPlace=inPlace), parseArgs))
parsedTint <- do.call(tonalInterval, c(list(x, inPlace = inPlace), parseArgs))
length(parsedTint)
class(parsedTint)
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
length(na)
length(output)
any(!ina)
any(!na)
deparseArgs
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
options(warn = 3)
ch %hum>% ~kern(Token, simple=T)
ch %hum>% ~kern(Token, simple=T)
class(na)
length(na)
table(na)
length(output)
method
class(method)
callf...
lengths(c(list(strs[!na]), list(...)))
callf...(method, c(list(strs[!na]), list(...)))
callf...(method, c(list(strs[!na]), list(...))) |> length()
output[!na]
output[!na] <- callf...(method, c(list(strs[!na]), list(...)))
sum(na)
table(na)
lengths(c(list(strs[!na]), list(...)))
devtools::load_all()
ch %hum>% ~kern(Token, simple=T)
system.time(ch %hum>% ~kern(Token, simple=T))
ch %hum>% ~solfa(Token, simple=T)
ch %hum<% ~solfa(Token, simple=T) |> table()
ch %hum<% ~solfa(Token, simple=T) |> table() |> barplot()
ch %hum>% ~solfa(Token, simple=T) -> ch$Solfa
ch %hum<% ~table(Solfa, Solfa[n = -1])
ch %hum<% ~table(Solfa, Solfa[n = -1], useNA='always')
ch[[1:50,]]
system.time(ch %hum>% ~kern(Token, simple=T))
system.time(ch %hum>% ~kern(Token, simple=T, memoize=F))
system.time(ch %hum>% ~kern(Token, simple=T, memoize=T))
devtools::load_all()
system.time(ch %hum>% ~kern(Token, simple=T, memoize=T))
length(x)
length(x)
devtools::load_all()
ch %hum<% c(~table(Solfa, Solfa[n = -1], useNA='always'), by ~ 'File')
ch %hum<% c(do~table(Solfa, Solfa[n = -1], useNA='always'), by ~ 'File')
ch %hum<% c(do~table(Solfa, Solfa[n = -1], useNA='always'), by ~ File)
devtools::document()
library(humdrumR)
system.time(ch %hum>% ~kern(Token, simple=T, memoize=T))
system.time(ch %hum>% ~kern(Token, simple=T, memoize=F))
system.time(ch %hum>% ~kern(Token, simple=T, memoize=F))
system.time(ch %hum>% ~kern(Token, simple=T, memoize=T))
ch %hum<% ~Token -> tok
length(tok)
length(unique(tok))
toku <- unique(tok)
kern(tok)
system.time(kern(tok))
system.time(kern(toku))
system.time(kern(toku))
kern(toku)
devtools::load_all()
kern(toku)
length(str)
kern(tok)
length(str)
kern(tok, memoize=T)
length(tok)
kern(tok, memoize=T)
length(str)
kern(tok, memoize=F)
length(str)
'E-' + M2
devtools::load_all()
'E-' + M2
'E-' + M2
library(humdrumR)
'E-' + M2
'Eb5' + M2
'E-' + M2
x
devtools::load_all()
makeRE.kern()
stringr::str_match('e--', makeRE.kern())
stringr::str_match('e--', makeRE.kern()[[1]])
stringr::str_extract('e--', makeRE.kern()[[1]])
devtools::load_all()
x <- c('a','(b', 'c','d)', 'e','(f', 'g', 'h)','i','j','(k','l','(m','n','o)','p)','q')
x
nested(x)
nested(x)
depths
opens
depths
nested(x)
opens
depths[opens]
depths[as.logical(opens)]
nested(x)
depths[as.logical(opens)]
depths[as.logical(closes)]
closes
i
sample(0:1, 1e6, replace=T)
sample(0:1, 1e6, replace=T)->g
system.time(as.logical(g))
devtools::load_all()
nested(x)
devtools::load_all()
nested(x)
devtools::load_all()
nested(x)
nested(x,depth=2)
devtools::load_all()
nested(x,depth=2)
devtools::load_all()
nested(x,depth=2)
nested(x,depth=1:2)
nested(x,depth=0)
setdiff(letters,'a')
devtools::load_all()
setdiff(letters,'a')
nested(x,depth=0)
indices
depth
depths
depth_vec
depth_vec == 0
cumsum(depth_vec == 0)
cumsum(depth_vec == 0) * (depth_vec == 0)
segments(depth_vec == 0)
segments(as.numeric(depth_vec == 0) )
segments(as.numeric(depth_vec == 0) ) * (depth_vec == 0)
devtools::load_all()
nested(x,depth=0)
devtools::load_all()
nested(x,depth=0)
devtools::load_all()
nested(x,depth=0)
ac(data.table(Open = integer(0L), Close = integer(0L), Depth = integer(0L)),
lapply(setdiff(intersect(depth_vec, depth), 0L),
\(d) {
dhit <- depth_vec == d
data.table(Open = which(as.logical(opens) & dhit),
Close = which(as.logical(closes) & dhit),
Depth = d)
}))
c(data.table(Open = integer(0L), Close = integer(0L), Depth = integer(0L)),
lapply(setdiff(intersect(depth_vec, depth), 0L),
\(d) {
dhit <- depth_vec == d
data.table(Open = which(as.logical(opens) & dhit),
Close = which(as.logical(closes) & dhit),
Depth = d)
}))
devtools::load_all()
nested(x,depth=0)
nested(x,depth=0)
indices
zerovlocks
zeroblocks
rbindlist(c(zeroblocks, list(indices)))
devtools::document()
devtools::load_all()
nested(x,depth=0)
devtools::load_all()
nested(x,depth=0)
?tappy
?tapply
devtools::load_all()
nested(x,depth=0)
nested(x,depth=1)
nested(x,depth=2)
nested(x,depth=0:2)
x
devtools::load_all()
nested(x,depth=0:2)
nested(x,depth=1:2)
nested(x,depth=1)
devtools::load_all()
nested(x,depth=1)
opens
closes
nested(x,depth=1)
as.logical(opens) & dihit
as.logical(opens) & dhit
closes
depths
cbind(opens,closes,depth_vec)
devtools::load_all()
nested(x,depth=1)
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
nested(x,depth=1)
nested(x,depth=1:2)
nested(x,depth=1:2,nested=F)
nested(x,depth=1:2,nested=F)
depths
depth_vec
devtools::load_all()
nested(x,depth=1:2,nested=F)
dhit
opens
openscum
x
depth_vec
which(as.logical(closes))
which(as.logical(closes))[opens[dhits]]
which(as.logical(closes))
dhits
as.logical(opens)
depth_vec[as.logical(opens)]
depth_vec[as.logical(opens)] == d
which(as.logical(closes))[depth_vec[as.logical(opens)] == d]
devtools::load_all()
nested(x,depth=1:2,nested=F)
nested(x,depth=1:2,nested=T)
nested(x,depth=1:2,nested=F)
x
nested(x,depth=1:2,nested=F)[, x[Open:Close], by = 1:nrow(.SD)]
nested(x,depth=1:2,nested=F)[, x[Open:Close], by = 1:4]
nested(x,depth=1:2,nested=F)[, paste(x[Open:Close],collapse='-'), by = 1:4]
nested(x,depth=1:2,nested=T)[, paste(x[Open:Close],collapse='-'), by = 1:4]
x <- c('a','(b', 'c','d)', 'e','((f', 'g', 'h)','i)','j','(k','l','(m','n','o)','p)','q')
nested(x,depth=1:2,nested=T)[, paste(x[Open:Close],collapse='-'), by = 1:4]
nested(x,depth=1:2,nested=T)[, paste(x[Open:Close],collapse='-')
nested(x,depth=1:2,nested=T)
nested(x,depth=1:2,nested=T)
depth_vec
opens
as.logical(2)
depth_vec - opens
depth_vec
depth_vec - (opens - 1)
depth_vec - (opens - 1)
depth_vec - (opens - 1) < depth
devtools::load_all()
nested(x,depth=1:2,nested=T)
devtools::load_all()
nested(x,depth=1:2,nested=T)
nested(x,depth=1:2,nested=T)
depth_vec
depth_vec
d
depth_vec - (opens - 1)
opens
depth_vec - (opens)
(depth_vec - opens) < d
(depth_vec - opens) < d
((depth_vec - opens) < d) & opens > 0
((depth_vec - opens) < 1) & opens > 0
((depth_vec - opens) < 2) & opens > 0
((depth_vec - opens) < 3) & opens > 0
depth_vec
depth_vec - opens
depth_vec - (opens - 1)
(depth_vec - (opens - 1)) <= d
(depth_vec - (opens - 1)) <= d
as.logical(opens) & ((depth_vec - (opens - 1)) <= d)
cbind(vec, as.logical(opens) & ((depth_vec - (opens - 1)) <= d))
cbind(vec, as.logical(opens) & ((depth_vec - (opens - 1)) <= 2))
depth_vec
opens
depth_vec
depth_vec - (opens - 1)
depth_vec - (abs(opens) - 1)
depth_vec
abs(opens)
depth_vec - pmax(abs(opens) - 1),0)
depth_vec - pmax(abs(opens) - 1,0)
depth_vec - pmax(opens - 1,0)
devtools::load_all()
nested(x,depth=1:2,nested=T)
nQ
nested(x,depth=1:2,nested=T)
depth_vec - pmax(opens - 1L, 0L)
depth_vec - pmax(opens - 1L, 0L) <= d
depth_vec - pmax(opens - 1L, 0L) == d
d
depth_vec - pmax(opens - 1L, 0L) <= d
as.logical(opens) & (depth_vec - pmax(opens - 1L, 0L) <= d)
cbind(vec,as.logical(opens) & (depth_vec - pmax(opens - 1L, 0L) <= d))
cbind(vec,as.logical(opens) & (depth_vec - pmax(opens - 1L, 0L) <= 2))
cbind(vec,as.logical(opens) & (depth_vec - pmax(opens - 1L, 0L) <= 2))
depth_vec
pmax(opens-1,0)
cbind(vec,as.logical(opens) & (depth_vec - pmax(opens - 1L, 0L) < 2))
cbind(vec,as.logical(opens) & (depth_vec - pmax(opens - 1L, 0L) < 1))
cbind(vec,as.logical(opens) & (depth_vec - pmax(opens - 1L, 0L) <= 1))
cbind(vec,as.logical(opens) & (depth_vec - pmax(opens - 1L, 0L) >= 1))
cbind(vec,as.logical(opens) & (depth_vec - pmax(opens - 1L, 0L) < 1))
cbind(vec,as.logical(opens) & (depth_vec - pmax(opens - 1L, 0L) <= 1))
cbind(vec,as.logical(opens) & (depth_vec - pmax(opens, 0L) <= 1))
cbind(vec,as.logical(opens) & (depth_vec - pmax(opens, 0L) < 1))
cbind(vec,as.logical(opens) & (depth_vec - pmax(opens, 0L) < 2))
cbind(vec,as.logical(opens) & (depth_vec -opens) < 2))
cbind(vec,as.logical(opens) & (depth_vec -opens) < 2)
cbind(vec,as.logical(opens) & (depth_vec -opens) < 1)
cbind(vec,as.logical(opens) & (depth_vec -opens) < 2)
cbind(vec,as.logical(opens) & (depth_vec -opens) == 2)
cbind(vec,as.logical(opens) & (depth_vec -opens) < 2)
depth_vec
rbind(depth_vec,depth_vec-opens)
rbind(depth_vec,depth_vec-(opens-1))
rbind(depth_vec,depth_vec-pmax((opens-1),1))
rbind(depth_vec,depth_vec-(opens-1))
rbind(depth_vec,depth_vec-(opens))
rbind(depth_vec,depth_vec-(opens) < (d + 1))
rbind(depth_vec,(depth_vec-(opens) < (d + 1)) * as.logical(opens))
depth_vec
rbind(depth_vec,depth_vec-(opens-q))
rbind(depth_vec,depth_vec-(opens-1))
rbind(depth_vec,(depth_vec-(opens-1)) <= 1)
rbind(depth_vec,(depth_vec-(opens-1)) >= 1)
rbind(depth_vec,((depth_vec-(opens-1)) >= 1) & as.logical(opens))
rbind(depth_vec,((depth_vec-(opens-1)) <= 1) & as.logical(opens))
rbind(depth_vec,depth_vec - (opens-1),((depth_vec-(opens-1)) <= 1) & as.logical(opens))
rbind(depth_vec,(depth_vec - (opens-1)) * as.logical(opens),((depth_vec-(opens-1)) <= 1) & as.logical(opens))
rbind(depth_vec,(depth_vec - (opens-1)) * as.logical(opens),((depth_vec-(opens-1)) <= 2) & as.logical(opens))
rbind(depth_vec,pmax(depth_vec, d) * as.logical(opens))
rbind(depth_vec,pmax(depth_vec, opens) * as.logical(opens))
pmax(opens - 1, 0)
d + pmax(opens - 1, 0)
depth_vec == (d + pmax(opens - 1, 0))
depth_vec <= (d + pmax(opens - 1, 0))
depth_vec < (d + pmax(opens - 1, 0))
depth_vec >= (d + pmax(opens - 1, 0))
(depth_vec >= (d + pmax(opens - 1, 0))) * as.logical(opens)
rbind(vec, (depth_vec >= (d + pmax(opens - 1, 0))) * as.logical(opens))
rbind(vec, (depth_vec ==  (d + pmax(opens - 1, 0))) * as.logical(opens))
rbind(vec, (depth_vec ==  (2 + pmax(opens - 1, 0))) * as.logical(opens))
rbind(vec, (depth_vec ==  (d + pmax(opens - 1, 0))) * as.logical(opens))
rbind(depth_vec, (depth_vec ==  (d + pmax(opens - 1, 0))) * as.logical(opens))
rbind(depth_vec, d + pmax(opens-1,0), (depth_vec ==  (d + pmax(opens - 1, 0))) * as.logical(opens))
rbind(depth_vec, d + pmax(opens-1,0), (depth_vec ==  (d - pmax(opens - 1, 0))) * as.logical(opens))
rbind(depth_vec, d - pmax(opens-1,0), (depth_vec ==  (d - pmax(opens - 1, 0))) * as.logical(opens))
rbind(depth_vec, d - pmax(opens-1,0), (depth_vec >  (d - pmax(opens - 1, 0))) * as.logical(opens))
rbind(depth_vec, d - pmax(opens-1,0), (depth_vec >  ((d - pmax(opens - 1, 0))-1) * as.logical(opens))
rbind(depth_vec, d - pmax(opens-1,0), (depth_vec >  ((d - pmax(opens - 1, 0)) - 1)) * as.logical(opens))
rbind(depth_vec, d - pmax(opens-1,0), (depth_vec <  ((d - pmax(opens - 1, 0)) - 1)) * as.logical(opens))
rbind(depth_vec, d - pmax(opens-1,0), (depth_vec <  (d - pmax(opens - 1, 0))) * as.logical(opens))
rbind(depth_vec, d - pmax(opens-1,0), (depth_vec <  (d + pmax(opens - 1, 0))) * as.logical(opens))
rbind(depth_vec, d - pmax(opens-1,0), (depth_vec <=  (d + pmax(opens - 1, 0))) * as.logical(opens))
rbind(depth_vec, d - pmax(opens-1,0), (depth_vec <=  (2 + pmax(opens - 1, 0))) * as.logical(opens))
rbind(depth_vec, d - pmax(opens-1,0), (depth_vec <=  (d + pmax(opens - 1, 0))) * as.logical(opens))
rbind(depth_vec, d - pmax(opens-1,0), (depth_vec <  (d + pmax(opens - 1, 0))) * as.logical(opens))
rbind(depth_vec, d - pmax(opens-1,0), (depth_vec <  (d + pmax(opens - 1, 0)) + 1) * as.logical(opens))
rbind(depth_vec, d - pmax(opens-1,0), (depth_vec <  (2 + pmax(opens - 1, 0)) + 1) * as.logical(opens))
rbind(depth_vec, d - pmax(opens-1,0), (depth_vec <  (d + pmax(opens - 1, 0)) + 1) * as.logical(opens))
rbind(depth_vec, starts)
rbind(depth_vec, opens)
rbind(depth_vec, opens, pmxa(opens-1,0))
rbind(depth_vec, opens, pmax(opens-1,0))
rbind(depth_vec, opens, pmax(opens-1,1))
rbind(depth_vec, opens, pmax(opens-1,0))
ifelse(opens > d, depth_vec - opens, depth_vec)
ifelse(opens >= d, depth_vec - opens, depth_vec)
ifelse(opens > d, depth_vec - opens, depth_vec)
opens
ifelse((opens - 1) > d, depth_vec - opens, depth_vec)
ifelse((opens - 1) > d, depth_vec - (opens - 1), depth_vec)
opens-1
pmax(opens-1, 0L)
pmax(opens-1, 0L) == d
ifelse(pmax(opens - 1, 0) == d, depth_vec - (opens - 1), depth_vec)
ifelse(pmax(opens - 1, 0) == d, depth_vec - (opens - 1), depth_vec)
ifelse(pmax(opens - 1, 0) == d, depth_vec - pmax(opens - 1, 0), depth_vec)
ifelse(pmax(opens - 1, 0) == d, depth_vec - pmax(opens - 1, 0), depth_vec) * as.logical(opens)
(ifelse(pmax(opens - 1, 0) == d, depth_vec - pmax(opens - 1, 0), depth_vec) == d) * as.logical(opens)
(ifelse(pmax(opens - 1, 0) == 2, depth_vec - pmax(opens - 1, 0), depth_vec) == 2) * as.logical(opens)
(ifelse(pmax(opens - 1, 0) == d, depth_vec - pmax(opens - 1, 0), depth_vec) == d) * as.logical(opens)
devtools::load_all()
nested(x,depth=1:2,nested=T)
nested(x,depth=1:2,nested=T)[, paste(x[Open:Close],collapse='-'), by = 1:5]
x
nested(x,depth=1,nested=T)[, paste(x[Open:Close],collapse='-'), by = 1:4]
nested(x,depth=1,nested=T)[, paste(x[Open:Close],collapse='-'), by = 1:3]
nested(x,depth=2,nested=T)[, paste(x[Open:Close],collapse='-'), by = 1:3]
nested(x,depth=2,nested=T)[, paste(x[Open:Close],collapse='-'), by = 1:2]
nested(x,depth=1:2,nested=T)[, paste(x[Open:Close],collapse='-'), by = 1:5]
nested(x,depth=1:2,nested=F)[, paste(x[Open:Close],collapse='-'), by = 1:5]
x
nested(x,depth=1:2,nested=F)[, paste(x[Open:Close],collapse='-'), by = 1:5]
devtools::load_all()
nested(x,depth=1:2,nested=F)[, paste(x[Open:Close],collapse='-'), by = 1:5]
nested(x,depth=1:2,nested=F)[, paste(x[Open:Close],collapse='-'), by = 1:3]
nested(x,depth=1:2,nested=F)[, paste(x[Open:Close],collapse='-'), by = 1:4]
nested(x,depth=1:2,nested=F)[, paste(x[Open:Close],collapse='-')]
nested(x,depth=1:2,nested=T)[, paste(x[Open:Close],collapse='-')]
nested(x,depth=1:2,nested=T)
nested(x,depth=1:2,nested=F)[, paste(x[Open:Close],collapse='-'), by = 1:5]
nested(x,depth=1:2,nested=F)[, paste(x[Open:Close],collapse='-'), by = 1:6]
nested(x,depth=1:2,nested=F)
nested(x,depth=1:2,nested=F)[, paste(x[Open:Close],collapse='-'), by = 1:6]
x
devtools::load_all()
nested(x,depth=1:2,nested=F)[, paste(x[Open:Close],collapse='-'), by = 1:6]
nested(x,depth=1:2,nested=F)[, paste(x[Open:Close],collapse='-'), by = I]
nested(x,depth=1:2,nested=F)[, paste(x[Open:Close],collapse='-'), by = .I]
nested(x,depth=1:2,nested=F) -> h; h[, paste(x[Open:Close],collapse='-'), by = 1:nrow(h)]
nested(x,depth=1:2,nested=FT) -> h; h[, paste(x[Open:Close],collapse='-'), by = 1:nrow(h)]
nested(x,depth=1:2,nested=T) -> h; h[, paste(x[Open:Close],collapse='-'), by = 1:nrow(h)]
nested(x,depth=1:2,nested=T) -> h; h[, paste(x[Open:Close],collapse='-'), by = 1:nrow(h)]
nested(x,depth=1:2,nested=F) -> h; h[, paste(x[Open:Close],collapse='-'), by = 1:nrow(h)]
depth_vec
dhit
dhit[as.logical(opens)]
which(as.logical(closes))[dhit[as.logical(opens)]]
devtools::load_all()
nested(x,depth=1:2,nested=F) -> h; h[, paste(x[Open:Close],collapse='-'), by = 1:nrow(h)]
nested(x,depth=1:2,nested=F) -> h; h[, paste(x[Open:Close],collapse='-'), by = 1:nrow(h)]
dhit
dhit
which(as.logical(opens) & dhit)
as.logical(opens)
which(as.logical(opens) %in% which(as.logical(opens) & dhit)
which(as.logical(opens) %in% which(as.logical(opens) & dhit
which(as.logical(opens)) %in% which(as.logical(opens) & dhit)
as.logical(closes)[which(as.logical(opens)) %in% which(as.logical(opens) & dhit)]
which(as.logical(closes))[which(as.logical(opens)) %in% which(as.logical(opens) & dhit)]
which(as.logical(closes))
opens
closest
closes
opens
ifelse(pmax(closes - 1, 0) == d, depth_vec - pmax(closes - 1, 0), depth_vec) == d
(ifelse(pmax(closes - 1, 0) == d, depth_vec - pmax(closes - 1, 0), depth_vec) == d) * as.logical(closes)
rbind(vec, depth_vec, which(as.logical(opens) & dhit), (ifelse(pmax(closes - 1, 0) == d, depth_vec - pmax(closes - 1, 0), depth_vec) == d) * as.logical(closes))
rbind(vec, depth_vec, (as.logical(opens) & dhit), (ifelse(pmax(closes - 1, 0) == d, depth_vec - pmax(closes - 1, 0), depth_vec) == d) * as.logical(closes))
rbind(depth_vec, (as.logical(opens) & dhit), (ifelse(pmax(closes - 1, 0) == d, depth_vec - pmax(closes - 1, 0), depth_vec) == d) * as.logical(closes))
rbind(depth_vec, (as.logical(opens) & dhit), (ifelse(pmax(closes - 1, 0) == d, depth_vec - pmax(closes - 1, 0), depth_vec) == d) * as.logical(closes)) ->l ;colnames(l) <- vec; l
as.logical(opens) & dhit
which(as.logical(opens))
as.logical(opens) & dhit
which(as.logical(opens) & dhit)
which(as.logical(opens) & dhit) %in% which(as.logical(opens))
which(as.logical(opens)) %in% which(as.logical(opens) & dhit)
which(as.logical(closes) & dhit)
which(as.logical(closes))
which(as.logical(closes) & dhit)
devtools::load_all()
nested(x,depth=1:2) -> h; h[, paste(x[Open:Close],collapse='-'), by = 1:nrow(h)]
x
nested(x,depth=1) -> h; h[, paste(x[Open:Close],collapse='-'), by = 1:nrow(h)]
nested(x,depth=2) -> h; h[, paste(x[Open:Close],collapse='-'), by = 1:nrow(h)]
devtools::load_all()
nested(x,depth=1) -> h; h[, paste(x[Open:Close],collapse='-'), by = 1:nrow(h)]
nested(x,depth=2) -> h; h[, paste(x[Open:Close],collapse='-'), by = 1:nrow(h)]
devtools::load_all()
nested(x,depth=1) -> h; h[, paste(x[Open:Close],collapse='-'), by = 1:nrow(h)]
nested(x,depth=2) -> h; h[, paste(x[Open:Close],collapse='-'), by = 1:nrow(h)]
nested(x,depth=1:2) -> h; h[, paste(x[Open:Close],collapse='-'), by = 1:nrow(h)]
