o
rlang::syms(letters)
class(rlang::syms(letters))
devtools::load_all()
rm(fargs)
fiedsArgsQuo(quo(kern(Token)), 'Exclusive')
fieldsArgsQuo(quo(kern(Token)), 'Exclusive')
fieldsArgsQuo(expr(kern(Token)), 'Exclusive')
devtools::load_all()
fieldsArgsQuo(expr(kern(Token)), 'Exclusive')
fieldsArgsQuo(quo(kern(Token)), 'Exclusive')
de
devtools::load_all()
fieldsArgsQuo(quo(kern(Token)), 'Exclusive')
fieldsArgsQuo(quo(kern(Token)), 'Exclusive')
expr
hit
exprA$Head
exprA$Type
fargs(exprA$Head)
!is.null(fargs(exprA$Head))
.names(fargs(exprA$Head))
.names(fargs(exprA$Head)) %in% fields
fields
fieldsArgsQuo(quo(kern(Token)), 'Exclusive')
W
fieldsArgsQuo(quo(kern(Token)), 'Exclusive')
hit
expr()
exor
expr
expr
hit
fieldsArgsQuo(quo(kern(Token)), 'Exclusive')
do
fields
get('fields')
get('fields', envir = parent.env)
get('fields', envir = parent.env())
get('fields', envir = parent.env(1))
get('fields', envir = parent.frame())
?do.call
devtools::load_all()
fieldsArgsQuo(quo(kern(Token)), 'Exclusive')
devtools::load_all()
fieldsArgsQuo(quo(kern(Token)), 'Exclusive')
expr
hit
predicate
ls(parent.frame())
ls(parent.frame(1))
ls(parent.frame(3))
ls(parent.frame(2))
ls(parent.frame(1))
parent.frame(1)
parent.frame(1)$fields
devtools::load_all()
fieldsArgsQuo(quo(kern(Token)), 'Exclusive')
dev
devtools::load_all()
fieldsArgsQuo(quo(kern(Token)), 'Exclusive')
devtools::load_all()
fieldsArgsQuo(quo(kern(Token)), 'Exclusive')
fieldsArgsQuo(quo(kern(Token, Exclusive = 'fuck')), 'Exclusive')
fieldsArgsQuo(quo(kern(Exclusive='table',Token)), 'Exclusive')
fieldsArgsQuo(quo(kern('kern',Token=Token)), 'Exclusive')
kern
fieldsArgsQuo(quo(kern(Token)), 'Exclusive')
analyzeExpr(table(3, Token@Spine))
analyzeExpr(quote(table(3, Token@Spine)))
quote(letters[n=2])
quote(letters[n=2])[[1]]
quote(letters[n=2])[[2]]
quote(letters[n=2])[[3]]
.names(quote(letters[n=2]))[[3]]
devtools::load_all()
laggedQuo(expr(table(Token[n=1])))
devtools::load_all()
laggedQuo(expr(table(Token[n=1])))
laggedQuo(expr(table(Token[n=1])))
indexedObject
expr
expr$n
laggedQuo(expr(table(Token[n=1])))
n %% 1
round(n)
dev
devtools::load_all()
laggedQuo(expr(table(Token[n=1])))
laggedQuo(expr(table(Token[n=1])))
args
target
lagged
length(lagged)
lengths(lagged)
args[target] <- lagged
args
laggedQuo(expr(table(Token[n=1])))
indexedObject
expr
dev
devtools::load_all()
laggedQuo(expr(table(Token[n=1])))
laggedQuo(expr(table(Token[n=0])))
laggedQuo(expr(table(Token[n=0:2])))
quo(table(Token[n=0:3]))
local({quo(table(Token[n=0:3]))})
x<_local({quo(table(Token[n=0:3]))})
x<-local({quo(table(Token[n=0:3]))})
laggedQuo(x)
a
x
laggedQuo(x)
x
namesInExpr(~open(3))
namesInExpr(~open(3),'open')
namesInExpr('open',~open(3))
deparse(~open(3))
parse(~open(3))
deparse(~open(3))
devtools::load_all()
namesInExpr('open',~open(3))
namesInExpr('open',expr(open(3)))
namesInExpr('open',expr(open(3)))
namesInExpr('open',expr(open + 2)
namesInExpr('open',expr(open + 2))
modifyExpression(~open + 2, \(Head) Head == 'open', \(exprA) TRUE)
modifyExpression(~open + 2, \(Head) Head == 'open', \(exprA) {expr$Head <- TRUE; exprA})
modifyExpression(~open + 2, \(Head) Head == 'open', \(exprA) {exprA$Head <- TRUE; exprA})
modifyExpression(~open + 2, \(Head) Head == 'open', \(exprA) {exprA$Head <- TRUE; exprA})
devtools::load_all()
modifyExpression(~open + 2, \(Head) Head == 'open', \(exprA) {exprA$Head <- TRUE; exprA})
modifyExpression(~open + 2, \(Head) Head == 'open', \(exprA) {exprA$Head <- TRUE; exprA})
expr
exprA
expr
devtools::load_all()
modifyExpression(~open + 2, \(Head) Head == 'open', \(exprA) {exprA$Head <- TRUE; exprA})
modifyExpression(~open + 2, \(Head) Head == 'open', \(exprA) {exprA$Head <- TRUE; exprA}, onlyCalls=F)
modifyExpression(~open + 2, \(Head) Head == 'open', \(exprA) {exprA$Head <- "TRUE"; exprA}, onlyCalls=F)
devtools::load_all()
applyExpr(~after(open + 2), \(Head) Head == 'open', onlyCalls=FALSE, \(exprA) TRUE)
devtools::load_all()
applyExpr(~after(open + 2), \(Head) Head == 'open', onlyCalls=FALSE, \(exprA) TRUE)
devtools::load_all()
applyExpr(~after(open + 2), \(Head) Head == 'open', onlyCalls=FALSE, \(exprA) TRUE)
devtools::load_all()
applyExpr(~after(open + 2), \(Head) Head == 'open', onlyCalls=FALSE, \(exprA) TRUE)
applyExpr(~after(open + 2), \(Head) TRUE, onlyCalls=FALSE, \(exprA) exprA$Head == 'open')
devtools::load_all()
applyExpr(~after(open + 2), \(Head) Head == 'open', onlyCalls=FALSE, \(exprA) TRUE)
applyExpr(~after(open + 2), \(Head) TRUE, onlyCalls=FALSE, \(exprA) exprA$Head == 'open')
applyExpr(~after(open + 2), \(Head) TRUE, onlyCalls=FALSE, \(exprA) exprA$Head == 'open')
ex[r]
expr
devtools::load_all()
devtools::load_all()
namesInExpr('open',expr(open + 2))
namesInExpr('open',expr(open + 2)) |> class()
devtools::load_all()
namesInExpr('open',expr(open + 2))
devtools::load_all()
namesInExpr('open',expr(open + 2)) |> class()
namesInExpr('open',expr(open + 2))
devtools::load_all()
namesInExpr('open',expr(open + 2))
devtools::load_all()
namesInExpr('open',expr(open + 2))
devtools::load_all()
namesInExpr('open',expr(open + 2))
devtools::load_all()
namesInExpr('open',expr(open + 2))
namesInExpr('open',expr(open(3) + 2))
devtools::load_all()
namesInExpr('open',expr(open(3) + 2))
devtools::load_all()
namesInExpr('open',expr(open(3) + 2))
namesInExpr('open',expr(open(3) + 2))
applyTo
exprA$Type
applyTo
exprA$Type %in% applyTo
devtools::load_all()
namesInExpr('open',expr(open(3) + 2))
namesInExpr('open',expr(open(3) + open))
namesInExpr('open',expr(open(3) + open))
namesInExpr('open',expr(open(3) + open))
devtools::load_all()
namesInExpr('open',expr(open(3) + open))
devtools::load_all()
namesInExpr('open',expr(open(3) + open))
namesInExpr('open',expr(open(3) + 3))
namesInExpr('open',expr(open(3) + open))
namesInExpr('open',expr(open(3) + open, applyTo='call')
namesInExpr('open',expr(open(3) + open, applyTo='call') )
devtools::load_all()
namesInExpr('open',expr(open(3) + open, applyTo='call')
namesInExpr('open',expr(open(3) + open, applyTo='call') )
namesInExpr('open',expr(open(3) + open, applyTo='call' )
namesInExpr('open',expr(open(3) + open), applyTo='call' )
namesInExpr('open',expr(op(3) + open), applyTo='call' )
namesInExpr('open',expr(op(3) + open(2)), applyTo='call' )
devtools::load_all()
laggedQuo(x)
x
devtools::load_all()
laggedQuo(x)
laggedQuo(x)
expr
hit
output
exprA
laggedQuo(x)
expr
exprA
funcQ
devtools::load_all()
laggedQuo(x)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*.krn') -> ch
ch
ch[5]
numeri
applyExpr(~hop(3), \(Head) Head == 'hop', \(exprA) {exprA$Args <- c(quote(x), exprA$Args); exprA})
modifyExpression(~hop(3), \(Head) Head == 'hop', \(exprA) {exprA$Args <- c(quote(x), exprA$Args); exprA})
modifyExpression(~hop(3), \(Head) Head == 'hop', \(exprA) {exprA$Args <- c(quote(x), exprA$Args); exprA})
devtools::load_all()
parseAnchors(letters,open = 1:10)
devtools::load_all()
parseAnchors(letters,open = 1:10)
parseAnchors(letters,open = 1:56)
parseAnchors(letters,open = 1:10)
parseAnchors(letters,open = -3)
devtools::load_all()
parseAnchors(letters,open = -3)
parseAnchors(letters,open = -5)
parseAnchors(letters,open = -1)
parseAnchors(letters,open = -1,close=-1)
parseAnchors(letters,open = -1,close='(')
parseAnchors(letters,open = -1,close='a')
parseAnchors(letters,open = -1,close=~hop(4))
devtools::load_all()
parseAnchors(letters,open = -1,close=~hop(4))
parseAnchors(letters,open = hop(5), close = open + 4)
parseAnchors(letters,open = ~hop(5), close = open + 4)
parseAnchors(letters,open = ~hop(5), close = ~open + 4)
devtools::load_all()
parseAnchors(letters,open = ~hop(5), close = ~open + 4)
parseAnchors(letters,open = ~close-2, close = ~open + 4)
devtools::load_all()
parseAnchors(letters,open = ~close-2, close = ~open + 4)
devtools::load_all()
parseAnchors(letters,open = ~close-2, close = ~open + 4)
devtools::load_all()
parseAnchors(letters,open = ~close-2, close = ~open + 4)
parseAnchors(letters,open = ~close-2, close = ~open + 4, start = 1)
devtools::load_all()
parseAnchors(letters,open = ~close-2, close = ~open + 4)
devtools::load_all()
parseAnchors(letters,open = ~close-2, close = ~open + 4)
lower.tri(parseAnchors(letters,open = ~close-2, close = ~open + 4))
devtools::load_all()
lower.tri(parseAnchors(letters,open = ~close-2, close = ~open + 4))
glue::glue_collapse()
glue::glue_collapse
devtools::load_all()
parseAnchors(letters,open = ~close-2, close = ~open + 4)
devtools::load_all()
parseAnchors(letters,open = ~close-2, close = ~open + 4)
parseAnchors(letters,open = ~hop(10), close = ~open + 4)
devtools::load_all()
parseAnchors(letters,open = ~hop(10), close = ~open + 4)
bad
references
references & t(references)
lower.tri(references & t(references))
devtools::load_all()
parseAnchors(letters,open = ~hop(10), close = ~open + 4)
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=1)
devtools::load_all()
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=1)
references
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=1)
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=1)
names(formulae)
devtools::load_all()
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=1)
devtools::load_all()
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=1)
devtools::load_all()
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=1)
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=open+2)
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=~open+2)
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=~close-3)
parseAnchors(letters,open = ~start+1, close = ~open + 4,start=~close-3)
parseAnchors(letters,open = ~start+1, close = ~open + 4,start=~close-3)
parseAnchors(letters,open = ~start+1, close = ~open + 4,start=~close-3)
references
diag(reference())
diag(reference())Q
parseAnchors(letters,open = ~hop(10), close = ~open + 4,start=~open+2)
diag(references)
?diag
diag(3)
references
diag(3) - references
parseAnchors(letters,open = ~start+1, close = ~open + 4,start=~close-3)
diag(3) - references
eigen(diag(3) - references)
eigen(diag(3) - references)$values == 0
eigen(diag(3) - references)$values < .00000001
eigen(diag(3) - references)$values < .0000001
abs(eigen(diag(3) - references)$values) == 0
abs(eigen(diag(3) - references)$values) < .00001
devtools::load_all()
parseAnchors(letters,open = ~start+1, close = ~open + 4,start=~close-3)
parseAnchors(letters,open = ~start+1, close = ~open + 4)
parseAnchors(letters,open = ~close+2, close = ~open + 4)
devtools::load_all()
parseAnchors(letters,open = ~close+2, close = ~open + 4)
parseAnchors(letters,open = ~close+2, close = ~'a')
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open + 2)
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open - close)
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open)
parseAnchors(letters,open = ~start+2, close = ~'a', start = ~open)
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open)
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
sort(which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T))
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
devtools::load_all()
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
safe
formulae[safe]
references
!safe
safe
devtools::load_all()
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
references
devtools::load_all()
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
references
forms
devtools::load_all()
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
forms
formulae
colnames(formulae)
safe
devtools::load_all()
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
references
forms
references
safe
references
forms
references
references
devtools::load_all()
which(parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open), arr.ind=T)
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open)
devtools::load_all()
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open)
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open)
safe
safe
devtools::load_all()
parseAnchors(letters,open = ~close+2, close = ~'a', start = ~open)
parseAnchors(letters,open = ~start+3, close = ~'a', start = ~'2')
parseAnchors(letters,open = ~start+3, close = ~'a', start = ~first(close + 10))
devtools::load_all()
parseAnchors(letters,open = ~start+3, close = ~'a', start = ~first(close + 10))
parseAnchors(letters,open = ~close+4, close = ~1:10)
devtools::load_all()
parseAnchors(letters,open = ~close+4, close = ~1:10)
parseAnchors(letters,open = 1:10, close = ~1:10)
parseAnchors(letters,open = 1:10, close = ~1:10)
referebces
references
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~1:10)
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~1:10)
references
names
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~1:10)
parseAnchors(letters,open = 1:10, close = ~1:10)
references
parseAnchors(letters,open = 1:10, close = ~1:10)
length(anchors)
length9names
length(names)
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~1:10)
parseAnchors(letters,open = 1:10, close = ~1:10)
references
parseAnchors(letters,open = 1:10, close = ~open + 2)
references
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open + 2)
parseAnchors(letters,open = 1:10, close = ~2)
gc()
parseAnchors(letters,open = 1:10, close = ~2)
parseAnchors(letters,open = 1:10, close = ~2)
formulae
forms
references
parseAnchors(letters,open = 1:10, close = ~2)
references
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~2)
parseAnchors(letters,open = 1:10, close = ~open+5)
parseAnchors(letters,open = 1:10, close = ~open+5)
references
safe
forms
colnames(references)
references
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
parseAnchors(letters,open = 1:10, close = ~open+5)
safe
forms
parseAnchors(letters,open = 1:10, close = ~open+5)
references
close
Q
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
references
formulate
formulae
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
safe
references
froms
forms
colnames(references)
safe
formulae
colnames(references)[safe]
safe
parseAnchors(letters,open = 1:10, close = ~open+5)
references
args
evaled
anchors
references
formulae
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
references
anchors
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
anhors
anchors
references
forms
references
safe
parseAnchors(letters,open = 1:10, close = ~open+5)
anchors
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
devtools::load_all()
parseAnchors(letters,open = 1:10, close = ~open+5)
parseAnchors(letters,open = 1:10, close = '[aeiou]')
parseAnchors(letters,open = ~close - 4, close = '[aeiou]')
parseAnchors(letters,open = ~next(close) - 4, close = '[aeiou]')
parseAnchors(letters,open = ~next(close) + 2, close = '[aeiou]')
mext
next
parseAnchors(letters,open = ~Next(close) + 2, close = '[aeiou]')
parseAnchors(letters,open = ~hop(3), close = '[aeiou]')
parseAnchors(letters,open = ~hop(3), close = ~'[aeiou]' %after% open)
parseAnchors(letters,open = ~hop(3), close = ~'[aeiou]' %after% open)
references
parseAnchors(letters,open = ~hop(3), close = ~'[aeiou]' %after% open)
anchor
x
eng
env$open
parseAnchors(letters,open = ~hop(3), close = ~'[aeiou]' %after% open)
anchor
anchor
analyzeExpr(quote(a + "e"))
analyzeExpr(quote("e"))
devtools::load_all()
parseAnchor(letters, ~open + 'a')
devtools::load_all()
parseAnchor(letters, ~open + 'a')
devtools::load_all()
parseAnchor(letters, ~open + 'a')
parseAnchor(letters, ~open + 'a')
exprA
exprA
devtools::load_all()
parseAnchor(letters, ~open + 'a')
parseAnchors(letters,open = ~hop(3), close = ~'[aeiou]' %after% open)
parseAnchors(letters,open = ~hop(3), close = ~'[aeiou]' %after% open)
parseAnchors(letters,open = ~hop(3), close = ~'[aeiouz]' %after% open)
