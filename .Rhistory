f(4)
f(3)
f(3, y= 6)
partialApply(f, y = x + 5)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply(f, y = x + 5)
partialApply(f, y = x + 5)(5)
f <- function(...) {
args <- rlang::enexprs(...)
rlang::is_missing(args[[1]])
}
f(1)
f(,3)
f(,3,4)
f <- function(x, ...) {
args <- rlang::enexprs(...)
rlang::is_missing(args[[1]])
}
f(,3,4)
f(x=3,3,4)
f(x=3, ,4)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
f <- function(x, y, z) (x + y )^z
f
f()
partialApply(f, 1,2,3)
partialApply(f, ,2,3)
partialApply(f, ,2,3)
fargs
partialApply(f, , y=2, z=3)
fargs
partialApply(f, , y=2, z=3)(1)
partialApply(f, , y=2, z=3)
cq
partialApply(f, x=1, y=2, z=3)
partialApply(f, x=1, y=2, z=3)
fargs
partialApply(f, x=, y=2, z=3)
partialApply(f, x=, y=2, z=3)
fargs
fargs[[1]]
rlang::is_missing(fargs[[1]])
func
partialApply(f, x=1, y=2, z=3)
rlang::is_missing(fargs[[1]])
any(sapply(fargs, rlang::is_missing))
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply(f, x=1, y=2, z=3)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply <- function(func, ...) {
fargs <- fargs(func)
newargs <- rlang::enexprs(...)
named <- newargs[.names(newargs) %in% names(fargs)]
fargs[named] <- named
unapplied <- !names(fargs) %in% .names(newargs)
unnamed <- newargs[!.names(newargs) %in% names(fargs)]
fargs[which(unapplied)[1:length(unnamed)]] <- unnamed
if (length(unnamed) > sum(unapplied) && '...' %in% names(fargs)) fargs <- c(fargs, tail(newargs, -sum(unnapplied)))
formals(func) <- fargs
if (any(sapply(fargs, rlang::is_missing))) func else func()
}
partialApply(f)
rm(partialApply)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
f
partialApply2(f)
partialApply2(f)
named
newargs
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f)
partialApply2(f,x=3
partialApply2(f,x=3)
partialApply2(f,x=3)
named
fargs
names(named)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,x=3)
partialApply2(f,x=3)
fargs
names(fargs)
.names(newargs)
unapplied
!.names(newargs) %in% names(fargs)
newargs
partialApply2(f,x=3)
which(unapplied)
seq_len(0)
seq_along(0)
seq_along(c())
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,x=3)
which(unapplied)[seq_along(unnamed)]
fargs[which(unapplied)[seq_along(unnamed)]]
fargs[which(unapplied)[seq_along(unnamed)]] <- unnamed
partialApply2(f,x=3)
partialApply2(f,x=3,y=4)
partialApply2(f,x=3,4)
partialApply2(f,x=3,z=5)
partialApply2(f,x=3,z=5,2)
partialApply2(f,x=3,z=5)(2)
partialApply2(f,x=3,z=5)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,x=3,z=5)(2)
partialApply2(f,x=3,z=5)
partialApply2(f,x=3,z=5)
fargs
order(.names(fargs) != "")
.names(fargs) != ""
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,x=3,z=5)
partialApply2(f,x=3,z=5)(2)
partialApply2(f,z=4
)
partialApply2(f,1,2,z=4)
partialApply2(f,1,,z=4)
partialApply2(f,,2,z=4)
f <- function(x, y, z, ...) x + y + z + Reduce('+', list(...))
partialApply2(f,,2,z=4)
partialApply2(f,1,2,3)
any(c(0,1))
any(c(0,1))
any(as.logical(c(0,1)))
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,2,3)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,2,3)
partialApply2(f,1,2,3)
stillmissing
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,2,3)
stillmissing
partialApply2(f,1,2,3)
f(1,2,3)
f(1,2,3,.4)
f(1,2,3,4,4)
f <- function(x, y, z, ...) x + y + z + if(length(...))  Reduce('+', list(...)) else 0
partialApply2(f,1,2,3)
f <- function(x, y, z, ...) x + y + z + if(length(list(...)))  Reduce('+', list(...)) else 0
partialApply2(f,1,2,3)
partialApply2(f,1,2,3,4)
f(1,2,3,4)
f(1,2,3,4)
partialApply2(f,1,2,3,4)
stillmissing
fargs()
fargs
fargs
func()
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,2,3,4)
partialApply2(f,1,2,3,4)
unapplied
which(unapplied)
unnamed
partialApply2(f,1,2,3,4)
which(unapplied)[seq_along(unnamed)]
unnamed
which(unapplied)[seq_along(unnamed)
which(unapplied)[seq_along(unnamed)]
which(unapplied)[seq_len(max(length(unnamed), sum(unnamed))]
which(unapplied)[seq_len(max(length(unnamed), sum(unnamed)))]
seq_len(max(length(unnamed), sum(unnamed)))
seq_len(max(length(unnamed), sum(unappied)))
seq_len(max(length(unnamed), sum(unapplied)))
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,2,3,4)
fargs
newargs
outer(.names(newargs), .names(fargs), '==')
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,2,3,4)
argMat
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,2,3,4)
argMat
partialApply2(f,1,2,3,4)
partialApply2(f,1,x=2,3,4)
argMat
which(argMat,arr.ind=T)
which(argMat,arr.ind=T, useNames = T)
which(argMat,arr.ind=T)
colSums(argMat) == 0
which(colSums(argMat) == 0)
col(argMat) %in% (which(colSums(argMat) == 0))
(col(argMat) %in% (which(colSums(argMat) == 0))) %<-dim% argMat
array(col(argMat) %in% (which(colSums(argMat) == 0)), dim = dim(argMat))
argMat
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,3,4)
argMat
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,3,4)
argMAt
argMat
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,3,4)
argMat
partialApply2(f,1,x=2,3,4)
which(argMat, arr.ind=TRUE)
which(argMat, arr.ind=TRUE)['row']
which(argMat, arr.ind=TRUE)[, 'row']
W
partialApply2(f,1,x=2)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
partialApply2(f,1,x=2)
argMat
fargs
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,4,5)
extraArgs
argMAt
argMat
diag(4)
cbind(argMat, diag(length(newargs)))
cbind(argMat, diag(length(newargs))[, -seq_len(ncol(argMat))])
cbind(argMat, diag(length(newargs))[, -seq_len(ncol(argMat))])
diag(length(newargs))[, -seq_len(ncol(argMat))]
diag(length(newargs))
cbind(argMat, diag(length(partialArgs))[, -seq_len(ncol(argMat))])
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,4,5)
partialApply2(f,1,x=2,4,5)
argMat
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,4,5)
argMat
partialApply2(f,1,x=2,4,5)
argMat
fargs
which(argMat, arr.ind = TRUE)[ , 'row']
rlang::missing_arg()
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,4,5)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,4,5)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,4,5)
fargs
fargs['...']
fargs
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,4,5)
partialApply2(f,1,x=2,4,5)
fargs
class(fargs)
partialApply2(f,1,x=2,4,5)
as.pairlist(fargs)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,4,5)
partialApply2(f,1,x=2,4,5)
func
as.pairlist(fargs)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,4,5)
fargs
extraArgs
any(stillmissing)
stillmissing
fargs
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
f
partialApply2(f,1,x=2,4,5)
partialApply2(f,1,x=2,4,5)
partialApply2(f,1,x=2)
partialApply2(f,1,x=2,4,5)
pmatch(.names(partialArgs), names(fargs))
pmatch(.names(partialArgs), names(fargs), nomatch = 0)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,4,5)
partialApply2(f,1,x=2)
partialApply2(f,1,x=2)
fargs
pargs
hits
pargs
hits[hits > 0]
fargs
pargs[hits>0]
fargs
fargs_unused
pargs[hits == 0]
pargs[hits == 0][seq_len(sum(fargs_unused))]
fargs_unused
pargs[hits == 0]
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
?pmatch
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
pargs
fargs
partialApply2(f,1,x=2)
partialApply2(f,1,x=2)
partialApply2(f,1,x=2)
args <- c(pargs, fargs)
args
args[!duplicated(.names(args))]
partialApply2(f,1,x=2,3)
args
args <- c(pargs, fargs)
args[!duplicated(.names(args))]
args
args[!duplicated(.names(args)) & .names(args) != '']
args[!duplicated(.names(args)) | .names(args) == '']
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,3)
args
args[order(.names(args) != "")]
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,3)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,3)
arsg
args
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,3)
args
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2,3)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
partialApply2(f,1,x=2)
args
partialApply2(f,1,x=2)
args
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
args
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
argMat
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
argMat
pmatch(colnames(argMat), rownames(argMat), nomatch = 0)
argMat[,pmatch(colnames(argMat), rownames(argMat), nomatch = 0)]
argMat[,pmatch(colnames(argMat), rownames(argMat), nomatch = 1)]
argMat[,pmatch(colnames(argMat), rownames(argMat), nomatch = 2)]
pmatch(colnames(argMat), rownames(argMat), nomatch = 10)
argMat
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
unfilled
fargs
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
args
fargs[.names(pargs) %in% names(fargs)] <- pargs[.names(pargs) %in% names(fargs)]
fargs
args
c(args,pargs)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
args
# explicit partial args
args <- pargs[.names(pargs) %in% names(fargs)]
args <- c(args, pargs)
args
!duplicated(.names(args))
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
args
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
args
fargs
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
fargs
parsg
pargs
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
notNamed
unfilled
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
fargs
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=2)
partialApply2(f,z=1,x=2)
partialApply2(f,z=1,x=2,y)
partialApply2(f,z=1,x=2,3)
partialApply2(f,z=1,x=2,y=3)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,z=1,x=2,y=3)
partialApply2(f,z=1,x=2,y=3,6)
partialApply2(f,z=1,x=2)
partialApply2(f,z=1,x=2,4)
partialApply2(f,z=1,x=2,4)
stillmissing
partialApply2(f,z=1,x=2,4)
stillmissing
partialApply2(f,z=1,x=2,4)
hits
fargs
notNamed
unfilled
ermaining
unnamedN
names(fargs)[head(which(unfilled), unnamedN)]
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,z=1,x=2,4)
partialApply2(f,z=1,x=2,4)
stillmissing
fargs
unnamed
unNamed
notNamed
pargs
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,z=1,x=2,4)
partialApply2(f,z=1,x=2,4)
fargs
rest
c(fargs[names(fargs) != ""], rest)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,z=1,x=2,4)
partialApply2(f,z=1,x=2,4,3)
partialApply2(f,z=1,x=2,4,3,12)
partialApply2(f,1,1,1)
partialApply2(f,1,1,1,x=3)
f <- function(x, y, z, ...) c(x = x, y = y, z = z, rest = if(length(list(...)))  Reduce('+', list(...)) else 0)
partialApply2(f,1,1,1,x=3)
partialApply2(f,1,1,1,1)
partialApply2(f,1,1,1,1,3)
partialApply2(f,1,1,1,1,x=3)
partialApply2(f,1,1,x=3)
partialApply2(f,1,x=3)
partialApply2(f,1,x=3)(y=2)
partialApply2(f,1,x=3)(3)
partialApply2(f,1,x=3)(3,4)
partialApply2(f,1,x=3)(3)
partialApply2(f,1,x=3)
partialApply2(f,1,x=3)
fargs
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=3)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=3)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=3)
stillmissing
sort(stillmissing)
sort(-stillmissing)
sort(stillmissing - names(fargs) == '...')
sort(stillmissing - (names(fargs) == '...'))
sort(stillmissing + (names(fargs) == '...'))
sort(stillmissing - (names(fargs) == '...'))
sort(2L * stillmissing + (names(fargs) == '...'))
sort(2L * stillmissing + (names(fargs) == '...'), decreasing =T)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=3)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=3)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply2(f,1,x=3)
partialApply2(f,1,x=3)(2)
partialApply2(f,1,x=3)(2,3)
partialApply2(f,1,x=3)(2,3,5)
partialApply2(f,1,x=3)(2,3,5,k=2)
partialApply2(f,1,x=3)(2,x=5)
partialApply2(f,1,x=3)(2,x=5,z=2)
partialApply2(f,1,x=3)(2,x=5,z=10)
?do.call
partialApply2(f,1,x=3,x=5)
partialApply2(f,1,x=3,x=5)
g <- function(x, ...) {
partialApply2(f, x, y = 3, ...)
}
g(3)
g(3)(4)
g(3)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
partialApply(f)
partialApply(f,x=4)
partialApply(f,3)
partialApply2(f,3)
partialApply2(f,x=3)
partialApply2(f,y=3)
f
f <- function(x, y, z) c(x = x, y = y, z = z)
partialApply2(f,y=3)
partialApply2(f,y=3,3,2)
partialApply2(f,y=3,3,2)()
partialApply2(f,y=3,3,2)(3)
partialApply2(f,y=3,3,2)(10)
devtools::load_all("~/Bridge/Coding/R/Packages/humdrumR")
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*.krn') -> ch
ch %hum>% ~kern
ch %hum>% kern
