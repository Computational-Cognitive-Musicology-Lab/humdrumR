} else {
rlang::expr({ (!!fcall)(!!!passedThrough)})
}
rlang::new_function(fargs, body) %class% "partiallyApplied"
}
partialApply(f)
partialApply(f, B= !A)(1,TRUE)
rm(patialApply)
rm(partialApply)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")Q
devtools::load_all(".")
devtools::load_all(".")
partialApply(f, B= !A)(1,TRUE)
partialApply(f, B= !A)
partialApply(g, B= !A)
partialApply(g, B= !A)(1,FALSE,TRUE)
partialApply(g, B= !A)(1,TRUE)
partialApply(g, B= !A)(1,FALSE)
partialApply(g, B= !A)(1,B=FALSE)
partialApply(g, B= !A)(1,A=FALSE)
partialApply(g, B= !A)(1,A=FALSE,B=3)
devtools::load_all(".")
devtools::load_all(".")
partialApply(g, B= !A)(1,A=FALSE,B=3)
partialApply(g, B= !A)(1,A=FALSE)
partialApply(g, B= !A)
partialApply(g, B= !A)
partialApply(g, B= !A)(1,2,3)
partialApply(g, B= !A)(1,2,3,B=10)
partialApply(g, B= !A)(1,2)
partialApply(g, B= !A)(1,TRUE)
partialApply(g, B= !A)(1,TRUE,5)
partialApply(g, B= !A)(1,TRUE,x=5)
partialApply(g, B= !A)(1,TRUE,y=5)
tint2lilypond(scale)
tint2lilypond(scale,relative=F)
tint2helmholtz(scale)
devtools::load_all(".")
tint2helmholtz(scale)
devtools::load_all(".")
tint2helmholtz(scale)
devtools::load_all(".")
tint2helmholtz(scale)
devtools::load_all(".")
tint2helmholtz(scale)
tint2helmholtz(tint(-5:5))
devtools::load_all(".")
tint2helmholtz(tint(-5:5))
devtools::load_all(".")
tint2helmholtz(tint(-5:5))
devtools::load_all(".")
tint2helmholtz(tint(-5:5))
tint2helmholtz(tint(-5:5))
tint2helmholtz(scale)
tint2helmholtz(scale)
tint2lilypond(scale)
scale <- tint( , -20L:20L)
correct <- data.frame(kern = tint2kern(scale),
interval = tint2interval(scale),
solfa = tint2solfa(scale),
semit = tint2semit(scale))
scale <- tint( , -12L:12L)
scale <- c(scale - octave, scale, scale + octave)
correct <- data.frame(kern = tint2kern(scale),
interval = tint2interval(scale),
solfa = tint2solfa(scale),
semit = tint2semit(scale),
lilypond = tint2lilypond(scale),
)
correct <- data.frame(kern = tint2kern(scale),
interval = tint2interval(scale),
solfa = tint2solfa(scale),
semit = tint2semit(scale),
lilypond = tint2lilypond(scale),
helmholtz = tint2helmholtz(scale),
degree = tint2degree(scale)
)
correct
scale <- sort(tint( , -12L:12L))
scale <- c(scale - octave, scale, scale + octave)
correct <- data.frame(kern = tint2kern(scale),
interval = tint2interval(scale),
solfa = tint2solfa(scale),
semit = tint2semit(scale),
lilypond = tint2lilypond(scale),
helmholtz = tint2helmholtz(scale),
degree = tint2degree(scale)
)
correct
scale <- c(scale - octave*2, scale - octave, scale, scale + octave)
correct <- data.frame(kern = tint2kern(scale),
interval = tint2interval(scale),
solfa = tint2solfa(scale),
semit = tint2semit(scale),
lilypond = tint2lilypond(scale),
helmholtz = tint2helmholtz(scale),
degree = tint2degree(scale)
)
scale <- c(scale - octave*2, scale - octave, scale, scale + octave)
correct
tonalInterval(c(-12L,-1L))
tonalInterval(c(-12L,-1L,0L, 11L,12L, 23L,24L))
tonalInterval(c(-24L, -23L, -12L,-1L,0L, 11L,12L, 23L,24L))
tonalInterval(c(-24L, -13L, -12L,-1L,0L, 11L,12L, 23L,24L))
tonalInterval(c(-36L,-25L,-24L, -13L, -12L,-1L,0L, 11L,12L, 23L,24L))
f <- tonalInterval(c(-36L,-25L,-24L, -13L, -12L,-1L,0L, 11L,12L, 23L,24L))
f
tint2helmholtz(f)
devtools::load_all(".")
tint2helmholtz(f)
octn
devtools::load_all(".")
tint2helmholtz(f)
devtools::load_all(".")
tint2helmholtz(f)
devtools::load_all(".")
tint2helmholtz(f)
f
correct <- data.frame(kern = tint2kern(scale),
interval = tint2interval(scale),
solfa = tint2solfa(scale),
semit = tint2semit(scale),
lilypond = tint2lilypond(scale),
helmholtz = tint2helmholtz(scale),
degree = tint2degree(scale)
)
correct
correct[1:200]
correct[1:200,]
tail(correct,-40)
tail(correct,-60)
tail(correct,-90)
scale <- sort(tint( , -12L:12L))
scale <- c(scale - octave*2, scale - octave, scale, scale + octave)
correct <- data.frame(kern = tint2kern(scale),
interval = tint2interval(scale),
solfa = tint2solfa(scale),
semit = tint2semit(scale),
lilypond = tint2lilypond(scale),
helmholtz = tint2helmholtz(scale),
degree = tint2degree(scale)
)
scale <- c(scale - octave*2, scale - octave, scale, scale + octave)
tail(correct,-90)
correct
devtools::load_all(".")
tint2degree(f)
tint2degree(f, explicitNaturals=T)
tint2degree(scale)
devtools::load_all(".")
tint2degree(scale)
transpose.tonalInterval(tint(,-1:5))
transpose.tonalInterval(tint(,-1:5), by = M@)
transpose.tonalInterval(tint(,-1:5), by = M2)
transpose.tonalInterval(tint(,-1:5), by = m3)
transpose.tonalInterval(tint(,-1:5), by = -m3)
interval()
x
x <- c('c','d','e','f','g','a','b')
x
interval(x)
interval(x, transpose(by = M2))
interval(x, transpose(by = c(P1, tonalInterval(x[-1]))))
interval(x, transpose(by = c(P1, -tonalInterval(x[-1]))))
c(P1, -tonalInterval(x[-1])))
c(P1, -tonalInterval(x[-1]))
tonalInterval(x) + c(P1, -tonalInterval(x[-1]))
x[-1]
tonalInterval(x) + c(-tonalInterval(x[-1]),P1)
interval(x, transpose(by = c(-tonalInterval(x[-1]),NA)))
interval(x, transpose(by = c(-tonalInterval(x[-1]),P1)))
tonalInterval(x) - c(-tonalInterval(x[-1]),P1)
tonalInterval(x) + c(-tonalInterval(x[-1]),P1)
x[-1]
x
interval(x, transpose(by = c(P1,tonalInterval(tail(x,-1)))))
interval(x, transpose(by = c(P1,-tonalInterval(tail(x,-1)))))
tail(x,-1)
x
interval(x, transpose(by = c(-tonalInterval(head(x,-1)), P!)))
interval(x, transpose(by = c(-tonalInterval(head(x,-1)), P1)))
head(x,-1)
c('c',head(x,-1))
x
M2 + -P1
M3 + -M2
interval(x, transpose(by = c(-tonalInterval(head(x,-1)), P1)))
interval(x, transpose(by = c(P1, -tonalInterval(head(x,-1)))))
rlang::expr({a ; !!{if (TRUE) 3}; c})
rlang::expr({a ; !!{if (FALSE) 3}; c})
correct
scale <- sort(tint( , -12L:12L))
scale <- c(scale - octave*2, scale - octave, scale, scale + octave)
correct <- data.frame(kern = tint2kern(scale),
interval = tint2interval(scale),
solfa = tint2solfa(scale),
semit = tint2semit(scale),
lilypond = tint2lilypond(scale),
helmholtz = tint2helmholtz(scale),
degree = tint2degree(scale)
)
correct
interval(x)
interval(x, Key = 'G:')
x
x
tint2interval(tint(,2))
tint2interval(tint(-1,2))
tint2interval(tint(-2,2))
tint2interval(tint(-4,2))
tint(0,1) > P1
tint(-5,1) > P1
abs(tint(-5,1))
tint(-5,1)
sign(tint(-5,1))
sign(abs(tint(-5,1)))
devtools::load_all(".")
tint2interval(tint(-4,2))
tint2interval(tint(-5,2))
tint2interval(tint(-6,2))
tint2interval(tint(-6,2),directed=T)
tint2interval(tint(-6,2),directed=F)
tint(,1)
tint2interval(tint(,1))
tint2interval(tint(,1) - octave)
devtools::load_all(".")
tint2interval(tint(,1) - octave)
tint2interval(tint(,1) - octave,directed=F)
interval(x)
interval(x, directed=F)
interval(tonalInterval(x), directed=F)
interval(-tonalInterval(x), directed=F)
interval(-tonalInterval(x))
-tonalInterval(x)
tint2interval(-tonalInterval(x))
devtools::load_all(".")
tint2interval(-tonalInterval(x))
devtools::load_all(".")
tint2interval(-tonalInterval(x))
devtools::load_all(".")
tint2interval(-tonalInterval(x))
tint2interval(-tonalInterval(x),directed=F)
x
interval(x)
interval(x, transpose(by = lag(x,-1)))
interval(x, transpose(by = lag(tonalInterval(x),-1)))
interval(x, transpose(by = lag(x,-1)))
interval(x, transpose(by = M2)
)
x
interval(x, transpose(by = c(NA, P1, -M2, -M3, -P4, -P5, -M6))
interval(x, transpose(by = c(NA, P1, -M2, -M3, -P4, -P5, -M6)))
interval(x, transpose(by = c(P1, P1, -M2, -M3, -P4, -P5, -M6)))
degree(x)
degree(tonalInterval(x))
degree(-tonalInterval(x))
degree(-tonalInterval(x),real=T)
degree(-tonalInterval(x))
devtools::load_all(".")
interval(x)
interval(x, tonalInterval('G'))
interval(x, from2=tonalInterval('G'))
devtools::load_all(".")
interval(x, from2=tonalInterval('G'))
x
interval(x, from2=tonalInterval('B-'))
kern(x, from2=tonalInterval('B-'))
f <- function(x, y, ...) {
g(...)
}
g <- function(..., envir = parent.frame()) {
envir$x
}
g(2,3)
g <- function(..., envir = environment()) {
envir$x
}
g(2,3)
g <- function(..., envir = environment()) {
envir$x
}
g(2,3)
?environment
f <- function(x, y, ...) {
g(..., environment())
environment()
}
?environment
f <- function(x, y, ...) {
g(..., environment())
environment()
}
g(2,3)
f(2,3)
f <- function(x, y, ...) {
g(...)
}
g <- function(..., envir = parent.env()) {
envir$x
}
f(2,3)
g <- function(..., envir = parent.frame()) {
envir$x
}
f(2,3)
f(10,3)
g <- function(..., envir = parent.frame()) {
envir$z
}
f(10,3)
g <- function(..., envir = parent.frame()) {
envir[['z']]
}
f(10,3)
g <- function(..., envir = parent.frame()) {
envir[['x']]
}
f(10,3)
devtools::load_all(".")
kern(x)
kern(x, take = tonalInterval('G'))
devtools::load_all(".")
kern(x, take = tonalInterval('G'))
kern(x, take = tonalInterval('GG'))
kern(x, take = tonalInterval('B-'))
devtools::load_all(".")
kern(x, take = tonalInterval('B-'))
x
kern(x, take = tonalInterval('B-'))
kern(x, take = tonalInterval('F'))
devtools::load_all(".")
kern(x)
kern
z<-list(a=2)
z$b <- NULL
z
z$b <- quote(NULL)
z
z['g']
z['g'] <- list(NULL)
z
z[['g']] <- NULL
z
z['v'] <- list(if (FALSE) 3)
z
z['v'] <- list(if (TRUE) 3)
z
devtools::load_all(".")
kern(x)
kern(x, take = 'G')
devtools::load_all(".")
kern(x, take = 'G')
interval
interval(x)
devtools::load_all(".")
readHumdrum('~/Bridge/Research/Data/Humdrum/Kern/JSBach/371chorales/.*krn') -> ch
ch %hum>% ~interval(Token, melodic=T) -> ch$Mint
ch
system.time(ch %hum>% ~interval(Token, melodic=T, memoize=TRUE) )
system.time(ch %hum>% ~interval(Token, melodic=T, memoize=FALSE) )
system.time(ch %hum>% ~interval(Token, melodic=T, memoize=TRUE, verbose=T) )
ch %hum>% ~interval(Token, melodic=T, memoize=TRUE, verbose=T)
ch %hum>% ~interval(Token, melodic=T, memoize=TRUE, verbose=T)
firstArg
firstArg
duyplicates
duplicates
cat('memoizeParse has removed',
num2word(sum(duplicates)),
'duplicate argument', plural(sum(duplicates), 'combinations.', 'combination.'), '\n')
table(duplicates)
table(duplicates)
devtools::load_all(".")
ch %hum>% ~interval(Token, melodic=T, memoize=TRUE, verbose=T)
readHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*[0-9]\\.hum') -> coco
(coco %hum>% c( ~ fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
cocot
cocot
cocot$Token[[, ~is.na(Spine) | Spine == 1 | Exclusive == 'timestamp']] -> cocot
cocot
True or False
cocot$Pipe1
spinePipe(cocot, 2,1) -> cocot
cocot
cocot$Pipe3
cocot$Token
cocot$Token %hum>% duration -> cocot$Dur
cocot$Dur
cocot$TimeStamp %hum>% c(~as.numeric(TimeStamp[n = -1]) - as.numeric(TimeStamp)) -> cocot$Diff
cocot$TimeStamp %hum>% c(~as.numeric(TimeStamp[n = -1]) - as.numeric(TimeStamp)) -> cocot$Diff
cocot$Pipe3 -> cocot$TimeStamp
spinePipe(cocot, 2,1) -> cocot
readHumdrum('~/Bridge/Research/Data/CoCoPops/BillboardCorpus/Humdrum/CompleteTranscriptions/.*[0-9]\\.hum') -> coco
(coco %hum>% c( ~ fillThru(Token), where ~ Exclusive == 'timestamp', recordtypes ~ 'Dd', elsedo ~ Token)) -> cocot
cocot$Token[[ , ~is.na(Spine) | Spine == 1 | Exclusive == 'timestamp']] -> cocot
spinePipe(cocot, 2,1) -> cocot
cocot$Pipe3 -> cocot$TimeStamp
cocot$Token %hum>% duration -> cocot$Dur
cocot$TimeStamp %hum>% c(~as.numeric(TimeStamp[n = -1]) - as.numeric(TimeStamp)) -> cocot$Diff
cocot$Diff
cocot$Timestamp
(cocot %hum>% c(dofill~max(Diff), by ~ File ~ TimeStamp)) -> cocot$Span
cocot$Span
SOI(1:10)
SOI(c(1,1,1,1,1,1,1))
SOI(c(1,1,1,1,1,2,1))
timestamper <- ~{
soi <- SOI(Dur)
round((soi$Onset / max(soi$Offset)) * Span + as.numeric(TimeStamp), 2)
}
cocot$Token %hum>% c(timestamper, by ~ TimeStamp ~ File) -> cocot$TS
cocot
cocot
coco %hum>% c( ~ as.numeric(Token[n = -1]) - as.numeric(Token), where ~ Exclusive == 'timestamp', elsedo ~ Token)
coco %hum>% c( ~ as.numeric(Token[n = -1]) - as.numeric(Token), where ~ Exclusive == 'timestamp', elsedo ~ Token) -> coco$Span
writeHumdrum(cocot, fieldname = 'TS')
list(1,2,3,1:10,list(3,2,list(1:10)))
list(A=1, B=2, X=1:10) -> x
x$X
x$A
x['A']
c(A=1, B=2, C=3) -> x
c(A=1, B=2, C=3) -> x
x
x[2]
x[]
x['B']
devtools::load_all(".")
kern(c('c','d','e','f'), take = 'd')
kern(c('c','d','e','f'), take = 'B-')
kern(c('c','d','e','f'), take = 'd')
interval
kern(c('c','d','e','f'), take = c('d','e','f','g'))
lag
lag.default()
lag.default
kern(c('c','d','e','f'), take = c('d','e','f','g'))
kern(c('c','d','e','f'), transpose(by = M2)
kern(c('c','d','e','f'), transpose(by = M2))
kern(c('c','d','e','f'), transpose(from ='C:', to='D:'))
kern(c('c','d','e','f'), transpose(from ='C:', to='d:'))
kern(c('c','d','e','f'), transpose(from ='C:', to='d:', real=F))
kern(c('c','d','e','f'), transpose(from ='B-:', to='C:', real=T))
kern(c('c','d','e','f'), transpose(from ='C:', to='B-:', real=T))
kern(c('c','d','e','f'), transpose(bu=-M2))
kern(c('c','d','e','f'), transpose(by=-M2))
attributes(tonalInterval.character('c'))
attributes(tonalInterval.character('+M2'))
attributes(tonalInterval.character('M2'))
attributes(tonalInterval.character('+M2'))
devtools::load_all(".")
attributes(tonalInterval.character('+M2'))
attributes(tonalInterval.character('M2'))
devtools::load_all(".")
interval(c('c','d','e','f','f#','a','g'))
devtools::load_all(".")
interval(c('c','d','e','f','f#','a','g'))
interval(c('c','d','e','f','f#','a','g'), melodic=T)
interval(c('c','d','e','f','f#','a','g'), melodic=T) -> g
kern(k)
kern(g)
kern(g, melodic=T)
kern(g, parse(melodic=T))
devtools::load_all(".")
devtools::load_all(".")
interval(c('c','d','e','f','f#','a','g'), melodic=T) -> g
g
kern(g, melodic=T)
kern(g, parse(melodic=T))
kern(g, Exclusive='mint')
kern(g, Exclusive='mint')
devtools::load_all(".")
kern(g, Exclusive='mint')
devtools::load_all(".")
devtools::load_all(".")
kern(g, Exclusive='mint')
g
kern
kern(g, parse(Exclusive='mint'))
kern
kern(g, Exclusive='mint')
g
kern(g, Exclusive='mint')
g
kern(g[-1], Exclusive='mint')
g
interval2tint(g, Exclusive='mint')
interval2tint(g, parse(Exclusive='mint'))
kern(g, parse(Exclusive='mint'))
devtools::load_all(".")
kern(g, parse(Exclusive='mint'))
Exclusive
kern(g, parse(Exclusive='mint'))
parseArgs
parseArgs$Exclusive %||%
Exclusive
devtools::load_all(".")
kern(g, parse(Exclusive='mint'))
parseArgs
devtools::load_all(".")
tonalInterval.character(g)
tonalInterval.character(g,  Exclusive= 'mint')
tonalInterval.character
tonalInterval.character(g,  Exclusive= '**mint')
tonalInterval.character(g,  Exclusive= 'hint')
tonalInterval.character(g,  Exclusive= 'mint')
tonalInterval.character(g,  Exclusive= 'mint')
tonalInterval.character(g,  Exclusive= 'mint')
