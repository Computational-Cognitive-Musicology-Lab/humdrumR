[{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Filtering.html","id":"indexing","dir":"Articles","previous_headings":"","what":"Indexing","title":"Filtering Humdrum Data","text":"simplest, common, way filter data indexing, common approach programming selecting subsets data. R, use square brackets, [], index various data objects, including basic atomic vectors, data.tables, lists. example, using brackets can extract subsets vector: Watch ! R actually two different ways indexing: can use single pair matches brackets ([ ]) double pair ([[ ]]). want primer two types indexing used normal R objects, check R primer—really don’t need getting humdrumR, might want eventually. can use single-bracket [] double-bracket [[]] commands index humdrumR data objects. single-brackets used index whole pieces data. double-brackets used index “within” pieces data. Either type bracket can accept either numeric character vectors index .","code":"myname <- c('N', 'A', 'T', ' ', 'C', 'O', 'N', 'D', 'I', 'T')  myname[1:3] >    [1] \"N\" \"A\" \"T\"  myname[5:10] >    [1] \"C\" \"O\" \"N\" \"D\" \"I\" \"T\"  myname[c(1, 5)] >    [1] \"N\" \"C\""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Filtering.html","id":"single-bracket-indexing","dir":"Articles","previous_headings":"Indexing","what":"Single-bracket indexing","title":"Filtering Humdrum Data","text":"single-brackets used index whole pieces data. dataset 19 files, want look files, ’d use single-brackets [].","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Filtering.html","id":"numeric-indices-for-single-brackets","dir":"Articles","previous_headings":"Indexing > Single-bracket indexing","what":"Numeric indices (for single-brackets)","title":"Filtering Humdrum Data","text":"give numeric value single-bracket index command, number select ith file dataset. example, want look fifth chorale, can call: can also give command vector numbers: might want use R sequence command, :, select range numbers:","code":"chorales[5] >    ############################ vvv chor005.krn vvv ############################ >        1:  !!!COM: Bach, Johann Sebastian >        2:  !!!CDT: 1685/02/21/-1750/07/28/ >        3:  !!!OTL@@DE: An Wasserfl&uuml;ssen Babylon >        4:  !!!SCT: BWV 267 >        5:  !!!PC#: 5 >        6:  !!!AGN: chorale >      164:          **kern        **kern        **kern        **kern >      165:          *ICvox        *ICvox        *ICvox        *ICvox >      166:          *Ibass       *Itenor        *Ialto       *Isoprn >      167:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >      168:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >      169:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >      170:             *>A           *>A           *>A           *>A >      171:         *clefF4      *clefGv2       *clefG2       *clefG2 >      172:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >        7:             *G:           *G:           *G:           *G: >        8:           *M4/4         *M4/4         *M4/4         *M4/4 >        9:         *met(c)       *met(c)       *met(c)       *met(c) >       10:          *MM100        *MM100        *MM100        *MM100 >       11:              4G            4B            4g           4dd >       12:              =1            =1            =1            =1 >       13:              4C           8cL            4g           4ee >       14:               .           8BJ             .             . >       15:              4D            4A           4f#          8ddL >       16:               .             .             .          8ccJ >       17:              4E            4e            4g           8bL >       18:               .             .             .          8ccJ >       19:            8F#L           8AL           4f#           4dd >       20:             8GJ           8BJ             .             . >       21:              =2            =2            =2            =2 >       22:              4A           8cL           8eL          8ccL >       23:               .           8eJ           8gJ           8bJ >       24:              4D            4d           8gL           4cc >       25:               .             .          8f#J             . >       26:             4G;           4d;           4g;           4b; >       27:             4F#            4d            4a            4a >       28:              =3            =3            =3            =3 >       29:             8GL            4d            4g            4b >       30:            8F#J             .             .             . >       31:              4E           8GL            4g           4cc >       32:               .           8AJ             .             . >       33:             4BB           8BL            4g           4dd >       34:               .           8GJ             .             . >       35:              4C            4e            4g          8ccL >       36:               .             .             .           8bJ >       37:              =4            =4            =4            =4 >       38:              2D           8AL            4g           8aL >       39:               .           8BJ             .           8gJ >       40:               .            4c           4f#            4a >       41:            4GG;           4B;           4d;           4g; >       42:            =:|!          =:|!          =:|!          =:|! >       43:             *>B           *>B           *>B           *>B >       44:              4G            4B            4d            4g >       45:              =5            =5            =5            =5 >       46:             4F#            4A           8dL            4a >       47:               .             .           8eJ             . >       48:             8EL            4d           4f#            4b >       49:             8DJ             .             .             . >       50:              4E            4G            4e          8ccL >       51:               .             .             .           8bJ >       52:             4F#            4A           8eL            4a >       53:               .             .           8dJ             . >       54:              =6            =6            =6            =6 >       55:              4G           8AL            4d            4b >       56:               .           8GJ             .             . >       57:              4D           8GL            4c            4a >       58:               .          8F#J             .             . >       59:            4GG;           4G;           4B;           4g; >       60:              4C            4G            4e           8gL >       61:               .             .             .           8aJ >       62:              =7            =7            =7            =7 >       63:             8GL            4G            4d            4b >       64:             8FJ             .             .             . >       65:             8EL            4G            4e           4cc >       66:             8DJ             .             .             . >       67:             8CL            4G            4f           4dd >       68:            8BBJ             .             .             . >       69:             8CL            4G           8eL           4ee >       70:             8DJ             .          8f#J             . >       71:              =8            =8            =8            =8 >       72:              4E           8GL           8gL            4b >       73:               .          16AL          8f#J             . >       74:               .         16BJJ             .             . >       75:             4AA            4A           8gL          4cc# >       76:               .             .           8aJ             . >       77:             4D;           4A;          4f#;          4dd; >       78:             8GL            4G            4d           8bL >       79:             8AJ             .             .          8ccJ >       80:              =9            =9            =9            =9 >       81:              4B           8GL            4g           4dd >       82:               .           8dJ             .             . >       83:              4c           8cL            4g           4ee >       84:               .           8BJ             .             . >       85:             4F#            4A            4a          8ddL >       86:               .             .             .          8ccJ >       87:             4G#            4e            4b            4b >       88:             =10           =10           =10           =10 >       89:              4A            2e           8bL           2cc >       90:               .             .          8g#J             . >       91:             4AA             .            4a             . >       92:             4E;           4e;          4g#;           4b; >       93:            4GG#           8eL            4b           4ee >       94:               .           8dJ             .             . >       95:             =11           =11           =11           =11 >       96:            8AAL           8cL            4a           4ee >       97:            8BBJ           8BJ             .             . >       98:             8CL           [4A           8eL           4ee >       99:            8AAJ             .           8cJ             . >      100:              4F          8AL]           8dL            4a >      101:               .          8G#J           8eJ             . >      102:             8EL           8AL            4f           4dd >      103:             8DJ           8BJ             .             . >      104:             =12           =12           =12           =12 >      105:              4E           8G#            4e           4cc >      106:               .            4A             .             . >      107:             4EE             .            4d            4b >      108:               .           8G#             .             . >      109:            4AA;           4A;           4c;           4a; >      110:             4AA           8EL            4a           4cc >      111:               .         8F#XJ             .             . >      112:             =13           =13           =13           =13 >      113:            8BBL          4GnX           8dL            4b >      114:            8C#J             .           8eJ             . >      115:              2D           8dL            4f            4a >      116:               .           8cJ             .             . >      117:               .           4B-           8eL            4g >      118:               .             .           8dJ             . >      119:             4C#            4A           [4e           8aL >      120:               .             .             .           8gJ >      121:             =14           =14           =14           =14 >      122:              4D            4A          8eL]            4f >      123:               .             .           8dJ             . >      124:             4AA            4G           8dL            4e >      125:               .             .          8c#J             . >      126:             4D;         4F#X;           4d;           4d; >      127:             4BB           4F#           8dL            4d >      128:               .             .           8cJ             . >      129:             =15           =15           =15           =15 >      130:              4E            4G           8BL            4g >      131:               .             .           8AJ             . >      132:              4D            4d           8GL            4a >      133:               .             .          8F#J             . >      134:             8GL            4d            4G           4.b >      135:            8F#J             .             .             . >      136:              4E            4e            4g             . >      137:               .             .             .           8cc >      138:             =16           =16           =16           =16 >      139:            8BBL            2d           4f#           4dd >      140:            8AAJ             .             .             . >      141:             4GG             .            4g          8ccL >      142:               .             .             .           8bJ >      143:             8CL           8eL            4g            4a >      144:            8BBJ           8dJ             .             . >      145:             4AA            4c           [4g           8bL >      146:               .             .             .          8ccJ >      147:             =17           =17           =17           =17 >      148:             8DL           8dL           4g]            2a >      149:             8CJ           8eJ             .             . >      150:              4D           8dL           4f#             . >      151:               .           8cJ             .             . >      152:            4GG;           4B;           4d;           4g; >      153:              ==            ==            ==            == >      154:              *-            *-            *-            *- >      155:  !!!hum2abc: -Q '' >      156:  !!!title: @{PC#}. @{OTL@@DE} >      157:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >      158:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >      159:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >      160:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >      161:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >      162:  !!!EED:  Craig Stuart Sapp >      163:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor005.krn ^^^ ############################ >                         (***four global comments truncated due to screen size***) >        Data fields:  >               *Token :: character chorales[c(1,3,5)] >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:          **kern        **kern        **kern        **kern >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:             4GG            4B            4d            4g >        13:              =1            =1            =1            =1 >        14:              4G            4B            4d            2g >        15:              4E           8cL            4e             . >        16:               .           8BJ             .             . >        17:             4F#            4A            4d           4dd >        18:              =2            =2            =2            =2 >        19:              4G            4G            2d           4.b >        20:              4D           4F#             .             . >        21:               .             .             .            8a >        22:              4E            4G            4B            4g >        23:              =3            =3            =3            =3 >        24:              4C           8cL           8eL           4.g >        25:               .           8BJ            8d             . >        26:            8BBL            4c            8e             . >        27:            8AAJ             .          8f#J            8a >        28:             4GG            4d            4g            4b >        29:              =4            =4            =4            =4 >        30:             2D;           2d;          2f#;           2a; >        31:             4GG            4d            4g            4b >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (1 more files...) >     >    ############################ vvv chor005.krn vvv ############################# >     1-123:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >       124:             4AA            4G           8dL            4e >       125:               .             .          8c#J             . >       126:             4D;         4F#X;           4d;           4d; >       127:             4BB           4F#           8dL            4d >       128:               .             .           8cJ             . >       129:             =15           =15           =15           =15 >       130:              4E            4G           8BL            4g >       131:               .             .           8AJ             . >       132:              4D            4d           8GL            4a >       133:               .             .          8F#J             . >       134:             8GL            4d            4G           4.b >       135:            8F#J             .             .             . >       136:              4E            4e            4g             . >       137:               .             .             .           8cc >       138:             =16           =16           =16           =16 >       139:            8BBL            2d           4f#           4dd >       140:            8AAJ             .             .             . >       141:             4GG             .            4g          8ccL >       142:               .             .             .           8bJ >       143:             8CL           8eL            4g            4a >       144:            8BBJ           8dJ             .             . >       145:             4AA            4c           [4g           8bL >       146:               .             .             .          8ccJ >       147:             =17           =17           =17           =17 >       148:             8DL           8dL           4g]            2a >       149:             8CJ           8eJ             .             . >       150:              4D           8dL           4f#             . >       151:               .           8cJ             .             . >       152:            4GG;           4B;           4d;           4g; >       153:              ==            ==            ==            == >       154:              *-            *-            *-            *- >       155:  !!!hum2abc: -Q '' >       156:  !!!title: @{PC#}. @{OTL@@DE} >       157:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >       158:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >       159:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >       160:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >       161:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >       162:  !!!EED:  Craig Stuart Sapp >       163:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor005.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of three files. >        Data fields:  >               *Token :: character chorales[6:10] >     >           (3 more files...) >     >    ############################ vvv chor010.krn vvv ############################ >     1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >       52:             4AA            4c            4f            4a >       53:            4BB-            4d            4f            4g >       54:              4C          8.cL            4e            4g >       55:               .        16B-Jk             .             . >       56:              =8            =8            =8            =8 >       57:           2.FF;          2.A;          2.c;          2.f; >       58:              ==            ==            ==            == >       59:              *-            *-            *-            *- >       60:  !!!hum2abc: -Q '' >       61:  !!!title: @{PC#}. @{OTL@@DE} >       62:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >       63:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >       64:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >       65:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >       66:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >       67:  !!!EED:  Craig Stuart Sapp >       68:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################ >    ############################ vvv chor006.krn vvv ############################ >        1:  !!!COM: Bach, Johann Sebastian >        2:  !!!CDT: 1685/02/21/-1750/07/28/ >        3:  !!!OTL@@DE: Aus tiefer Not schrei ich zu dir >        4:  !!!SCT: BWV 38/6 >        5:  !!!PC#: 10 >        6:  !!!AGN: chorale >       92:          **kern        **kern        **kern        **kern >       93:          *ICvox        *ICvox        *ICvox        *ICvox >       94:          *Ibass       *Itenor        *Ialto       *Isoprn >       95:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       96:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       97:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       98:             *>A           *>A           *>A           *>A >       99:         *clefF4      *clefGv2       *clefG2       *clefG2 >      100:            *k[]          *k[]          *k[]          *k[] >        7:             *a:           *a:           *a:           *a: >        8:           *M4/4         *M4/4         *M4/4         *M4/4 >        9:         *met(c)       *met(c)       *met(c)       *met(c) >       10:          *MM100        *MM100        *MM100        *MM100 >       11:             =1-           =1-           =1-           =1- >       12:              2D           2G#            2e            2b >       13:              4C            4A            4e            4e >       14:             4BB            4d           4g#            4b >       15:              =2            =2            =2            =2 >       16:             4AA            4e            4a           4cc >       17:             4BB            4d         8gnXL           8bL >       18:               .             .          8f#J           8aJ >       19:             8CL           8eL            4e            4g >       20:            8BBJ           8dJ             .             . >       21:             4AA            4c           4f#            4a >       22:              =3            =3            =3            =3 >       23:             2E;           2B;          2g#;           2b; >       24:              2E            2e           2g#            2b >       25:              =4            =4            =4            =4 >       26:              4A            4e            4a           4cc >       27:             8GL            4f            4b           4dd >       28:             8FJ             .             .             . >       29:              4E            4g           4cc          8ccL >       30:               .             .             .           8bJ >       31:              4F            4c            4f            4a >    32-91:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor006.krn ^^^ ############################ >                         (***four global comments truncated due to screen size***) >     >       humdrumR corpus of five files. >        Data fields:  >               *Token :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Filtering.html","id":"character-indices-for-single-brackets","dir":"Articles","previous_headings":"Indexing > Single-bracket indexing","what":"Character indices (for single-brackets)","title":"Filtering Humdrum Data","text":"supply humdrumR object single-bracket index character string, humdrumR treat string regular expression return files contain match expression data token—even one. example, might interested files use flat notes. Since **kern represents flats “-”, can simply write: Look , five ten chorales contain least one flat. chorales zero flats. Notice still get whole files returned us!","code":"chorales['-'] >    ############################ vvv chor003.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Ach Gott, vom Himmel sieh darein >         4:  !!!OTL@EN: Oh God, look down from Heaven >         5:  !!!OPR: Cantata BWV 153: Schau, lieber Gott, wie meine Feind >         6:  !!!SCT: BWV 153/1 >         7:  !!!PC#: 3 >         8:  !!!AGN: chorale >       101:          **kern        **kern        **kern        **kern >       102:          *ICvox        *ICvox        *ICvox        *ICvox >       103:          *Ibass       *Itenor        *Ialto       *Isoprn >       104:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       105:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       106:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       107:             *>A           *>A           *>A           *>A >       108:         *clefF4      *clefGv2       *clefG2       *clefG2 >       109:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >       110:             *a:           *a:           *a:           *a: >         9:         !dorian       !dorian       !dorian       !dorian >        10:           *M4/4         *M4/4         *M4/4         *M4/4 >        11:         *met(c)       *met(c)       *met(c)       *met(c) >        12:          *MM100        *MM100        *MM100        *MM100 >        13:              4E            4e           4g#            4b >        14:              =1            =1            =1            =1 >        15:              4A            4e            4a           4cc >        16:              4B            4d           4g#            4b >        17:              4c            4e            4a            4a >        18:             8BL           8dL          8g#L           4ee >        19:             8AJ           8cJ           8aJ             . >        20:              =2            =2            =2            =2 >        21:             4G#            4B            4b          8eeL >        22:               .             .             .          8ddJ >        23:              4A           8cL           8eL           4cc >        24:               .           8dJ          8f#J             . >        25:             4E;           4e;          4g#;           4b; >        26:             4BB            4f           4g#           4dd >        27:              =3            =3            =3            =3 >        28:             8CL            4e            4a           4cc >        29:             8DJ             .             .             . >        30:              4E           8eL           4g#            4b >    31-100:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor003.krn ^^^ ############################# >     >           (3 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:            2AA;           2c;           2e;           2a; >        53:              2A            2e            2a           2cc >        54:              =9            =9            =9            =9 >        55:              4E            4e            4g            4b >        56:             8DL            4e            4g           4cc >        57:             8CJ             .             .             . >        58:             4BB            4d           8gL           4dd >        59:               .             .           8fJ             . >        60:              4C            4c            4e            4g >        61:             =10           =10           =10           =10 >        62:              4D           8F#            4d            4b >        63:               .            4G             .             . >        64:              4D             .            4c            4a >        65:               .           8F#             .             . >        66:            2GG;           2G;           2B;           2g; >        67:             =11           =11           =11           =11 >        68:              2C            2G            2e            2g >        69:             4AA            4A            4e           4cc >        70:              4E           4G#           8eL            4b >        71:               .             .           8dJ             . >        72:             =12           =12           =12           =12 >        73:              4F            4A            4c            4a >        74:              4C            4G            4c            4e >        75:            4BB-            4G           [2d            4g >        76:             4AA            4A             .            4f >        77:             =13           =13           =13           =13 >        78:            4GG#            4B           4d]           1e; >        79:             4AA            4A            4c             . >        80:            2EE;         2G#X;           2B;             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of five files. >        Data fields:  >               *Token :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Filtering.html","id":"double-bracket-indexing","dir":"Articles","previous_headings":"Indexing","what":"Double-bracket indexing","title":"Filtering Humdrum Data","text":"double-brackets used index pieces data. Specifically, want work certain spines records within pieces. double-brackets apply filters separately file dataset. double-bracket indexing, can provide two separate arguments, either individually together: first argument index rows within file. j second argument, index spines within file. want use j (spine) argument , put comma , indicate skipping . also good practice clear put comma , actually needed. Basically, commands look like : chorales[[, ]] (records) chorales[[  , j]] (spines) chorales[[, j]] (records spines)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Filtering.html","id":"numeric-indices-for-double-brackets","dir":"Articles","previous_headings":"Indexing > Double-bracket indexing","what":"Numeric indices (for double-brackets)","title":"Filtering Humdrum Data","text":"Numeric values j can given double-bracket humdrumR index commands. , number simply matched record numbers file. example, extract first fifty records file : j, number matched spines file (left right). wanted second spine file, ’d write: give indices larger number records spines file, file dropped. example, call get three files back, seven files don’t records 150! (Notice humdrumR won’t remove Exclusive interpretation spine spine closing (*-) records…since break humdrum syntax.)","code":"chorales[[1:50, ]] >    ###################### vvv chor001.krn vvv ###################### >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >         8:          **kern        **kern        **kern        **kern >         9:          *ICvox        *ICvox        *ICvox        *ICvox >        10:          *Ibass       *Itenor        *Ialto       *Isoprn >        11:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >        12:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >        13:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >        14:             *>A           *>A           *>A           *>A >        15:         *clefF4      *clefGv2       *clefG2       *clefG2 >        16:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >        17:             *G:           *G:           *G:           *G: >        18:             *F:             *             *             * >        19:           *M3/4         *M3/4         *M3/4         *M3/4 >        20:          *MM100        *MM100        *MM100        *MM100 >        21:             4GG            4B            4d            4g >        22:              =1            =1            =1            =1 >        23:              4G            4B            4d            2g >        24:              4E           8cL            4e             . >        25:               .           8BJ             .             . >        26:             4F#            4A            4d           4dd >        27:              =2            =2            =2            =2 >        28:              4G            4G            2d           4.b >        29:              4D           4F#             .             . >        30:               .             .             .            8a >        31:              4E            4G            4B            4g >        32:              =3            =3            =3            =3 >        33:              4C           8cL           8eL           4.g >        34:               .           8BJ            8d             . >        35:            8BBL            4c            8e             . >        36:            8AAJ             .          8f#J            8a >        37:             4GG            4d            4g            4b >        38:              =4            =4            =4            =4 >        39:             2D;           2d;          2f#;           2a; >        40:             4GG            4d            4g            4b >    41-125::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ###################### ^^^ chor001.krn ^^^ ###################### >     >           (8 more files...) >     >    ###################### vvv chor010.krn vvv ###################### >      1-11::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        12:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >        13:             *>A           *>A           *>A           *>A >        14:         *clefF4      *clefGv2       *clefG2       *clefG2 >        15:            *k[]          *k[]          *k[]          *k[] >        16:             *a:           *a:           *a:           *a: >        17:           *M4/4         *M4/4         *M4/4         *M4/4 >        18:         *met(c)       *met(c)       *met(c)       *met(c) >        19:          *MM100        *MM100        *MM100        *MM100 >        20:             =1-           =1-           =1-           =1- >        21:              2D           2G#            2e            2b >        22:              4C            4A            4e            4e >        23:             4BB            4d           4g#            4b >        24:              =2            =2            =2            =2 >        25:             4AA            4e            4a           4cc >        26:             4BB            4d         8gnXL           8bL >        27:               .             .          8f#J           8aJ >        28:             8CL           8eL            4e            4g >        29:            8BBJ           8dJ             .             . >        30:             4AA            4c           4f#            4a >        31:              =3            =3            =3            =3 >        32:             2E;           2B;          2g#;           2b; >        33:              2E            2e           2g#            2b >        34:              =4            =4            =4            =4 >        35:              4A            4e            4a           4cc >        36:             8GL            4f            4b           4dd >        37:             8FJ             .             .             . >        38:              4E            4g           4cc          8ccL >        39:               .             .             .           8bJ >        40:              4F            4c            4f            4a >        41:              =5            =5            =5            =5 >        42:              4C           8cL            4e            4g >        43:               .           8BJ             .             . >        44:              4D            4A           8dL            4f >        45:               .             .           8cJ             . >        46:             2E;          2G#;           2B;           2e; >        47:           =6:|!         =6:|!         =6:|!         =6:|! >        48:             *>B           *>B           *>B           *>B >        49:              2c            2A            2e            2a >        50:              4B            4B            4d          4gnX >        91:              *-            *-            *-            *- >    ###################### ^^^ chor010.krn ^^^ ###################### >     >       humdrumR corpus of ten files. >        Data fields:  >               *Token :: character chorales[[ , 2]] >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:          **kern >       127:          *ICvox >       128:         *Itenor >       129:        *I\"Tenor >       130:       *>[A,A,B] >       131:    *>norep[A,B] >       132:             *>A >       133:        *clefGv2 >       134:          *k[f#] >         8:             *G: >         9:               * >        10:           *M3/4 >        11:          *MM100 >        12:              4B >        13:              =1 >        14:              4B >        15:             8cL >        16:             8BJ >        17:              4A >        18:              =2 >        19:              4G >        20:             4F# >        21:               . >        22:              4G >        23:              =3 >        24:             8cL >        25:             8BJ >        26:              4c >        27:               . >        28:              4d >        29:              =4 >        30:             2d; >        31:              4d >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:             2c; >        53:              2e >        54:              =9 >        55:              4e >        56:              4e >        57:               . >        58:              4d >        59:               . >        60:              4c >        61:             =10 >        62:             8F# >        63:              4G >        64:               . >        65:             8F# >        66:             2G; >        67:             =11 >        68:              2G >        69:              4A >        70:             4G# >        71:               . >        72:             =12 >        73:              4A >        74:              4G >        75:              4G >        76:              4A >        77:             =13 >        78:              4B >        79:              4A >        80:           2G#X; >        81:              == >        82:              *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >               *Token :: character chorales[[150:200, ]] >    ############################ vvv chor005.krn vvv ############################ >      164:    **kern  **kern  **kern  **kern >      165:       4GG       .      4g    8ccL >      166:         .       .       .     8bJ >      167:       8CL     8eL      4g      4a >      168:      8BBJ     8dJ       .       . >      169:       4AA      4c     [4g     8bL >      170:         .       .       .    8ccJ >      171:       =17     =17     =17     =17 >      172:       8DL     8dL     4g]      2a >        7:       8CJ     8eJ       .       . >      150:        4D     8dL     4f#       . >      151:         .     8cJ       .       . >      152:      4GG;     4B;     4d;     4g; >      153:        ==      ==      ==      == >      154:        *-      *-      *-      *- >      155:  !!!hum2abc: -Q '' >      156:  !!!title: @{PC#}. @{OTL@@DE} >      157:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >      158:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >      159:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >      160:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >      161:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >      162:  !!!EED:  Craig Stuart Sapp >      163:  !!!EEV:  2009/05/22 >         :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor005.krn ^^^ ############################ >     >           (1 more files...) >     >    ############################ vvv chor008.krn vvv ############################ >         :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >      163:    **kern  **kern  **kern  **kern >      164:        8F      4f    8a-L     4cc >      165:       8GJ       .    8b-J       . >      166:      8A-L      4c     4cc     4ff >      167:        8G       .       .       . >      168:       8A-      4F    8b-L     4ff >      169:      8B-J       .    8a-J       . >      170:       =20     =20     =20     =20 >      171:        4c      4c      4g     4ee >        7:        4C      4c      4g     4ee >      150:        4F      4c      4a     4ff >      151:       4F;     4c;     4a;    4ff; >      152:        ==      ==      ==      == >      153:        *-      *-      *-      *- >      154:  !!!hum2abc: -Q '' >      155:  !!!title: @{PC#}. @{OTL@@DE} >      156:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >      157:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >      158:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >      159:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >      160:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >      161:  !!!EED:  Craig Stuart Sapp >      162:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor008.krn ^^^ ############################ >                        (***eight global comments truncated due to screen size***) >     >       humdrumR corpus of three files. >        Data fields:  >               *Token :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Filtering.html","id":"character-indices-for-double-brackets","dir":"Articles","previous_headings":"Indexing > Double-bracket indexing","what":"Character indices (for double-brackets)","title":"Filtering Humdrum Data","text":"Character string values j can also given double-bracket humdrumR index commands. humdrumR treat string regular expression return records () spines (j) match expression data token—even one. example, let’s () say interesting studying flats. Since **kern represents flats “-”, can find records contain flat calling: single-bracket search flats (previous section) get five files back, five chorales contain flats . However, now see records don’t contain flat completely stripped away, leaving (handful) records least one flat. thing j (spines) looks like get one spine five files. single spines simply ever spine file contained flat. couple things notice! first file, now spine 1 old spine 2, can tell instrument interpretation *Itenor. However, look last five files see *Ibass—new spine 1 actually original spine 1 file. wait, ’s ! dig look files returned us (aren’t shown default), see now third file actually flats four spines, four spines still ! cases may find renumbering spines per file basis confusing, want keep track original spine numbers. Fortunately, option might helpful, learn : try specifiying removeEmpty = FALSE:","code":"chorales[['-', ]] >    ############################ vvv chor003.krn vvv ############################ >          1:  !!!COM: Bach, Johann Sebastian >          2:  !!!CDT: 1685/02/21/-1750/07/28/ >          3:  !!!OTL@@DE: Ach Gott, vom Himmel sieh darein >          4:  !!!OTL@EN: Oh God, look down from Heaven >          5:  !!!OPR: Cantata BWV 153: Schau, lieber Gott, wie meine Feind >          6:  !!!SCT: BWV 153/1 >          7:  !!!PC#: 3 >          8:  !!!AGN: chorale >        101:          **kern        **kern        **kern        **kern >        102:          *ICvox        *ICvox        *ICvox        *ICvox >        103:          *Ibass       *Itenor        *Ialto       *Isoprn >        104:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >        105:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >        106:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >        107:             *>A           *>A           *>A           *>A >        108:         *clefF4      *clefGv2       *clefG2       *clefG2 >        109:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >        110:             *a:           *a:           *a:           *a: >          9:         !dorian       !dorian       !dorian       !dorian >         10:           *M4/4         *M4/4         *M4/4         *M4/4 >         11:         *met(c)       *met(c)       *met(c)       *met(c) >         12:          *MM100        *MM100        *MM100        *MM100 >      13-43:        =====1-4      =====1-4      =====1-4      =====1-4 >         44:             *>B           *>B           *>B           *>B >      45-81:        =====5-9      =====5-9      =====5-9      =====5-9 >         82:             8DL           4B-            4g           4ee >         83:               .             .             .             . >         84:             =10           =10           =10           =10 >         85:               .             .             .             . >         86:               .             .             .             . >         87:               .             .             .             . >         88:               .             .             .             . >         89:              ==            ==            ==            == >         90:              *-            *-            *-            *- >         91:  !!!hum2abc: -Q '' >         92:  !!!title: @{PC#}. @{OTL@@DE} >         93:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastia*** >         94:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und *** >         95:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 3*** >         96:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., *** >     97-100:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor003.krn ^^^ ############################ >     >           (3 more files...) >     >    ############################ vvv chor010.krn vvv ############################ >       1-17:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >         18:               .             .             .             . >         19:               .             .             .             . >         20:               .             .             .             . >         21:               .             .             .             . >         22:              =3            =3            =3            =3 >         23:               .             .             .             . >         24:               .             .             .             . >         25:              =4            =4            =4            =4 >         26:               .             .             .             . >         27:               .             .             .             . >         28:               .             .             .             . >         29:               .             .             .             . >         30:               .             .             .             . >         31:               .             .             .             . >         32:              =5            =5            =5            =5 >         33:               .             .             .             . >         34:               .             .             .             . >         35:               .             .             .             . >         36:               .             .             .             . >         37:               .             .             .             . >         38:           =6:|!         =6:|!         =6:|!         =6:|! >         39:             *>B           *>B           *>B           *>B >      40-74:      ======7-12    ======7-12    ======7-12    ======7-12 >         75:            4BB-            4G           [2d            4g >         76:               .             .             .             . >         77:             =13           =13           =13           =13 >         78:               .             .             .             . >         79:               .             .             .             . >         80:               .             .             .             . >         81:              ==            ==            ==            == >         82:              *-            *-            *-            *- >         83:  !!!hum2abc: -Q '' >         84:  !!!title: @{PC#}. @{OTL@@DE} >         85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastia*** >         86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und *** >         87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 3*** >         88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., *** >         89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >         90:  !!!EED:  Craig Stuart Sapp >         91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################ >                         (***nine global comments truncated due to screen size***) >     >       humdrumR corpus of five files. >        Data fields:  >               *Token :: character chorales[[ , '-']] >    ############################ vvv chor003.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Ach Gott, vom Himmel sieh darein >         4:  !!!OTL@EN: Oh God, look down from Heaven >         5:  !!!OPR: Cantata BWV 153: Schau, lieber Gott, wie meine Feind >         6:  !!!SCT: BWV 153/1 >         7:  !!!PC#: 3 >         8:  !!!AGN: chorale >       101:          **kern >       102:          *ICvox >       103:         *Itenor >       104:        *I\"Tenor >       105:       *>[A,A,B] >       106:    *>norep[A,B] >       107:             *>A >       108:        *clefGv2 >       109:          *k[f#] >       110:             *a: >         9:         !dorian >        10:           *M4/4 >        11:         *met(c) >        12:          *MM100 >        13:              4e >        14:              =1 >        15:              4e >        16:              4d >        17:              4e >        18:             8dL >        19:             8cJ >        20:              =2 >        21:              4B >        22:               . >        23:             8cL >        24:             8dJ >        25:             4e; >        26:              4f >        27:              =3 >        28:              4e >        29:               . >        30:             8eL >    31-100:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor003.krn ^^^ ############################# >     >           (3 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:            2AA; >        53:              2A >        54:              =9 >        55:              4E >        56:             8DL >        57:             8CJ >        58:             4BB >        59:               . >        60:              4C >        61:             =10 >        62:              4D >        63:               . >        64:              4D >        65:               . >        66:            2GG; >        67:             =11 >        68:              2C >        69:             4AA >        70:              4E >        71:               . >        72:             =12 >        73:              4F >        74:              4C >        75:            4BB- >        76:             4AA >        77:             =13 >        78:            4GG# >        79:             4AA >        80:            2EE; >        81:              == >        82:              *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of five files. >        Data fields:  >               *Token :: character chorales[[ , '-']][5] >    ############################ vvv chor010.krn vvv ############################ >        1:  !!!COM: Bach, Johann Sebastian >        2:  !!!CDT: 1685/02/21/-1750/07/28/ >        3:  !!!OTL@@DE: Aus tiefer Not schrei ich zu dir >        4:  !!!SCT: BWV 38/6 >        5:  !!!PC#: 10 >        6:  !!!AGN: chorale >       92:          **kern >       93:          *ICvox >       94:          *Ibass >       95:         *I\"Bass >       96:       *>[A,A,B] >       97:    *>norep[A,B] >       98:             *>A >       99:         *clefF4 >      100:            *k[] >        7:             *a: >        8:           *M4/4 >        9:         *met(c) >       10:          *MM100 >       11:             =1- >       12:              2D >       13:              4C >       14:             4BB >       15:              =2 >       16:             4AA >       17:             4BB >       18:               . >       19:             8CL >       20:            8BBJ >       21:             4AA >       22:              =3 >       23:             2E; >       24:              2E >       25:              =4 >       26:              4A >       27:             8GL >       28:             8FJ >       29:              4E >       30:               . >       31:              4F >       32:              =5 >       33:              4C >       34:               . >       35:              4D >       36:               . >       37:             2E; >       38:           =6:|! >       39:             *>B >       40:              2c >       41:              4B >       42:              4A >       43:               . >       44:              =7 >       45:              4G >       46:           8FnXL >       47:             8EJ >       48:              4D >       49:               . >       50:              4E >       51:              =8 >       52:            2AA; >       53:              2A >       54:              =9 >       55:              4E >       56:             8DL >       57:             8CJ >       58:             4BB >       59:               . >       60:              4C >       61:             =10 >       62:              4D >       63:               . >       64:              4D >       65:               . >       66:            2GG; >       67:             =11 >       68:              2C >       69:             4AA >       70:              4E >       71:               . >       72:             =12 >       73:              4F >       74:              4C >       75:            4BB- >       76:             4AA >       77:             =13 >       78:            4GG# >       79:             4AA >       80:            2EE; >       81:              == >       82:              *- >       83:  !!!hum2abc: -Q '' >       84:  !!!title: @{PC#}. @{OTL@@DE} >       85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >       86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >       87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >       88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >       89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >       90:  !!!EED:  Craig Stuart Sapp >       91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################ >                         (***four global comments truncated due to screen size***) >        Data fields:  >               *Token :: character chorales[[ , '-']][3] >    ############################ vvv chor006.krn vvv ############################ >       1:  !!!COM: Bach, Johann Sebastian >       2:  !!!CDT: 1685/02/21/-1750/07/28/ >       3:  !!!OTL@@DE: Christus, der ist mein Leben >       4:  !!!SCT: BWV 281 >       5:  !!!PC#: 6 >       6:  !!!AGN: chorale >      69:     **kern    **kern   **kern      **kern >      70:     *ICvox    *ICvox   *ICvox      *ICvox >      71:     *Ibass   *Itenor   *Ialto     *Isoprn >      72:    *I\"Bass  *I\"Tenor  *I\"Alto  *I\"Soprano >      73:    *clefF4  *clefGv2  *clefG2     *clefG2 >      74:     *k[b-]    *k[b-]   *k[b-]      *k[b-] >      75:        *F:       *F:      *F:         *F: >      76:      *M4/4     *M4/4    *M4/4       *M4/4 >      77:    *met(c)   *met(c)  *met(c)     *met(c) >       7:     *MM100    *MM100   *MM100      *MM100 >       8:        4FF        4A       4c          4f >       9:         =1        =1       =1          =1 >      10:         4F        4c       4f          4a >      11:         4E        4c       4g          4g >      12:        4E-        4c       4f          4a >      13:         4D        4d       4f         4b- >      14:         =2        =2       =2          =2 >      15:        8CL        4G      8eL         2cc >      16:         8D         .       8f           . >      17:         8E        4c       8g           . >      18:        8CJ         .      8eJ           . >      19:        4F;       4c;      4f;         4a; >      20:       4BB-       4B-       4f         4dd >      21:         =3        =3       =3          =3 >      22:        4AA        4c      4.f         4cc >      23:        4GG       8dL        .         4b- >      24:          .      8B-J       8e           . >      25:       8FFL        4c      4.f          4a >      26:       8AAJ         .        .           . >      27:         4C        4c        .          4g >      28:          .         .       8e           . >      29:         =4        =4       =4          =4 >      30:       2FF;       2c;      2f;         2a; >      31:         4r       4ry      4ry          4r >      32:         4A        4f      [4a         4cc >      33:         =5        =5       =5          =5 >      34:        4BB        4f     8aL]         4dd >      35:          .         .     [8gJ           . >      36:         4C       [4e     8gL]         4ee >      37:          .         .   16ccLL           . >      38:          .         .  16b-XJJ           . >      39:        8DL      8eL]       4a         4ff >      40:        8FJ       8dJ        .           . >      41:        8AL       [4c       4a         4ee >      42:        8GJ         .        .           . >      43:         =6        =6       =6          =6 >      44:        8FL       4c]       4a         2dd >      45:        8DJ         .        .           . >      46:         4G        4B       4g           . >      47:        4C;       4e;      4g;        4cc; >      48:        4FF        4c      [4f          4a >      49:         =7        =7       =7          =7 >      50:        4GG      4B-X     8fL]         4b- >      51:          .         .      8eJ           . >      52:        4AA        4c       4f          4a >      53:       4BB-        4d       4f          4g >      54:         4C      8.cL       4e          4g >      55:          .    16B-Jk        .           . >      56:         =8        =8       =8          =8 >      57:      2.FF;      2.A;     2.c;        2.f; >      58:         ==        ==       ==          == >      59:         *-        *-       *-          *- >      60:  !!!hum2abc: -Q '' >      61:  !!!title: @{PC#}. @{OTL@@DE} >      62:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian B*** >      63:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&a*** >      64:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371 *** >      65:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.1*** >      66:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >      67:  !!!EED:  Craig Stuart Sapp >      68:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor006.krn ^^^ ############################ >                         (***four global comments truncated due to screen size***) >        Data fields:  >               *Token :: character chorales[[ , '-', removeEmpty = FALSE]] >    ############################ vvv chor003.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Ach Gott, vom Himmel sieh darein >         4:  !!!OTL@EN: Oh God, look down from Heaven >         5:  !!!OPR: Cantata BWV 153: Schau, lieber Gott, wie meine Feind >         6:  !!!SCT: BWV 153/1 >         7:  !!!PC#: 3 >         8:  !!!AGN: chorale >       101:          **kern        **kern        **kern        **kern >       102:          *ICvox        *ICvox        *ICvox        *ICvox >       103:          *Ibass       *Itenor        *Ialto       *Isoprn >       104:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       105:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       106:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       107:             *>A           *>A           *>A           *>A >       108:         *clefF4      *clefGv2       *clefG2       *clefG2 >       109:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >       110:             *a:           *a:           *a:           *a: >         9:         !dorian       !dorian       !dorian       !dorian >        10:           *M4/4         *M4/4         *M4/4         *M4/4 >        11:         *met(c)       *met(c)       *met(c)       *met(c) >        12:          *MM100        *MM100        *MM100        *MM100 >        13:               .            4e             .             . >        14:              =1            =1            =1            =1 >        15:               .            4e             .             . >        16:               .            4d             .             . >        17:               .            4e             .             . >        18:               .           8dL             .             . >        19:               .           8cJ             .             . >        20:              =2            =2            =2            =2 >        21:               .            4B             .             . >        22:               .             .             .             . >        23:               .           8cL             .             . >        24:               .           8dJ             .             . >        25:               .           4e;             .             . >        26:               .            4f             .             . >        27:              =3            =3            =3            =3 >        28:               .            4e             .             . >        29:               .             .             .             . >        30:               .           8eL             .             . >    31-100:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor003.krn ^^^ ############################# >     >           (3 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:            2AA;             .             .             . >        53:              2A             .             .             . >        54:              =9            =9            =9            =9 >        55:              4E             .             .             . >        56:             8DL             .             .             . >        57:             8CJ             .             .             . >        58:             4BB             .             .             . >        59:               .             .             .             . >        60:              4C             .             .             . >        61:             =10           =10           =10           =10 >        62:              4D             .             .             . >        63:               .             .             .             . >        64:              4D             .             .             . >        65:               .             .             .             . >        66:            2GG;             .             .             . >        67:             =11           =11           =11           =11 >        68:              2C             .             .             . >        69:             4AA             .             .             . >        70:              4E             .             .             . >        71:               .             .             .             . >        72:             =12           =12           =12           =12 >        73:              4F             .             .             . >        74:              4C             .             .             . >        75:            4BB-             .             .             . >        76:             4AA             .             .             . >        77:             =13           =13           =13           =13 >        78:            4GG#             .             .             . >        79:             4AA             .             .             . >        80:            2EE;             .             .             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of five files. >        Data fields:  >               *Token :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Filtering.html","id":"negative-numeric-indices","dir":"Articles","previous_headings":"Indexing","what":"Negative numeric indices","title":"Filtering Humdrum Data","text":"nifty feature R supply negative numbers indexer, R remove numbers. works humdrumR , want files except first file, write: want spines except fourth spine, write want remove first 20 records file: (, humdrumR won’t remove Exclusive interpretation spine spine closing (*-) records…since break humdrum syntax.)","code":"chorales[-1] >     >           (7 more files...) >     >    ############################ vvv chor010.krn vvv ############################ >     1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >       52:               .             .         8g#XJ           8bJ >       53:            8C#L            4e            4a          4cc# >       54:             8DJ             .             .             . >       55:             4E;           4e;          4g#;           4b; >       56:             4C#            4e           4a#          4cc# >       57:              =7            =7            =7            =7 >       58:             4BB           8f#           8bL           4dd >       59:               .            4B           8aJ             . >       60:             4C#             .            4g          4cc# >       61:               .           8A#             .             . >       62:             8DL            4B          8f#L            4b >       63:             8GJ             .           8eJ             . >       64:             4F#           4c#           4f#           4a# >       65:              =8            =8            =8            =8 >       66:           2.BB;          2.d;         2.f#;          2.b; >       67:             4C#           4G#           8eL            4e >       68:               .             .           8dJ             . >       69:              =9            =9            =9            =9 >       70:             4F#            4A           4c#            4a >       71:             8EL          8G#L            4d            4b >       72:             8DJ          8F#J             .             . >       73:             4C#           8EL            4e          4cc# >       74:               .           8eJ             .             . >       75:             4BB            4d          8f#L           4dd >       76:               .             .          8g#J             . >       77:             =10           =10           =10           =10 >       78:            8AAL          8c#L            2a           4ee >       79:             8BB            8d             .             . >       80:             8C#            8e             .          8ddL >       81:             8DJ          8f#J             .         8cc#J >       82:             4E;          4g#;           4e;           4b; >       83:             4BB           4f#            4b           4dd >       84:             =11           =11           =11           =11 >       85:            8F#L          8f#L           8aL          4cc# >       86:            8G#J           8eJ          8g#J             . >       87:              4A           8dL           4f#            4b >       88:               .          8c#J             .             . >       89:            8G#L            4B            4e          4.ee >       90:             8EJ             .             .             . >       91:             [4A          8c#L          8f#L             . >       92:               .           8dJ          8g#J           8dd >       93:             =12           =12           =12           =12 >       94:            8AL]           4.e            2a         8cc#L >       95:            8G#J             .             .            8b >       96:             4F#             .             .            8a >       97:               .            8d             .           8bJ >       98:             8EL          8c#L            4a          4cc# >       99:             8DJ          8f#J             .             . >      100:              4E           8BL           4g#            4b >      101:               .          16eL             .             . >      102:               .         16dJJ             .             . >      103:             =13           =13           =13           =13 >      104:           2.AA;         2.c#;          2.e;          2.a; >      105:              ==            ==            ==            == >      106:              *-            *-            *-            *- >      107:  !!!hum2abc: -Q '' >      108:  !!!title: @{PC#}. @{OTL@@DE} >      109:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >      110:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >      111:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >      112:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >      113:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >      114:  !!!EED:  Craig Stuart Sapp >      115:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################ >    ############################ vvv chor002.krn vvv ############################ >        1:  !!!COM: Bach, Johann Sebastian >        2:  !!!CDT: 1685/02/21/-1750/07/28/ >        3:  !!!OTL@@DE: Aus tiefer Not schrei ich zu dir >        4:  !!!SCT: BWV 38/6 >        5:  !!!PC#: 10 >        6:  !!!AGN: chorale >       92:          **kern        **kern        **kern        **kern >       93:          *ICvox        *ICvox        *ICvox        *ICvox >       94:          *Ibass       *Itenor        *Ialto       *Isoprn >       95:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       96:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       97:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       98:             *>A           *>A           *>A           *>A >       99:         *clefF4      *clefGv2       *clefG2       *clefG2 >      100:            *k[]          *k[]          *k[]          *k[] >        7:             *a:           *a:           *a:           *a: >        8:           *M4/4         *M4/4         *M4/4         *M4/4 >        9:         *met(c)       *met(c)       *met(c)       *met(c) >       10:          *MM100        *MM100        *MM100        *MM100 >       11:             =1-           =1-           =1-           =1- >       12:              2D           2G#            2e            2b >       13:              4C            4A            4e            4e >       14:             4BB            4d           4g#            4b >       15:              =2            =2            =2            =2 >       16:             4AA            4e            4a           4cc >       17:             4BB            4d         8gnXL           8bL >       18:               .             .          8f#J           8aJ >       19:             8CL           8eL            4e            4g >       20:            8BBJ           8dJ             .             . >       21:             4AA            4c           4f#            4a >       22:              =3            =3            =3            =3 >       23:             2E;           2B;          2g#;           2b; >       24:              2E            2e           2g#            2b >       25:              =4            =4            =4            =4 >       26:              4A            4e            4a           4cc >       27:             8GL            4f            4b           4dd >       28:             8FJ             .             .             . >       29:              4E            4g           4cc          8ccL >       30:               .             .             .           8bJ >       31:              4F            4c            4f            4a >    32-91:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor002.krn ^^^ ############################ >                         (***four global comments truncated due to screen size***) >     >       humdrumR corpus of nine files. >        Data fields:  >               *Token :: character chorales[[ , -4]] >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:          **kern        **kern        **kern >       127:          *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto >       129:         *I\"Bass      *I\"Tenor       *I\"Alto >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G: >         9:             *F:             *             * >        10:           *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100 >        12:             4GG            4B            4d >        13:              =1            =1            =1 >        14:              4G            4B            4d >        15:              4E           8cL            4e >        16:               .           8BJ             . >        17:             4F#            4A            4d >        18:              =2            =2            =2 >        19:              4G            4G            2d >        20:              4D           4F#             . >        21:               .             .             . >        22:              4E            4G            4B >        23:              =3            =3            =3 >        24:              4C           8cL           8eL >        25:               .           8BJ            8d >        26:            8BBL            4c            8e >        27:            8AAJ             .          8f#J >        28:             4GG            4d            4g >        29:              =4            =4            =4 >        30:             2D;           2d;          2f#; >        31:             4GG            4d            4g >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:            2AA;           2c;           2e; >        53:              2A            2e            2a >        54:              =9            =9            =9 >        55:              4E            4e            4g >        56:             8DL            4e            4g >        57:             8CJ             .             . >        58:             4BB            4d           8gL >        59:               .             .           8fJ >        60:              4C            4c            4e >        61:             =10           =10           =10 >        62:              4D           8F#            4d >        63:               .            4G             . >        64:              4D             .            4c >        65:               .           8F#             . >        66:            2GG;           2G;           2B; >        67:             =11           =11           =11 >        68:              2C            2G            2e >        69:             4AA            4A            4e >        70:              4E           4G#           8eL >        71:               .             .           8dJ >        72:             =12           =12           =12 >        73:              4F            4A            4c >        74:              4C            4G            4c >        75:            4BB-            4G           [2d >        76:             4AA            4A             . >        77:             =13           =13           =13 >        78:            4GG#            4B           4d] >        79:             4AA            4A            4c >        80:            2EE;         2G#X;           2B; >        81:              ==            ==            == >        82:              *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >               *Token :: character chorales[[-1:-20, ]] >    ############################ vvv chor001.krn vvv ############################# >       126:    **kern  **kern  **kern  **kern >       127:       4GG      4B      4d      4g >       128:        =1      =1      =1      =1 >       129:        4G      4B      4d      2g >       130:        4E     8cL      4e       . >       131:         .     8BJ       .       . >       132:       4F#      4A      4d     4dd >       133:        =2      =2      =2      =2 >       134:        4G      4G      2d     4.b >         8:        4D     4F#       .       . >        21:         .       .       .      8a >        22:        4E      4G      4B      4g >        23:        =3      =3      =3      =3 >        24:        4C     8cL     8eL     4.g >        25:         .     8BJ      8d       . >        26:      8BBL      4c      8e       . >        27:      8AAJ       .    8f#J      8a >        28:       4GG      4d      4g      4b >        29:        =4      =4      =4      =4 >        30:       2D;     2d;    2f#;     2a; >        31:       4GG      4d      4g      4b >        32:        =5      =5      =5      =5 >        33:      4FF#      4A      4d     2dd >        34:       4GG      4B      4e       . >        35:       4AA      4c     4f#     4cc >        36:        =6      =6      =6      =6 >        37:       4BB      4d      2g      4b >        38:        4C      4e       .      2a >        39:        4D     8dL     4f#       . >        40:         .     8cJ       .       . >        41:        =7      =7      =7      =7 >        42:      2GG;     2B;     2d;     2g; >        43:      =:|!    =:|!    =:|!    =:|! >        44:       *>B     *>B     *>B     *>B >        45:       4GG      4d     [4g      4b >        46:        =8      =8      =8      =8 >        47:       4GG      4d    8gL]      4b >        48:         .       .    8f#J       . >        49:       4AA      4c     8eL     4cc >        50:         .       .    8f#J       . >    51-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >     92-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:      2AA;     2c;     2e;     2a; >        53:        2A      2e      2a     2cc >        54:        =9      =9      =9      =9 >        55:        4E      4e      4g      4b >        56:       8DL      4e      4g     4cc >        57:       8CJ       .       .       . >        58:       4BB      4d     8gL     4dd >        59:         .       .     8fJ       . >        60:        4C      4c      4e      4g >        61:       =10     =10     =10     =10 >        62:        4D     8F#      4d      4b >        63:         .      4G       .       . >        64:        4D       .      4c      4a >        65:         .     8F#       .       . >        66:      2GG;     2G;     2B;     2g; >        67:       =11     =11     =11     =11 >        68:        2C      2G      2e      2g >        69:       4AA      4A      4e     4cc >        70:        4E     4G#     8eL      4b >        71:         .       .     8dJ       . >        72:       =12     =12     =12     =12 >        73:        4F      4A      4c      4a >        74:        4C      4G      4c      4e >        75:      4BB-      4G     [2d      4g >        76:       4AA      4A       .      4f >        77:       =13     =13     =13     =13 >        78:      4GG#      4B     4d]     1e; >        79:       4AA      4A      4c       . >        80:      2EE;   2G#X;     2B;       . >        81:        ==      ==      ==      == >        82:        *-      *-      *-      *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >               *Token :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Filtering.html","id":"general-filtering","dir":"Articles","previous_headings":"","what":"General Filtering","title":"Filtering Humdrum Data","text":"indexing commands (previous section) get far. want precise filtering, use subset nethod humdrumR data. Subset.humdrumR works exactly like within.humdrumR. However, “” command give must evaluate logical vector (TRUE FALSE) length input. (get error otherwise.) Subset.humdrumR take logical result filter data matches FALSE. can reproduce functionality [] [[]] indexing operators (previous section) using subset: , now can filter based arbitrary criteria want. example, extract tokens odd numbered spines odd numbered records even numbered spines even numbered records. ’ll use Rs modulo command %% separate even odd numbers (odd %% 2 == 1, even %% 2 == 0). ever want ? Probably . However, returning flats, study, lets grab flat notes: Woh, ’re seeing B flats files! , know lot flats fourth file (losing files flats):","code":"subset(chorales, Spine == 1) >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:          **kern        **kern        **kern        **kern >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:             4GG             .             .             . >        13:              =1            =1            =1            =1 >        14:              4G             .             .             . >        15:              4E             .             .             . >        16:               .             .             .             . >        17:             4F#             .             .             . >        18:              =2            =2            =2            =2 >        19:              4G             .             .             . >        20:              4D             .             .             . >        21:               .             .             .             . >        22:              4E             .             .             . >        23:              =3            =3            =3            =3 >        24:              4C             .             .             . >        25:               .             .             .             . >        26:            8BBL             .             .             . >        27:            8AAJ             .             .             . >        28:             4GG             .             .             . >        29:              =4            =4            =4            =4 >        30:             2D;             .             .             . >        31:             4GG             .             .             . >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:            2AA;             .             .             . >        53:              2A             .             .             . >        54:              =9            =9            =9            =9 >        55:              4E             .             .             . >        56:             8DL             .             .             . >        57:             8CJ             .             .             . >        58:             4BB             .             .             . >        59:               .             .             .             . >        60:              4C             .             .             . >        61:             =10           =10           =10           =10 >        62:              4D             .             .             . >        63:               .             .             .             . >        64:              4D             .             .             . >        65:               .             .             .             . >        66:            2GG;             .             .             . >        67:             =11           =11           =11           =11 >        68:              2C             .             .             . >        69:             4AA             .             .             . >        70:              4E             .             .             . >        71:               .             .             .             . >        72:             =12           =12           =12           =12 >        73:              4F             .             .             . >        74:              4C             .             .             . >        75:            4BB-             .             .             . >        76:             4AA             .             .             . >        77:             =13           =13           =13           =13 >        78:            4GG#             .             .             . >        79:             4AA             .             .             . >        80:            2EE;             .             .             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >               *Token :: character subset(chorales, (Record %% 2 == 0) == (Spine %% 2 == 0) ) >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:          **kern        **kern        **kern        **kern >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:             4GG             .            4d             . >        13:              =1            =1            =1            =1 >        14:              4G             .            4d             . >        15:               .           8cL             .             . >        16:               .             .             .             . >        17:               .            4A             .           4dd >        18:              =2            =2            =2            =2 >        19:               .            4G             .           4.b >        20:              4D             .             .             . >        21:               .             .             .            8a >        22:              4E             .            4B             . >        23:              =3            =3            =3            =3 >        24:              4C             .           8eL             . >        25:               .           8BJ             .             . >        26:            8BBL             .            8e             . >        27:               .             .             .            8a >        28:             4GG             .            4g             . >        29:              =4            =4            =4            =4 >        30:             2D;             .          2f#;             . >        31:               .            4d             .            4b >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:            2AA;             .           2e;             . >        53:               .            2e             .           2cc >        54:              =9            =9            =9            =9 >        55:               .            4e             .            4b >        56:             8DL             .            4g             . >        57:               .             .             .             . >        58:             4BB             .           8gL             . >        59:               .             .             .             . >        60:              4C             .            4e             . >        61:             =10           =10           =10           =10 >        62:              4D             .            4d             . >        63:               .            4G             .             . >        64:              4D             .            4c             . >        65:               .           8F#             .             . >        66:            2GG;             .           2B;             . >        67:             =11           =11           =11           =11 >        68:              2C             .            2e             . >        69:               .            4A             .           4cc >        70:              4E             .           8eL             . >        71:               .             .             .             . >        72:             =12           =12           =12           =12 >        73:               .            4A             .            4a >        74:              4C             .            4c             . >        75:               .            4G             .            4g >        76:             4AA             .             .             . >        77:             =13           =13           =13           =13 >        78:            4GG#             .           4d]             . >        79:               .            4A             .             . >        80:            2EE;             .           2B;             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >               *Token :: character subset(chorales, Token %~% '-') >    ############################ vvv chor003.krn vvv ############################ >          1:  !!!COM: Bach, Johann Sebastian >          2:  !!!CDT: 1685/02/21/-1750/07/28/ >          3:  !!!OTL@@DE: Ach Gott, vom Himmel sieh darein >          4:  !!!OTL@EN: Oh God, look down from Heaven >          5:  !!!OPR: Cantata BWV 153: Schau, lieber Gott, wie meine Feind >          6:  !!!SCT: BWV 153/1 >          7:  !!!PC#: 3 >          8:  !!!AGN: chorale >        101:          **kern        **kern        **kern        **kern >        102:          *ICvox        *ICvox        *ICvox        *ICvox >        103:          *Ibass       *Itenor        *Ialto       *Isoprn >        104:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >        105:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >        106:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >        107:             *>A           *>A           *>A           *>A >        108:         *clefF4      *clefGv2       *clefG2       *clefG2 >        109:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >        110:             *a:           *a:           *a:           *a: >          9:         !dorian       !dorian       !dorian       !dorian >         10:           *M4/4         *M4/4         *M4/4         *M4/4 >         11:         *met(c)       *met(c)       *met(c)       *met(c) >         12:          *MM100        *MM100        *MM100        *MM100 >      13-43:        =====1-4      =====1-4      =====1-4      =====1-4 >         44:             *>B           *>B           *>B           *>B >      45-81:        =====5-9      =====5-9      =====5-9      =====5-9 >         82:               .           4B-             .             . >         83:               .             .             .             . >         84:             =10           =10           =10           =10 >         85:               .             .             .             . >         86:               .             .             .             . >         87:               .             .             .             . >         88:               .             .             .             . >         89:              ==            ==            ==            == >         90:              *-            *-            *-            *- >         91:  !!!hum2abc: -Q '' >         92:  !!!title: @{PC#}. @{OTL@@DE} >         93:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastia*** >         94:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und *** >         95:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 3*** >         96:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., *** >     97-100:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor003.krn ^^^ ############################ >     >           (3 more files...) >     >    ############################ vvv chor010.krn vvv ############################ >       1-17:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >         18:               .             .             .             . >         19:               .             .             .             . >         20:               .             .             .             . >         21:               .             .             .             . >         22:              =3            =3            =3            =3 >         23:               .             .             .             . >         24:               .             .             .             . >         25:              =4            =4            =4            =4 >         26:               .             .             .             . >         27:               .             .             .             . >         28:               .             .             .             . >         29:               .             .             .             . >         30:               .             .             .             . >         31:               .             .             .             . >         32:              =5            =5            =5            =5 >         33:               .             .             .             . >         34:               .             .             .             . >         35:               .             .             .             . >         36:               .             .             .             . >         37:               .             .             .             . >         38:           =6:|!         =6:|!         =6:|!         =6:|! >         39:             *>B           *>B           *>B           *>B >      40-74:      ======7-12    ======7-12    ======7-12    ======7-12 >         75:            4BB-             .             .             . >         76:               .             .             .             . >         77:             =13           =13           =13           =13 >         78:               .             .             .             . >         79:               .             .             .             . >         80:               .             .             .             . >         81:              ==            ==            ==            == >         82:              *-            *-            *-            *- >         83:  !!!hum2abc: -Q '' >         84:  !!!title: @{PC#}. @{OTL@@DE} >         85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastia*** >         86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und *** >         87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 3*** >         88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., *** >         89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >         90:  !!!EED:  Craig Stuart Sapp >         91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################ >                         (***nine global comments truncated due to screen size***) >     >       humdrumR corpus of five files. >        Data fields:  >               *Token :: character subset(chorales, Token %~% '-')[4] >    ############################ vvv chor008.krn vvv ############################ >        1:  !!!COM: Bach, Johann Sebastian >        2:  !!!CDT: 1685/02/21/-1750/07/28/ >        3:  !!!OTL@@DE: Freuet euch, ihr Christen alle >        4:  !!!SCT: BWV 40/8 >        5:  !!!PC#: 8 >        6:  !!!AGN: chorale >      163:        **kern      **kern      **kern      **kern >      164:        *ICvox      *ICvox      *ICvox      *ICvox >      165:        *Ibass     *Itenor      *Ialto     *Isoprn >      166:       *I\"Bass    *I\"Tenor     *I\"Alto  *I\"Soprano >      167:       *clefF4    *clefGv2     *clefG2     *clefG2 >      168:    *k[b-e-a-]  *k[b-e-a-]  *k[b-e-a-]  *k[b-e-a-] >      169:        *f:dor      *f:dor      *f:dor      *f:dor >      170:         *M4/4       *M4/4       *M4/4       *M4/4 >      171:       *met(c)     *met(c)     *met(c)     *met(c) >        7:        *MM100      *MM100      *MM100      *MM100 >        8:           =1-         =1-         =1-         =1- >        9:             .         4A-           .           . >       10:           4E-           .           .           . >       11:           4D-         4B-           .         4b- >       12:             .           .           .           . >       13:             .           .           .         4a- >       14:            =2          =2          =2          =2 >       15:          4BB-         4d-           .           . >       16:             .           .           .           . >       17:             .           .           .           . >       18:             .        8B-J           .           . >       19:             .         4A-           .           . >       20:             .        4A-;           .           . >       21:            =3          =3          =3          =3 >       22:             .           .           .        4.a- >       23:          8E-L           .           .           . >       24:          8D-J         8B-           .         8b- >       25:             .         4e-         4a-           . >       26:         8BB-J           .           .           . >       27:          4AA-         4e-         4a-           . >       28:            =4          =4          =4          =4 >       29:           4D-           .        8a-L        4.b- >       30:             .           .           .           . >       31:           4E-        8e-L           .           . >       32:             .       8d-XJ           .         8a- >       33:         2AA-;           .        2e-;        2a-; >       34:            =5          =5          =5          =5 >       35:           4D-         4d-           .         4a- >       36:             .         4d-           .         4b- >       37:         8BB-J           .           .           . >       38:             .           .           .         4b- >       39:           4D-           .           .         4a- >       40:             .        8A-J           .           . >       41:            =6          =6          =6          =6 >       42:          4BB-         4d-           .           . >       43:             .           .           .           . >       44:             .        8B-J           .           . >       45:             .        2A-;           .           . >       46:            =7          =7          =7          =7 >       47:             .           .           .           . >       48:             .        8B-J           .           . >       49:             .           .           .           . >       50:             .           .           .           . >       51:         8BB-L         4B-           .        4dd- >       52:             .           .           .           . >       53:           8D-         4B-           .        4dd- >       54:         8BB-J           .           .           . >       55:            =8          =8          =8          =8 >       56:          8E-L         4B-           .         4b- >       57:             .           .       8a-XJ           . >       58:             .         4e-        8b-L         4b- >       59:          8E-J           .           .           . >       60:           4A-         4e-         4a-           . >       61:          4A-;        4e-;        4a-;           . >       62:            =9          =9          =9          =9 >       63:          8D-L         4d-           .         4a- >       64:           8E-           .           .           . >       65:             .         4d-           .         4a- >       66:          8D-J           .           .           . >       67:         8BB-L           .         4b-        4dd- >       68:             .           .           .           . >       69:           8D-           .         4b-        4dd- >       70:         8BB-J           .           .           . >       71:           =10         =10         =10         =10 >       72:          8E-L         4g-         4b-           . >       73:             .           .           .           . >       74:             .           .           .           . >       75:             .        8e-J           .           . >       76:         2BB-;        2d-;           .        2b-; >       77:           =11         =11         =11         =11 >       78:           4B-           .           .           . >       79:           4A-           .           .        4a-X >       80:             .         4B-           .         4b- >       81:             .           .           .           . >       82:             .           .           .         4a- >       83:           =12         =12         =12         =12 >       84:          4BB-         4d-           .           . >       85:             .           .           .           . >       86:             .        8B-J           .           . >       87:             .        2A-;           .           . >       88:           =13         =13         =13         =13 >       89:             .           .         4a-           . >       90:             .           .           .           . >       91:          8AA-           .         4a-           . >       92:         8BB-J           .           .           . >       93:             .           .           .       4ee-X >       94:             .           .           .           . >       95:           8E-           .           .        4ee- >       96:             .           .           .           . >       97:           =14         =14         =14         =14 >       98:             .           .           .           . >       99:             .           .        8a-J           . >      100:             .           .           .           . >      101:             .           .           .           . >      102:             .           .           .           . >      103:             .           .           .           . >      104:           =15         =15         =15         =15 >      105:             .           .           .           . >      106:           8E-           .           .           . >      107:           8D-           .           .           . >      108:             .           .           .           . >      109:          4BB-         4B-           .        4dd- >      110:             .           .           .           . >      111:             .         4E-         4a-           . >      112:          8D-J           .           .           . >      113:           =16         =16         =16         =16 >      114:           4E-        4.e-        8a-L        4.b- >      115:             .           .           .           . >      116:           4E-           .           .           . >      117:             .         8d-           .         8a- >      118:          4AA-           .         4e-         4a- >      119:         4AA-;           .        4e-;        4a-; >      120:           =17         =17         =17         =17 >      121:          8D-L         4d-           .         4a- >      122:           8E-           .           .           . >      123:           8D-         4d-           .         4a- >      124:             .           .           .           . >      125:         8BB-L           .         4b-        4dd- >      126:             .           .           .           . >      127:           8D-           .         4b-        4dd- >      128:         8BB-J           .           .           . >      129:           =18         =18         =18         =18 >      130:          8E-L         4e-           .         4b- >      131:             .           .           .           . >      132:           8E-         4e-           .         4b- >      133:          8D-J           .           .           . >      134:             .           .           .        4ee- >      135:           8D-           .           .           . >      136:           8E-           .           .        4ee- >      137:             .           .           .           . >      138:           =19         =19         =19         =19 >      139:             .           .        8a-L           . >      140:             .           .           .           . >      141:             .           .        8a-L           . >      142:             .           .        8b-J           . >      143:          8A-L           .           .           . >      144:             .           .           .           . >      145:           8A-           .        8b-L           . >      146:          8B-J           .        8a-J           . >      147:           =20         =20         =20         =20 >      148:             .           .           .           . >      149:             .           .           .           . >      150:             .           .           .           . >      151:             .           .           .           . >      152:            ==          ==          ==          == >      153:            *-          *-          *-          *- >      154:  !!!hum2abc: -Q '' >      155:  !!!title: @{PC#}. @{OTL@@DE} >      156:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >      157:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >      158:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >      159:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >      160:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >      161:  !!!EED:  Craig Stuart Sapp >      162:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor008.krn ^^^ ############################ >                         (***four global comments truncated due to screen size***) >        Data fields:  >               *Token :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Filtering.html","id":"subseting-by-group","dir":"Articles","previous_headings":"General Filtering","what":"Subseting by Group","title":"Filtering Humdrum Data","text":"Since subset.humdrumR makes use [within.humdrumR], can use within.humdrumR’s special options, including group . can useful way get context searches. example, let’s say want find flats , want see whole bar music contains flat. can grouping Bar field (File field). ’ll want say “within bar, flats, return TRUE whole bar, else return FALSE whole bar.” can use function get match, fill option copy result whole bar. enough context ? maybe group bars even-odd pairs:","code":"subset(chorales, fill = any(Token %~% '-'), by = list(File, Bar)) >    ############################ vvv chor003.krn vvv ############################ >          1:  !!!COM: Bach, Johann Sebastian >          2:  !!!CDT: 1685/02/21/-1750/07/28/ >          3:  !!!OTL@@DE: Ach Gott, vom Himmel sieh darein >          4:  !!!OTL@EN: Oh God, look down from Heaven >          5:  !!!OPR: Cantata BWV 153: Schau, lieber Gott, wie meine Feind >          6:  !!!SCT: BWV 153/1 >          7:  !!!PC#: 3 >          8:  !!!AGN: chorale >        101:          **kern        **kern        **kern        **kern >        102:          *ICvox        *ICvox        *ICvox        *ICvox >        103:          *Ibass       *Itenor        *Ialto       *Isoprn >        104:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >        105:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >        106:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >        107:             *>A           *>A           *>A           *>A >        108:         *clefF4      *clefGv2       *clefG2       *clefG2 >        109:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >        110:             *a:           *a:           *a:           *a: >          9:         !dorian       !dorian       !dorian       !dorian >         10:           *M4/4         *M4/4         *M4/4         *M4/4 >         11:         *met(c)       *met(c)       *met(c)       *met(c) >         12:          *MM100        *MM100        *MM100        *MM100 >      13-43:        =====1-4      =====1-4      =====1-4      =====1-4 >         44:             *>B           *>B           *>B           *>B >      45-76:        =====5-9      =====5-9      =====5-9      =====5-9 >         77:             4G#            4B            4e           4ee >         78:             8AL            4A            4e           4cc >         79:             8GJ             .             .             . >         80:             8FL            4A            4f           4dd >         81:             8EJ             .             .             . >         82:             8DL           4B-            4g           4ee >         83:            8C#J             .             .             . >         84:             =10           =10           =10           =10 >         85:               .             .             .             . >         86:               .             .             .             . >         87:               .             .             .             . >         88:               .             .             .             . >         89:              ==            ==            ==            == >         90:              *-            *-            *-            *- >         91:  !!!hum2abc: -Q '' >     92-100:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor003.krn ^^^ ############################ >     >           (3 more files...) >     >    ############################ vvv chor010.krn vvv ############################ >       1-19:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >         20:               .             .             .             . >         21:               .             .             .             . >         22:              =3            =3            =3            =3 >         23:               .             .             .             . >         24:               .             .             .             . >         25:              =4            =4            =4            =4 >         26:               .             .             .             . >         27:               .             .             .             . >         28:               .             .             .             . >         29:               .             .             .             . >         30:               .             .             .             . >         31:               .             .             .             . >         32:              =5            =5            =5            =5 >         33:               .             .             .             . >         34:               .             .             .             . >         35:               .             .             .             . >         36:               .             .             .             . >         37:               .             .             .             . >         38:           =6:|!         =6:|!         =6:|!         =6:|! >         39:             *>B           *>B           *>B           *>B >      40-72:      ======7-12    ======7-12    ======7-12    ======7-12 >         73:              4F            4A            4c            4a >         74:              4C            4G            4c            4e >         75:            4BB-            4G           [2d            4g >         76:             4AA            4A             .            4f >         77:             =13           =13           =13           =13 >         78:               .             .             .             . >         79:               .             .             .             . >         80:               .             .             .             . >         81:              ==            ==            ==            == >         82:              *-            *-            *-            *- >         83:  !!!hum2abc: -Q '' >         84:  !!!title: @{PC#}. @{OTL@@DE} >         85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastia*** >         86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und *** >         87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 3*** >         88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., *** >         89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >         90:  !!!EED:  Craig Stuart Sapp >         91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################ >                         (***five global comments truncated due to screen size***) >     >       humdrumR corpus of five files. >        Data fields:  >               *Token :: character subset(chorales, fill = any(Token %~% '-'), by = list(File, floor(Bar  / 2))) >    ############################ vvv chor003.krn vvv ############################ >          1:  !!!COM: Bach, Johann Sebastian >          2:  !!!CDT: 1685/02/21/-1750/07/28/ >          3:  !!!OTL@@DE: Ach Gott, vom Himmel sieh darein >          4:  !!!OTL@EN: Oh God, look down from Heaven >          5:  !!!OPR: Cantata BWV 153: Schau, lieber Gott, wie meine Feind >          6:  !!!SCT: BWV 153/1 >          7:  !!!PC#: 3 >          8:  !!!AGN: chorale >        101:          **kern        **kern        **kern        **kern >        102:          *ICvox        *ICvox        *ICvox        *ICvox >        103:          *Ibass       *Itenor        *Ialto       *Isoprn >        104:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >        105:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >        106:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >        107:             *>A           *>A           *>A           *>A >        108:         *clefF4      *clefGv2       *clefG2       *clefG2 >        109:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >        110:             *a:           *a:           *a:           *a: >          9:         !dorian       !dorian       !dorian       !dorian >         10:           *M4/4         *M4/4         *M4/4         *M4/4 >         11:         *met(c)       *met(c)       *met(c)       *met(c) >         12:          *MM100        *MM100        *MM100        *MM100 >      13-43:        =====1-4      =====1-4      =====1-4      =====1-4 >         44:             *>B           *>B           *>B           *>B >      45-76:        =====5-9      =====5-9      =====5-9      =====5-9 >         77:             4G#            4B            4e           4ee >         78:             8AL            4A            4e           4cc >         79:             8GJ             .             .             . >         80:             8FL            4A            4f           4dd >         81:             8EJ             .             .             . >         82:             8DL           4B-            4g           4ee >         83:            8C#J             .             .             . >         84:             =10           =10           =10           =10 >         85:              4D           8AL         8f#XL           4dd >         86:               .           8EJ          8g#J             . >         87:             4D#          4F#X            4a           4cc >         88:             4E;          4G#;           4e;           4b; >         89:              ==            ==            ==            == >         90:              *-            *-            *-            *- >         91:  !!!hum2abc: -Q '' >     92-100:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor003.krn ^^^ ############################ >     >           (3 more files...) >     >    ############################ vvv chor010.krn vvv ############################ >       1-19:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >         20:               .             .             .             . >         21:               .             .             .             . >         22:              =3            =3            =3            =3 >         23:               .             .             .             . >         24:               .             .             .             . >         25:              =4            =4            =4            =4 >         26:               .             .             .             . >         27:               .             .             .             . >         28:               .             .             .             . >         29:               .             .             .             . >         30:               .             .             .             . >         31:               .             .             .             . >         32:              =5            =5            =5            =5 >         33:               .             .             .             . >         34:               .             .             .             . >         35:               .             .             .             . >         36:               .             .             .             . >         37:               .             .             .             . >         38:           =6:|!         =6:|!         =6:|!         =6:|! >         39:             *>B           *>B           *>B           *>B >      40-72:      ======7-12    ======7-12    ======7-12    ======7-12 >         73:              4F            4A            4c            4a >         74:              4C            4G            4c            4e >         75:            4BB-            4G           [2d            4g >         76:             4AA            4A             .            4f >         77:             =13           =13           =13           =13 >         78:            4GG#            4B           4d]           1e; >         79:             4AA            4A            4c             . >         80:            2EE;         2G#X;           2B;             . >         81:              ==            ==            ==            == >         82:              *-            *-            *-            *- >         83:  !!!hum2abc: -Q '' >         84:  !!!title: @{PC#}. @{OTL@@DE} >         85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastia*** >         86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und *** >         87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 3*** >         88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., *** >         89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >         90:  !!!EED:  Craig Stuart Sapp >         91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################ >                         (***five global comments truncated due to screen size***) >     >       humdrumR corpus of five files. >        Data fields:  >               *Token :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Filtering.html","id":"removing-vs-filtering","dir":"Articles","previous_headings":"General Filtering","what":"Removing vs Filtering","title":"Filtering Humdrum Data","text":"probably noticed , unlike indexing commands [] [[]], subset doesn’t seem actually remove data filter . say still four spines, spines 2–4 just emptied. correct. subset actually mark filtered data Filter field humdrum table. humdrumR ignores data automatically. ? several reasons: clear example [[ , j]] indexing flats (): simply removed spines flats hard tell spine result. Many filters break humdrum syntax data simply removed. removed tokens don’t contain flats, result humdrum data holes . possible undo filters, using clearFilter command. (Try .) ’ve done filtering subset, want get rid empty parts data, can using commands removeEmptyFiles, removeEmptySpines, removeEmptyRecords, removeEmptyStops, removeEmptyPaths. using commands, make sure 1) explicitely want remove 2) humdrum syntax broken, whole records/spines/paths/files removed. spines example: records:","code":"subset(chorales, Spine == 1) >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:          **kern        **kern        **kern        **kern >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:             4GG             .             .             . >        13:              =1            =1            =1            =1 >        14:              4G             .             .             . >        15:              4E             .             .             . >        16:               .             .             .             . >        17:             4F#             .             .             . >        18:              =2            =2            =2            =2 >        19:              4G             .             .             . >        20:              4D             .             .             . >        21:               .             .             .             . >        22:              4E             .             .             . >        23:              =3            =3            =3            =3 >        24:              4C             .             .             . >        25:               .             .             .             . >        26:            8BBL             .             .             . >        27:            8AAJ             .             .             . >        28:             4GG             .             .             . >        29:              =4            =4            =4            =4 >        30:             2D;             .             .             . >        31:             4GG             .             .             . >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:            2AA;             .             .             . >        53:              2A             .             .             . >        54:              =9            =9            =9            =9 >        55:              4E             .             .             . >        56:             8DL             .             .             . >        57:             8CJ             .             .             . >        58:             4BB             .             .             . >        59:               .             .             .             . >        60:              4C             .             .             . >        61:             =10           =10           =10           =10 >        62:              4D             .             .             . >        63:               .             .             .             . >        64:              4D             .             .             . >        65:               .             .             .             . >        66:            2GG;             .             .             . >        67:             =11           =11           =11           =11 >        68:              2C             .             .             . >        69:             4AA             .             .             . >        70:              4E             .             .             . >        71:               .             .             .             . >        72:             =12           =12           =12           =12 >        73:              4F             .             .             . >        74:              4C             .             .             . >        75:            4BB-             .             .             . >        76:             4AA             .             .             . >        77:             =13           =13           =13           =13 >        78:            4GG#             .             .             . >        79:             4AA             .             .             . >        80:            2EE;             .             .             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >               *Token :: character subset(chorales, Spine == 1) |> removeEmptySpines() >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:          **kern >       127:          *ICvox >       128:          *Ibass >       129:         *I\"Bass >       130:       *>[A,A,B] >       131:    *>norep[A,B] >       132:             *>A >       133:         *clefF4 >       134:          *k[f#] >         8:             *G: >         9:             *F: >        10:           *M3/4 >        11:          *MM100 >        12:             4GG >        13:              =1 >        14:              4G >        15:              4E >        16:               . >        17:             4F# >        18:              =2 >        19:              4G >        20:              4D >        21:               . >        22:              4E >        23:              =3 >        24:              4C >        25:               . >        26:            8BBL >        27:            8AAJ >        28:             4GG >        29:              =4 >        30:             2D; >        31:             4GG >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:            2AA; >        53:              2A >        54:              =9 >        55:              4E >        56:             8DL >        57:             8CJ >        58:             4BB >        59:               . >        60:              4C >        61:             =10 >        62:              4D >        63:               . >        64:              4D >        65:               . >        66:            2GG; >        67:             =11 >        68:              2C >        69:             4AA >        70:              4E >        71:               . >        72:             =12 >        73:              4F >        74:              4C >        75:            4BB- >        76:             4AA >        77:             =13 >        78:            4GG# >        79:             4AA >        80:            2EE; >        81:              == >        82:              *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >               *Token :: character subset(chorales, Record %% 2 == 0) |> removeEmptyRecords() >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:          **kern        **kern        **kern        **kern >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:              =1            =1            =1            =1 >        13:              4E           8cL            4e             . >        14:             4F#            4A            4d           4dd >        15:              =2            =2            =2            =2 >        16:              4G            4G            2d           4.b >        17:               .             .             .            8a >        18:              =3            =3            =3            =3 >        19:               .           8BJ            8d             . >        20:            8AAJ             .          8f#J            8a >        22:              =4            =4            =4            =4 >        24:             4GG            4d            4g            4b >        26:              =5            =5            =5            =5 >        27:            4FF#            4A            4d           2dd >        28:             4AA            4c           4f#           4cc >        30:              =6            =6            =6            =6 >        32:             4BB            4d            2g            4b >        34:              4D           8dL           4f#             . >        36:              =7            =7            =7            =7 >        38:            =:|!          =:|!          =:|!          =:|! >        40:             *>B           *>B           *>B           *>B >    41-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-24:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        26:              =5            =5            =5            =5 >        28:              4C           8cL            4e            4g >        30:              4D            4A           8dL            4f >        31:             2E;          2G#;           2B;           2e; >        32:           =6:|!         =6:|!         =6:|!         =6:|! >        34:             *>B           *>B           *>B           *>B >        36:              4B            4B            4d          4gnX >        38:               .             .          8f#J             . >        40:              =7            =7            =7            =7 >        41:              4G            4d            4g            4b >        42:             8EJ           8eJ             .             . >        44:               .             .           8aJ          8ccJ >        46:              =8            =8            =8            =8 >        47:              2A            2e            2a           2cc >        48:              =9            =9            =9            =9 >        50:              4E            4e            4g            4b >        52:             8CJ             .             .             . >        53:               .             .           8fJ             . >        54:             =10           =10           =10           =10 >        56:               .            4G             .             . >        58:               .           8F#             .             . >        60:             =11           =11           =11           =11 >        62:             4AA            4A            4e           4cc >        63:               .             .           8dJ             . >        64:             =12           =12           =12           =12 >        66:              4F            4A            4c            4a >        68:            4BB-            4G           [2d            4g >        70:             =13           =13           =13           =13 >        72:             4AA            4A            4c             . >        74:              ==            ==            ==            == >        76:              *-            *-            *-            *- >        78:  !!!hum2abc: -Q '' >        80:  !!!title: @{PC#}. @{OTL@@DE} >        81:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        82:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        84:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        86:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        88:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >               *Token :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/GettingStarted.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick Start","title":"Getting started with humdrumR","text":"Let’s just dive right ! First, make sure humdrumR installed: install humdrumR. Open R session load humdrumR library using command library(humdrumR)—now ready rock! HumdrumR comes packaged small number humdrum data files just play around . files stored directory computer installed humdrumR, subfolder called “HumdrumData”. can move R session folder using R’s “set working directory command”: setwd(humdrumRroot). ’re humdrumR directory, can use base R dir function see humdrum data available . looks like five folders humdrum data available . Using dir , can look inside one: let’s start ‘BachChorales’ folder. ten files folder, named “chor001.krn”, “chor002.krn”, etc. simple plain humdrum text files, using ’**kern’ interpretation represent ten chorales J.S. Bach. Take minute find files computer’s finder/exporer open simple text editor. One core philosophies humdrumR maintain direct, transparent relationship symbolic data—always take time look data! can also within Rstudio’s “Files” pane—fact, Rstudio make things extra easy can (within Files pane) click “” > “Go Working Directory” quickly find files.","code":"library(humdrumR)  setwd(humdrumRroot)  dir('HumdrumData') >    [1] \"BachChorales\"        \"BeethovenVariations\" \"MozartVariations\"    >    [4] \"RapFlow\"             \"RollingStoneCorpus\" dir('HumdrumData/BachChorales') >     [1] \"chor001.krn\" \"chor002.krn\" \"chor003.krn\" \"chor004.krn\" \"chor005.krn\" >     [6] \"chor006.krn\" \"chor007.krn\" \"chor008.krn\" \"chor009.krn\" \"chor010.krn\""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/GettingStarted.html","id":"reading-humdrum-data","dir":"Articles","previous_headings":"Quick Start","what":"Reading humdrum data","title":"Getting started with humdrumR","text":"Now ’ve found humdrum data look , let’s read humdrumR. can useing humdrumR’s readHumdrum command. Try : command two things: readHumdrum function read “chor001.krn” file R create humdrumR data object . new object saved variable called chor1. (name ‘chor1’ just name chose—welcome give different name want.) ’ve created chor1 object (whatever chose call ), can take quick look just typing name command line pressing enter: (R, enter something command line, R “prints” read.) print-see shows name file, contents file, stuff “Data fields” learn soon. Cool! Still, looking single humdrum file really exciting. whole point using computers working large amounts data. Luckily, humdrumR makes easy. Check next command: Notice ’ve changed instead writing 'chor001.krn', wrote 'chor0'. feed string 'chor0' readHumdrum, won’t just look file called “chor0”; read file folder whose name contains substring “chor0”—case ten files! Try printing new chorales object see different. Wow! ’ve now got “humdrumR corpus ten files”—’s nothing: readHumdrum work just well reading hundreds thousands files! Notice print humdrumR object, humdrumR shows beginning first file end last file, well telling many files total. readHumdrum number cool options can read detail humdrumR read/write tutorial.","code":"readHumdrum('HumdrumData/BachChorales/chor001.krn') -> chor1 chor1 >    ############################ vvv chor001.krn vvv ############################ >        1:  !!!COM: Bach, Johann Sebastian >        2:  !!!CDT: 1685/02/21/-1750/07/28/ >        3:  !!!OTL@@DE: Aus meines Herzens Grunde >        4:  !!!OTL@EN:      From the Depths of My Heart >        5:  !!!SCT: BWV 269 >        6:  !!!PC#: 1 >        7:  !!!AGN: chorale >      126:          **kern        **kern        **kern        **kern >      127:          *ICvox        *ICvox        *ICvox        *ICvox >      128:          *Ibass       *Itenor        *Ialto       *Isoprn >      129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >      130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >      131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >      132:             *>A           *>A           *>A           *>A >      133:         *clefF4      *clefGv2       *clefG2       *clefG2 >      134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >        8:             *G:           *G:           *G:           *G: >        9:             *F:             *             *             * >       10:           *M3/4         *M3/4         *M3/4         *M3/4 >       11:          *MM100        *MM100        *MM100        *MM100 >       12:             4GG            4B            4d            4g >       13:              =1            =1            =1            =1 >       14:              4G            4B            4d            2g >       15:              4E           8cL            4e             . >       16:               .           8BJ             .             . >       17:             4F#            4A            4d           4dd >       18:              =2            =2            =2            =2 >       19:              4G            4G            2d           4.b >       20:              4D           4F#             .             . >       21:               .             .             .            8a >       22:              4E            4G            4B            4g >       23:              =3            =3            =3            =3 >       24:              4C           8cL           8eL           4.g >       25:               .           8BJ            8d             . >       26:            8BBL            4c            8e             . >       27:            8AAJ             .          8f#J            8a >       28:             4GG            4d            4g            4b >       29:              =4            =4            =4            =4 >       30:             2D;           2d;          2f#;           2a; >       31:             4GG            4d            4g            4b >       32:              =5            =5            =5            =5 >       33:            4FF#            4A            4d           2dd >       34:             4GG            4B            4e             . >       35:             4AA            4c           4f#           4cc >       36:              =6            =6            =6            =6 >       37:             4BB            4d            2g            4b >       38:              4C            4e             .            2a >       39:              4D           8dL           4f#             . >       40:               .           8cJ             .             . >       41:              =7            =7            =7            =7 >       42:            2GG;           2B;           2d;           2g; >       43:            =:|!          =:|!          =:|!          =:|! >       44:             *>B           *>B           *>B           *>B >       45:             4GG            4d           [4g            4b >       46:              =8            =8            =8            =8 >       47:             4GG            4d          8gL]            4b >       48:               .             .          8f#J             . >       49:             4AA            4c           8eL           4cc >       50:               .             .          8f#J             . >       51:             4BB           8BL           [4g           4dd >       52:               .           8AJ             .             . >       53:              =9            =9            =9            =9 >       54:            4.BB           8BL          8gL]          4.dd >       55:               .           8cJ           8aJ             . >       56:               .            4d           8gL             . >       57:             8AA             .          8f#J           8cc >       58:             4GG            4d            4g            4b >       59:             =10           =10           =10           =10 >       60:             2D;           2d;          2f#;           2a; >       61:             [4E            4B            4e            4g >       62:             =11           =11           =11           =11 >       63:             4E]            4G            4e            2b >       64:              4D            4B          8f#L             . >       65:               .             .           8gJ             . >       66:              4C            4e            4a           4cc >       67:             =12           =12           =12           =12 >       68:            4.BB            2d            4a           2dd >       69:               .             .           4.g             . >       70:              8C             .             .             . >       71:              4D            4d             .           4cc >       72:               .             .           8f#             . >       73:             =13           =13           =13           =13 >       74:            8GGL           2.d            2g           2.b >       75:            8AAJ             .             .             . >       76:             4BB             .             .             . >       77:             4GG             .            4f             . >       78:             =14           =14           =14           =14 >       79:             2C;           2c;           2e;           2g; >       80:             4GG            4d            4g            4b >       81:             =15           =15           =15           =15 >       82:            4FF#           8dL           4.a           2dd >       83:               .           8cJ             .             . >       84:             4GG            4B             .             . >       85:               .             .            8g             . >       86:             4AA            4c           4f#           4cc >       87:             =16           =16           =16           =16 >       88:             4BB            2d            2g            2b >       89:             4GG             .             .             . >       90:              4D           8dL          [4f#            4a >       91:               .           8cJ             .             . >       92:             =17           =17           =17           =17 >       93:             8EL            4B         8f#L]           4.g >       94:              8D             .           8eJ             . >       95:              8C            4c           8eL             . >       96:             8BB             .          8f#J            8a >       97:             8AA            4d            4g            4b >       98:            8GGJ             .             .             . >       99:             =18           =18           =18           =18 >      100:             2D;           2d;          2f#;           2a; >      101:             [4G            4d            4g            4b >      102:             =19           =19           =19           =19 >      103:             4G]            2d            2a           2dd >      104:             4F#             .             .             . >      105:             [4E            4e           8gL           4cc >      106:               .             .          8f#J             . >      107:             =20           =20           =20           =20 >      108:            8EL]            2e            2g            4b >      109:             8DJ             .             .             . >      110:              4C             .             .            2a >      111:              4D           8dL           4f#             . >      112:               .           8cJ             .             . >      113:             =21           =21           =21           =21 >      114:           2.GG;          2.B;          2.d;          2.g; >      115:              ==            ==            ==            == >      116:              *-            *-            *-            *- >      117:  !!!hum2abc: -Q '' >      118:  !!!title: @{PC#}. @{OTL@@DE} >      119:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >      120:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >      121:  !!!YOR3: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >      122:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >      123:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >      124:  !!!EED:  Craig Stuart Sapp >      125:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor001.krn ^^^ ############################ >                         (***four global comments truncated due to screen size***) >        Data fields:  >               *Token :: character readHumdrum('HumdrumData/BachChorales/chor0') -> chorales chorales >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:          **kern        **kern        **kern        **kern >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:             4GG            4B            4d            4g >        13:              =1            =1            =1            =1 >        14:              4G            4B            4d            2g >        15:              4E           8cL            4e             . >        16:               .           8BJ             .             . >        17:             4F#            4A            4d           4dd >        18:              =2            =2            =2            =2 >        19:              4G            4G            2d           4.b >        20:              4D           4F#             .             . >        21:               .             .             .            8a >        22:              4E            4G            4B            4g >        23:              =3            =3            =3            =3 >        24:              4C           8cL           8eL           4.g >        25:               .           8BJ            8d             . >        26:            8BBL            4c            8e             . >        27:            8AAJ             .          8f#J            8a >        28:             4GG            4d            4g            4b >        29:              =4            =4            =4            =4 >        30:             2D;           2d;          2f#;           2a; >        31:             4GG            4d            4g            4b >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:            2AA;           2c;           2e;           2a; >        53:              2A            2e            2a           2cc >        54:              =9            =9            =9            =9 >        55:              4E            4e            4g            4b >        56:             8DL            4e            4g           4cc >        57:             8CJ             .             .             . >        58:             4BB            4d           8gL           4dd >        59:               .             .           8fJ             . >        60:              4C            4c            4e            4g >        61:             =10           =10           =10           =10 >        62:              4D           8F#            4d            4b >        63:               .            4G             .             . >        64:              4D             .            4c            4a >        65:               .           8F#             .             . >        66:            2GG;           2G;           2B;           2g; >        67:             =11           =11           =11           =11 >        68:              2C            2G            2e            2g >        69:             4AA            4A            4e           4cc >        70:              4E           4G#           8eL            4b >        71:               .             .           8dJ             . >        72:             =12           =12           =12           =12 >        73:              4F            4A            4c            4a >        74:              4C            4G            4c            4e >        75:            4BB-            4G           [2d            4g >        76:             4AA            4A             .            4f >        77:             =13           =13           =13           =13 >        78:            4GG#            4B           4d]           1e; >        79:             4AA            4A            4c             . >        80:            2EE;         2G#X;           2B;             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >               *Token :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/GettingStarted.html","id":"the-data-model","dir":"Articles","previous_headings":"","what":"The Data Model","title":"Getting started with humdrumR","text":"really make use humdrumR, need understand bit humdrum data represented humdrumR package: humdrumR “data model.” essential thing understand maps humdrum data syntax R data.table.  fully understand , start least basic understanding humdrum syntax! Read syntax humdrum.org check [vignette]{HumdrumSyntax.html “Humdrum Syntax”} topic.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/GettingStarted.html","id":"data-frames","dir":"Articles","previous_headings":"The Data Model","what":"data.frames","title":"Getting started with humdrumR","text":"Data.frames essential R. data.frame simply two-dimensional table named columns. column either vector list values, length. HumdrumR makes use popular extension base-R data.frames, data.table. humdrumR, every single, individual token collection humdrum-syntax text files given row data.frame. example, consider simple, humdrum-syntax file: file contains nineteen individual tokens. illustrate, ’ll print file, token bracketed < >: happens humdrumR reads file? (file bundled humdrumR \"humdrumRroot/examples\" directory.) see thing saw earlier, reading real humdrum data \"HumdrumData\" folder. ’s hood? see , can use getHumtab function extract underlying humdrum table: Look , data.table nineteen rows! case, humdrum data table (“humtable”) twenty-five columns! columns : humdrumR, refer columns fields. learn fields humdrumR object, better call fields command directly original humdrumR object: see twenty-five fields (humtable columns), divided five types fields: Data fields Structure fields Interpretation fields Form fields Reference fields (good place read details columns means humTable documentation can get calling ?humTable.) Let’s go back Bach chorales dataset loaded earlier (saved chorales): chorales corpus 44 fields!—fields example1, additional ones. additional fields interpretation reference records didn’t appear toy example1.","code":">     !!!OTL: Example 1 >     **kern                        **kern                         >     *M4/4                         *M4/4                          >     *C:                           *C:                            >     =                             =                              >     2G                            4g                             >     .                             4f                             >     2C                            2e                             >     ==                            ==                             >     *-                            *- >    NULL >    <!!!OTL: Example 1> >    <**kern>                      <**kern>                       >    <*M4/4>                       <*M4/4>                        >    <*C:>                         <*C:>                          >    <=>                           <=>                            >    <2G>                          <4g>                           >    <.>                           <4f>                           >    <2C>                          <2e>                           >    <==>                          <==>                           >    <*->                          <*-> example1 <- readHumdrum('examples/BasicExample.krn')  example1 >     vvv BasicExample.krn vvv  >       1:  !!!OTL: Example 1 >       2:    **kern  **kern >       3:     *M4/4   *M4/4 >       4:       *C:     *C: >       5:         =       = >       6:        2G      4g >       7:         .      4f >       8:        2C      2e >       9:        ==      == >      10:        *-      *- >     ^^^ BasicExample.krn ^^^  >        Data fields:  >               *Token :: character humtab <- getHumtab(example1)  humtab >                    Token Record Type Column Spine Path Stop Exclusive  Tandem Bar >     1: !!!OTL: Example 1      1    G     NA    NA   NA   NA      <NA>    <NA>  NA >     2:            **kern      2    I      1     1    0    1      kern           0 >     3:             *M4/4      3    I      1     1    0    1      kern    M4/4   0 >     4:               *C:      4    I      1     1    0    1      kern C:,M4/4   0 >     5:                 =      5    M      1     1    0    1      kern C:,M4/4   1 >     6:                2G      6    D      1     1    0    1      kern C:,M4/4   1 >     7:                 .      7    d      1     1    0    1      kern C:,M4/4   1 >     8:                2C      8    D      1     1    0    1      kern C:,M4/4   1 >     9:                ==      9    M      1     1    0    1      kern C:,M4/4   2 >    10:                *-     10    I      1     1    0    1      kern C:,M4/4   2 >    11:            **kern      2    I      2     2    0    1      kern           0 >    12:             *M4/4      3    I      2     2    0    1      kern    M4/4   0 >    13:               *C:      4    I      2     2    0    1      kern C:,M4/4   0 >    14:                 =      5    M      2     2    0    1      kern C:,M4/4   1 >    15:                4g      6    D      2     2    0    1      kern C:,M4/4   1 >    16:                4f      7    D      2     2    0    1      kern C:,M4/4   1 >    17:                2e      8    D      2     2    0    1      kern C:,M4/4   1 >    18:                ==      9    M      2     2    0    1      kern C:,M4/4   2 >    19:                *-     10    I      2     2    0    1      kern C:,M4/4   2 >        DoubleBar BarLabel NData       OTL Piece                  Filepath File >     1:        NA     <NA>    NA Example 1     1 examples/BasicExample.krn    1 >     2:         0     <NA>    NA Example 1     1 examples/BasicExample.krn    1 >     3:         0     <NA>    NA Example 1     1 examples/BasicExample.krn    1 >     4:         0     <NA>    NA Example 1     1 examples/BasicExample.krn    1 >     5:         0             NA Example 1     1 examples/BasicExample.krn    1 >     6:         0              1 Example 1     1 examples/BasicExample.krn    1 >     7:         0              2 Example 1     1 examples/BasicExample.krn    1 >     8:         0              3 Example 1     1 examples/BasicExample.krn    1 >     9:         1        =    NA Example 1     1 examples/BasicExample.krn    1 >    10:         1        =    NA Example 1     1 examples/BasicExample.krn    1 >    11:         0     <NA>    NA Example 1     1 examples/BasicExample.krn    1 >    12:         0     <NA>    NA Example 1     1 examples/BasicExample.krn    1 >    13:         0     <NA>    NA Example 1     1 examples/BasicExample.krn    1 >    14:         0             NA Example 1     1 examples/BasicExample.krn    1 >    15:         0              1 Example 1     1 examples/BasicExample.krn    1 >    16:         0              2 Example 1     1 examples/BasicExample.krn    1 >    17:         0              3 Example 1     1 examples/BasicExample.krn    1 >    18:         1        =    NA Example 1     1 examples/BasicExample.krn    1 >    19:         1        =    NA Example 1     1 examples/BasicExample.krn    1 >        Label         Filename  Null Filter Global  Key TimeSignature >     1:    _1 BasicExample.krn FALSE  FALSE   TRUE <NA>          <NA> >     2:    _1 BasicExample.krn FALSE  FALSE  FALSE <NA>          <NA> >     3:    _1 BasicExample.krn FALSE  FALSE  FALSE <NA>          M4/4 >     4:    _1 BasicExample.krn FALSE  FALSE  FALSE   C:          M4/4 >     5:    _1 BasicExample.krn  TRUE  FALSE  FALSE   C:          M4/4 >     6:    _1 BasicExample.krn FALSE  FALSE  FALSE   C:          M4/4 >     7:    _1 BasicExample.krn  TRUE  FALSE  FALSE   C:          M4/4 >     8:    _1 BasicExample.krn FALSE  FALSE  FALSE   C:          M4/4 >     9:    _1 BasicExample.krn FALSE  FALSE  FALSE   C:          M4/4 >    10:    _1 BasicExample.krn FALSE  FALSE  FALSE   C:          M4/4 >    11:    _1 BasicExample.krn FALSE  FALSE  FALSE <NA>          <NA> >    12:    _1 BasicExample.krn FALSE  FALSE  FALSE <NA>          M4/4 >    13:    _1 BasicExample.krn FALSE  FALSE  FALSE   C:          M4/4 >    14:    _1 BasicExample.krn  TRUE  FALSE  FALSE   C:          M4/4 >    15:    _1 BasicExample.krn FALSE  FALSE  FALSE   C:          M4/4 >    16:    _1 BasicExample.krn FALSE  FALSE  FALSE   C:          M4/4 >    17:    _1 BasicExample.krn FALSE  FALSE  FALSE   C:          M4/4 >    18:    _1 BasicExample.krn FALSE  FALSE  FALSE   C:          M4/4 >    19:    _1 BasicExample.krn FALSE  FALSE  FALSE   C:          M4/4 >                    Print >     1: !!!OTL: Example 1 >     2:            **kern >     3:             *M4/4 >     4:               *C: >     5:                 = >     6:                2G >     7:                 . >     8:                2C >     9:                == >    10:                *- >    11:            **kern >    12:             *M4/4 >    13:               *C: >    14:                 = >    15:                4g >    16:                4f >    17:                2e >    18:                == >    19:                *- colnames(humtab) >     [1] \"Token\"         \"Record\"        \"Type\"          \"Column\"        >     [5] \"Spine\"         \"Path\"          \"Stop\"          \"Exclusive\"     >     [9] \"Tandem\"        \"Bar\"           \"DoubleBar\"     \"BarLabel\"      >    [13] \"NData\"         \"OTL\"           \"Piece\"         \"Filepath\"      >    [17] \"File\"          \"Label\"         \"Filename\"      \"Null\"          >    [21] \"Filter\"        \"Global\"        \"Key\"           \"TimeSignature\" >    [25] \"Print\" fields(example1) >                 Name     Class           Type >     1:         Token character           Data >     2:      Filename character      Structure >     3:      Filepath character      Structure >     4:          File   integer      Structure >     5:         Label character      Structure >     6:         Piece   integer      Structure >     7:        Column   integer      Structure >     8:         Spine   integer      Structure >     9:          Path   integer      Structure >    10:          Stop   integer      Structure >    11:        Record   integer      Structure >    12:         NData   integer      Structure >    13:        Global   logical      Structure >    14:          Null   logical      Structure >    15:        Filter   logical      Structure >    16:          Type character      Structure >    17:     Exclusive character Interpretation >    18:        Tandem character Interpretation >    19:           Key character Interpretation >    20: TimeSignature character Interpretation >    21:           Bar   integer         Formal >    22:     DoubleBar   integer         Formal >    23:      BarLabel character         Formal >    24:           OTL character      Reference >                 Name     Class           Type fields(chorales) >                   Name     Class           Type >     1:           Token character           Data >     2:        Filename character      Structure >     3:        Filepath character      Structure >     4:            File   integer      Structure >     5:           Label character      Structure >     6:           Piece   integer      Structure >     7:          Column   integer      Structure >     8:           Spine   integer      Structure >     9:            Path   integer      Structure >    10:            Stop   integer      Structure >    11:          Record   integer      Structure >    12:           NData   integer      Structure >    13:          Global   logical      Structure >    14:            Null   logical      Structure >    15:          Filter   logical      Structure >    16:            Type character      Structure >    17:       Exclusive character Interpretation >    18:          Tandem character Interpretation >    19:             Key character Interpretation >    20:    KeySignature character Interpretation >    21:            Clef character Interpretation >    22:   TimeSignature character Interpretation >    23:     Mensuration character Interpretation >    24:             BPM character Interpretation >    25:      Instrument character Interpretation >    26: InstrumentClass character Interpretation >    27:          Formal character         Formal >    28:             Bar   integer         Formal >    29:       DoubleBar   integer         Formal >    30:        BarLabel character         Formal >    31:             COM character      Reference >    32:             CDT character      Reference >    33:         OTL@@DE character      Reference >    34:          OTL@EN character      Reference >    35:             SCT character      Reference >    36:             PC# character      Reference >    37:             AGN character      Reference >    38:         hum2abc character      Reference >    39:           title character      Reference >    40:             YOR character      Reference >    41:             SMS character      Reference >    42:             EED character      Reference >    43:             EEV character      Reference >    44:             OPR character      Reference >                   Name     Class           Type"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/GettingStarted.html","id":"main-fields","dir":"Articles","previous_headings":"The Data Model > data.frames","what":"Main Fields","title":"Getting started with humdrumR","text":"important fields always present humdrumR humtable 1) “Token” field contains original character tokens read humdrum data!; 2) “Structural” fields tell us original humdrum data token came . “Structural” fields allow humdrumR (re)construct original humdrum data—translating humdrum-table (data.table) plain-text humdrum syntax. can inspect field humdrumR data using $ operator: Just call humdrumR data object $ name field. Using , can see content structural fields ! important Spine, Record, (Record) Type, File(name) fields. “record types” : \"G\": global comment (including reference records) \"L\": local comment \"\": interpretation \"M\": measure (.e., barlines) \"D\": (non-null) data token \"d\": null data token (\".\")","code":"example1$Spine >     vvv BasicExample.krn vvv  >       1:  !!!OTL: Example 1 >       2:    1  2 >       3:    1  2 >       4:    1  2 >       5:    1  2 >       6:    1  2 >       7:    1  2 >       8:    1  2 >       9:    1  2 >      10:    1  2 >     ^^^ BasicExample.krn ^^^  >        Data fields:  >                Token :: character  # example1$Record  example1$Type >     vvv BasicExample.krn vvv  >       1:    G    >       2:    I  I >       3:    I  I >       4:    I  I >       5:    M  M >       6:    D  D >       7:    D  D >       8:    D  D >       9:    M  M >      10:    I  I >     ^^^ BasicExample.krn ^^^  >        Data fields:  >                Token :: character  example1$Filename >    ######## vvv BasicExample.krn vvv ######### >       1:    BasicExample.krn                   >       2:    BasicExample.krn  BasicExample.krn >       3:    BasicExample.krn  BasicExample.krn >       4:    BasicExample.krn  BasicExample.krn >       5:    BasicExample.krn  BasicExample.krn >       6:    BasicExample.krn  BasicExample.krn >       7:    BasicExample.krn  BasicExample.krn >       8:    BasicExample.krn  BasicExample.krn >       9:    BasicExample.krn  BasicExample.krn >      10:    BasicExample.krn  BasicExample.krn >    ######## ^^^ BasicExample.krn ^^^ ######### >        Data fields:  >                Token :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/GettingStarted.html","id":"stops","dir":"Articles","previous_headings":"The Data Model > data.frames","what":"Stops","title":"Getting started with humdrumR","text":"humdrum syntax, multiple tokens can placed “place” (.e., record, spine) simply separating spaces. (commonly used represent chords **kern data.) humdrumR, call “Stops”—always, every humdrum token, including stops, get row humdrumR humtable. Thus, need Stop field tell us stop token came ! much data, /tokens simply Stop == 1 (first position), one tokens record/spine, numbered ascending one: Let’s look example make sense ! file chords second spine: individual note tokens separated spaces. Let’s inspect humtable: can see note chords gets row, numbered 1, 2, 3 Stop field!","code":"stops <- readHumdrum('examples/Stops.krn')  stops >    ##### vvv Stops.krn vvv ##### >       1:  !!!OTL: \"Stop\" example >       2:    **kern  **kern >       3:     *M4/4   *M4/4 >       4:       *C:     *C: >       5:        =-      =- >       6:        2G      ee >       7:         .      dd >       8:       2C;     cc; >       9:         =       = >      10:        *-      *- >    ##### ^^^ Stops.krn ^^^ ##### >        Data fields:  >               *Token :: character getHumtab(stops) >                         Token Record Type Column Spine Path Stop Exclusive  Tandem >     1: !!!OTL: \"Stop\" example      1    G     NA    NA   NA   NA      <NA>    <NA> >     2:                 **kern      2    I      1     1    0    1      kern         >     3:                  *M4/4      3    I      1     1    0    1      kern    M4/4 >     4:                    *C:      4    I      1     1    0    1      kern C:,M4/4 >     5:                     =-      5    M      1     1    0    1      kern C:,M4/4 >     6:                     2G      6    D      1     1    0    1      kern C:,M4/4 >     7:                      .      7    d      1     1    0    1      kern C:,M4/4 >     8:                    2C;      8    D      1     1    0    1      kern C:,M4/4 >     9:                      =      9    M      1     1    0    1      kern C:,M4/4 >    10:                     *-     10    I      1     1    0    1      kern C:,M4/4 >    11:                 **kern      2    I      2     2    0    1      kern         >    12:                  *M4/4      3    I      2     2    0    1      kern    M4/4 >    13:                    *C:      4    I      2     2    0    1      kern C:,M4/4 >    14:                     =-      5    M      2     2    0    1      kern C:,M4/4 >    15:                     4g      6    D      2     2    0    1      kern C:,M4/4 >    16:                     cc      6    D      2     2    0    2      kern C:,M4/4 >    17:                     ee      6    D      2     2    0    3      kern C:,M4/4 >    18:                     4f      7    D      2     2    0    1      kern C:,M4/4 >    19:                      b      7    D      2     2    0    2      kern C:,M4/4 >    20:                     dd      7    D      2     2    0    3      kern C:,M4/4 >    21:                    2e;      8    D      2     2    0    1      kern C:,M4/4 >    22:                    cc;      8    D      2     2    0    2      kern C:,M4/4 >    23:                      =      9    M      2     2    0    1      kern C:,M4/4 >    24:                     *-     10    I      2     2    0    1      kern C:,M4/4 >                         Token Record Type Column Spine Path Stop Exclusive  Tandem >        Bar DoubleBar BarLabel NData            OTL Piece           Filepath File >     1:  NA        NA     <NA>    NA \"Stop\" example     1 examples/Stops.krn    1 >     2:   0         0     <NA>    NA \"Stop\" example     1 examples/Stops.krn    1 >     3:   0         0     <NA>    NA \"Stop\" example     1 examples/Stops.krn    1 >     4:   0         0     <NA>    NA \"Stop\" example     1 examples/Stops.krn    1 >     5:   1         0        -    NA \"Stop\" example     1 examples/Stops.krn    1 >     6:   1         0        -     1 \"Stop\" example     1 examples/Stops.krn    1 >     7:   1         0        -     2 \"Stop\" example     1 examples/Stops.krn    1 >     8:   1         0        -     3 \"Stop\" example     1 examples/Stops.krn    1 >     9:   2         0             NA \"Stop\" example     1 examples/Stops.krn    1 >    10:   2         0             NA \"Stop\" example     1 examples/Stops.krn    1 >    11:   0         0     <NA>    NA \"Stop\" example     1 examples/Stops.krn    1 >    12:   0         0     <NA>    NA \"Stop\" example     1 examples/Stops.krn    1 >    13:   0         0     <NA>    NA \"Stop\" example     1 examples/Stops.krn    1 >    14:   1         0        -    NA \"Stop\" example     1 examples/Stops.krn    1 >    15:   1         0        -     1 \"Stop\" example     1 examples/Stops.krn    1 >    16:   1         0        -     1 \"Stop\" example     1 examples/Stops.krn    1 >    17:   1         0        -     1 \"Stop\" example     1 examples/Stops.krn    1 >    18:   1         0        -     2 \"Stop\" example     1 examples/Stops.krn    1 >    19:   1         0        -     2 \"Stop\" example     1 examples/Stops.krn    1 >    20:   1         0        -     2 \"Stop\" example     1 examples/Stops.krn    1 >    21:   1         0        -     3 \"Stop\" example     1 examples/Stops.krn    1 >    22:   1         0        -     3 \"Stop\" example     1 examples/Stops.krn    1 >    23:   2         0             NA \"Stop\" example     1 examples/Stops.krn    1 >    24:   2         0             NA \"Stop\" example     1 examples/Stops.krn    1 >        Bar DoubleBar BarLabel NData            OTL Piece           Filepath File >        Label  Filename  Null Filter Global  Key TimeSignature >     1:    _1 Stops.krn FALSE  FALSE   TRUE <NA>          <NA> >     2:    _1 Stops.krn FALSE  FALSE  FALSE <NA>          <NA> >     3:    _1 Stops.krn FALSE  FALSE  FALSE <NA>          M4/4 >     4:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >     5:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >     6:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >     7:    _1 Stops.krn  TRUE  FALSE  FALSE   C:          M4/4 >     8:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >     9:    _1 Stops.krn  TRUE  FALSE  FALSE   C:          M4/4 >    10:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >    11:    _1 Stops.krn FALSE  FALSE  FALSE <NA>          <NA> >    12:    _1 Stops.krn FALSE  FALSE  FALSE <NA>          M4/4 >    13:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >    14:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >    15:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >    16:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >    17:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >    18:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >    19:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >    20:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >    21:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >    22:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >    23:    _1 Stops.krn  TRUE  FALSE  FALSE   C:          M4/4 >    24:    _1 Stops.krn FALSE  FALSE  FALSE   C:          M4/4 >        Label  Filename  Null Filter Global  Key TimeSignature >                         Print >     1: !!!OTL: \"Stop\" example >     2:                 **kern >     3:                  *M4/4 >     4:                    *C: >     5:                     =- >     6:                     2G >     7:                      . >     8:                    2C; >     9:                      = >    10:                     *- >    11:                 **kern >    12:                  *M4/4 >    13:                    *C: >    14:                     =- >    15:                     4g >    16:                     cc >    17:                     ee >    18:                     4f >    19:                      b >    20:                     dd >    21:                    2e; >    22:                    cc; >    23:                      = >    24:                     *- >                         Print"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/GettingStarted.html","id":"paths","dir":"Articles","previous_headings":"The Data Model > data.frames","what":"Paths","title":"Getting started with humdrumR","text":"humdrum data contains “spine paths”—places single spine splits two. humdrumR treats spine paths “subspines” main spine split , one numbered Path field. starting path (leftmost) numbered path 0—datasets spine paths, Path field zeros. paths numbered higher integers. Let’s look simple example: complex example: Notice humdrumR prints paths way readable reading humdrum syntax directly: paths “shifted” columns align. Column field used .","code":"paths1 <- readHumdrum('examples/Paths.krn')  paths1 >    ##### vvv Paths.krn vvv ##### >       1:  !!!OTL: \"Path\" example >       2:    **kern  **kern      >       3:     *M4/4   *M4/4      >       4:       *C:     *C:      >       5:        =-      =-      >       6:        4C     4ee      >       7:        4D     4dd      >       8:        4E     2cc      >       9:        4F       .      >      10:         =       =      >      11:         *      *^      >      12:        1G      8g  4cc >      13:         .      8a    . >      14:         .      8g   4a >      15:         .     8f#    . >      16:         .      4g   2b >      17:         .      4f    . >      18:         *      *v   *v >      19:         =       =      >      20:        1C     1cc      >      21:        ==      ==      >      22:        *-      *-      >    ##### ^^^ Paths.krn ^^^ ##### >        Data fields:  >               *Token :: character  paths1$Path >    ##### vvv Paths.krn vvv ##### >       1:  !!!OTL: \"Path\" example >       2:    0  0    >       3:    0  0    >       4:    0  0    >       5:    0  0    >       6:    0  0    >       7:    0  0    >       8:    0  0    >       9:    0  0    >      10:    0  0    >      11:    0  0    >      12:    0  0  1 >      13:    0  0  1 >      14:    0  0  1 >      15:    0  0  1 >      16:    0  0  1 >      17:    0  0  1 >      18:    0  0  1 >      19:    0  0    >      20:    0  0    >      21:    0  0    >      22:    0  0    >    ##### ^^^ Paths.krn ^^^ ##### >        Data fields:  >                Token :: character  getHumtab(paths1) >                         Token Record Type Column Spine Path Stop Exclusive  Tandem >     1: !!!OTL: \"Path\" example      1    G     NA    NA   NA   NA      <NA>    <NA> >     2:                 **kern      2    I      1     1    0    1      kern         >     3:                  *M4/4      3    I      1     1    0    1      kern    M4/4 >     4:                    *C:      4    I      1     1    0    1      kern C:,M4/4 >     5:                     =-      5    M      1     1    0    1      kern C:,M4/4 >     6:                     4C      6    D      1     1    0    1      kern C:,M4/4 >     7:                     4D      7    D      1     1    0    1      kern C:,M4/4 >     8:                     4E      8    D      1     1    0    1      kern C:,M4/4 >     9:                     4F      9    D      1     1    0    1      kern C:,M4/4 >    10:                      =     10    M      1     1    0    1      kern C:,M4/4 >    11:                      *     11    I      1     1    0    1      kern C:,M4/4 >    12:                     1G     12    D      1     1    0    1      kern C:,M4/4 >    13:                      .     13    d      1     1    0    1      kern C:,M4/4 >    14:                      .     14    d      1     1    0    1      kern C:,M4/4 >    15:                      .     15    d      1     1    0    1      kern C:,M4/4 >    16:                      .     16    d      1     1    0    1      kern C:,M4/4 >    17:                      .     17    d      1     1    0    1      kern C:,M4/4 >    18:                      *     18    I      1     1    0    1      kern C:,M4/4 >    19:                      =     19    M      1     1    0    1      kern C:,M4/4 >    20:                     1C     20    D      1     1    0    1      kern C:,M4/4 >    21:                     ==     21    M      1     1    0    1      kern C:,M4/4 >    22:                     *-     22    I      1     1    0    1      kern C:,M4/4 >    23:                 **kern      2    I      2     2    0    1      kern         >    24:                  *M4/4      3    I      2     2    0    1      kern    M4/4 >    25:                    *C:      4    I      2     2    0    1      kern C:,M4/4 >    26:                     =-      5    M      2     2    0    1      kern C:,M4/4 >    27:                    4cc      6    D      2     2    0    1      kern C:,M4/4 >    28:                    4ee      6    D      2     2    0    2      kern C:,M4/4 >    29:                     4b      7    D      2     2    0    1      kern C:,M4/4 >    30:                    4dd      7    D      2     2    0    2      kern C:,M4/4 >    31:                     2a      8    D      2     2    0    1      kern C:,M4/4 >    32:                    2cc      8    D      2     2    0    2      kern C:,M4/4 >    33:                      .      9    d      2     2    0    1      kern C:,M4/4 >    34:                      =     10    M      2     2    0    1      kern C:,M4/4 >    35:                     *^     11    I      2     2    0    1      kern C:,M4/4 >    36:                     8g     12    D      2     2    0    1      kern C:,M4/4 >    37:                     8a     13    D      2     2    0    1      kern C:,M4/4 >    38:                     8g     14    D      2     2    0    1      kern C:,M4/4 >    39:                    8f#     15    D      2     2    0    1      kern C:,M4/4 >    40:                     4g     16    D      2     2    0    1      kern C:,M4/4 >    41:                     4f     17    D      2     2    0    1      kern C:,M4/4 >    42:                     *v     18    I      2     2    0    1      kern C:,M4/4 >    43:                      =     19    M      2     2    0    1      kern C:,M4/4 >    44:                     1e     20    D      2     2    0    1      kern C:,M4/4 >    45:                     1g     20    D      2     2    0    2      kern C:,M4/4 >    46:                    1cc     20    D      2     2    0    3      kern C:,M4/4 >    47:                     ==     21    M      2     2    0    1      kern C:,M4/4 >    48:                     *-     22    I      2     2    0    1      kern C:,M4/4 >    49:                    4cc     12    D      3     2    1    1      kern C:,M4/4 >    50:                      .     13    d      3     2    1    1      kern C:,M4/4 >    51:                     4a     14    D      3     2    1    1      kern C:,M4/4 >    52:                      .     15    d      3     2    1    1      kern C:,M4/4 >    53:                     2b     16    D      3     2    1    1      kern C:,M4/4 >    54:                      .     17    d      3     2    1    1      kern C:,M4/4 >    55:                     *v     18    I      3     2    1    1      kern C:,M4/4 >                         Token Record Type Column Spine Path Stop Exclusive  Tandem >        Bar DoubleBar BarLabel NData            OTL Piece           Filepath File >     1:  NA        NA     <NA>    NA \"Path\" example     1 examples/Paths.krn    1 >     2:   0         0     <NA>    NA \"Path\" example     1 examples/Paths.krn    1 >     3:   0         0     <NA>    NA \"Path\" example     1 examples/Paths.krn    1 >     4:   0         0     <NA>    NA \"Path\" example     1 examples/Paths.krn    1 >     5:   1         0        -    NA \"Path\" example     1 examples/Paths.krn    1 >     6:   1         0        -     5 \"Path\" example     1 examples/Paths.krn    1 >     7:   1         0        -     6 \"Path\" example     1 examples/Paths.krn    1 >     8:   1         0        -     7 \"Path\" example     1 examples/Paths.krn    1 >     9:   1         0        -     8 \"Path\" example     1 examples/Paths.krn    1 >    10:   2         0             NA \"Path\" example     1 examples/Paths.krn    1 >    11:   2         0             NA \"Path\" example     1 examples/Paths.krn    1 >    12:   2         0             11 \"Path\" example     1 examples/Paths.krn    1 >    13:   2         0             12 \"Path\" example     1 examples/Paths.krn    1 >    14:   2         0             13 \"Path\" example     1 examples/Paths.krn    1 >    15:   2         0             14 \"Path\" example     1 examples/Paths.krn    1 >    16:   2         0             15 \"Path\" example     1 examples/Paths.krn    1 >    17:   2         0             16 \"Path\" example     1 examples/Paths.krn    1 >    18:   2         0             NA \"Path\" example     1 examples/Paths.krn    1 >    19:   3         0             NA \"Path\" example     1 examples/Paths.krn    1 >    20:   3         0             18 \"Path\" example     1 examples/Paths.krn    1 >    21:   4         1        =    NA \"Path\" example     1 examples/Paths.krn    1 >    22:   4         1        =    NA \"Path\" example     1 examples/Paths.krn    1 >    23:   0         0     <NA>    NA \"Path\" example     1 examples/Paths.krn    1 >    24:   0         0     <NA>    NA \"Path\" example     1 examples/Paths.krn    1 >    25:   0         0     <NA>    NA \"Path\" example     1 examples/Paths.krn    1 >    26:   1         0        -    NA \"Path\" example     1 examples/Paths.krn    1 >    27:   1         0        -     5 \"Path\" example     1 examples/Paths.krn    1 >    28:   1         0        -     5 \"Path\" example     1 examples/Paths.krn    1 >    29:   1         0        -     6 \"Path\" example     1 examples/Paths.krn    1 >    30:   1         0        -     6 \"Path\" example     1 examples/Paths.krn    1 >    31:   1         0        -     7 \"Path\" example     1 examples/Paths.krn    1 >    32:   1         0        -     7 \"Path\" example     1 examples/Paths.krn    1 >    33:   1         0        -     8 \"Path\" example     1 examples/Paths.krn    1 >    34:   2         0             NA \"Path\" example     1 examples/Paths.krn    1 >    35:   2         0             NA \"Path\" example     1 examples/Paths.krn    1 >    36:   2         0             11 \"Path\" example     1 examples/Paths.krn    1 >    37:   2         0             12 \"Path\" example     1 examples/Paths.krn    1 >    38:   2         0             13 \"Path\" example     1 examples/Paths.krn    1 >    39:   2         0             14 \"Path\" example     1 examples/Paths.krn    1 >    40:   2         0             15 \"Path\" example     1 examples/Paths.krn    1 >    41:   2         0             16 \"Path\" example     1 examples/Paths.krn    1 >    42:   2         0             NA \"Path\" example     1 examples/Paths.krn    1 >    43:   3         0             NA \"Path\" example     1 examples/Paths.krn    1 >    44:   3         0             18 \"Path\" example     1 examples/Paths.krn    1 >    45:   3         0             18 \"Path\" example     1 examples/Paths.krn    1 >    46:   3         0             18 \"Path\" example     1 examples/Paths.krn    1 >    47:   4         1        =    NA \"Path\" example     1 examples/Paths.krn    1 >    48:   4         1        =    NA \"Path\" example     1 examples/Paths.krn    1 >    49:   2         0             11 \"Path\" example     1 examples/Paths.krn    1 >    50:   2         0             12 \"Path\" example     1 examples/Paths.krn    1 >    51:   2         0             13 \"Path\" example     1 examples/Paths.krn    1 >    52:   2         0             14 \"Path\" example     1 examples/Paths.krn    1 >    53:   2         0             15 \"Path\" example     1 examples/Paths.krn    1 >    54:   2         0             16 \"Path\" example     1 examples/Paths.krn    1 >    55:   2         0             NA \"Path\" example     1 examples/Paths.krn    1 >        Bar DoubleBar BarLabel NData            OTL Piece           Filepath File >        Label  Filename  Null Filter Global  Key TimeSignature >     1:    _1 Paths.krn  TRUE  FALSE   TRUE <NA>          <NA> >     2:    _1 Paths.krn FALSE  FALSE  FALSE <NA>          <NA> >     3:    _1 Paths.krn FALSE  FALSE  FALSE <NA>          M4/4 >     4:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >     5:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >     6:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >     7:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >     8:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >     9:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    10:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    11:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    12:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    13:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    14:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    15:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    16:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    17:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    18:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    19:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    20:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    21:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    22:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    23:    _1 Paths.krn FALSE  FALSE  FALSE <NA>          <NA> >    24:    _1 Paths.krn FALSE  FALSE  FALSE <NA>          M4/4 >    25:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    26:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    27:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    28:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    29:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    30:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    31:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    32:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    33:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    34:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    35:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    36:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    37:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    38:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    39:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    40:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    41:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    42:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    43:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    44:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    45:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    46:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    47:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    48:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    49:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    50:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    51:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    52:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    53:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    54:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >    55:    _1 Paths.krn FALSE  FALSE  FALSE   C:          M4/4 >        Label  Filename  Null Filter Global  Key TimeSignature >                         Print >     1: !!!OTL: \"Path\" example >     2:                 **kern >     3:                  *M4/4 >     4:                    *C: >     5:                     =- >     6:                     4C >     7:                     4D >     8:                     4E >     9:                     4F >    10:                      = >    11:                      * >    12:                     1G >    13:                      . >    14:                      . >    15:                      . >    16:                      . >    17:                      . >    18:                      * >    19:                      = >    20:                     1C >    21:                     == >    22:                     *- >    23:                 **kern >    24:                  *M4/4 >    25:                    *C: >    26:                     =- >    27:                    4cc >    28:                    4ee >    29:                     4b >    30:                    4dd >    31:                     2a >    32:                    2cc >    33:                      . >    34:                      = >    35:                     *^ >    36:                     8g >    37:                     8a >    38:                     8g >    39:                    8f# >    40:                     4g >    41:                     4f >    42:                     *v >    43:                      = >    44:                     1e >    45:                     1g >    46:                    1cc >    47:                     == >    48:                     *- >    49:                    4cc >    50:                      . >    51:                     4a >    52:                      . >    53:                     2b >    54:                      . >    55:                     *v >                         Print paths2 <- readHumdrum('examples/Paths2.krn')  paths2 >    ######## vvv Paths2.krn vvv ######### >       1:  !!!OTL: complex \"Path\" example >       2:    **path             >       3:         a             >       4:        *^             >       5:         b       c     >       6:         d       e     >       7:        *^       *     >       8:         f   g   h     >       9:         i   j   k     >      10:        *v  *v   *     >      11:         l       m     >      12:         n       o     >      13:         *      *^     >      14:         p       q   r >      15:         s       t   u >      16:         *      *v  *v >      17:         v       w     >      18:         x       y     >      19:        *v      *v     >      20:         z             >      21:        *-             >    ######## ^^^ Paths2.krn ^^^ ######### >        Data fields:  >               *Token :: character  paths2$Path >    ######## vvv Paths2.krn vvv ######### >       1:  !!!OTL: complex \"Path\" example >       2:    0          >       3:    0          >       4:    0          >       5:    0     2    >       6:    0     2    >       7:    0     2    >       8:    0  1  2    >       9:    0  1  2    >      10:    0  1  2    >      11:    0     2    >      12:    0     2    >      13:    0     2    >      14:    0     2  3 >      15:    0     2  3 >      16:    0     2  3 >      17:    0     2    >      18:    0     2    >      19:    0     2    >      20:    0          >      21:    0          >    ######## ^^^ Paths2.krn ^^^ ######### >        Data fields:  >                Token :: character  getHumtab(paths2) >                                 Token Record Type Column Spine Path Stop Exclusive >     1: !!!OTL: complex \"Path\" example      1    G     NA    NA   NA   NA      <NA> >     2:                         **path      2    I      1     1    0    1      path >     3:                              a      3    D      1     1    0    1      path >     4:                             *^      4    I      1     1    0    1      path >     5:                              b      5    D      1     1    0    1      path >     6:                              d      6    D      1     1    0    1      path >     7:                             *^      7    I      1     1    0    1      path >     8:                              f      8    D      1     1    0    1      path >     9:                              i      9    D      1     1    0    1      path >    10:                             *v     10    I      1     1    0    1      path >    11:                              l     11    D      1     1    0    1      path >    12:                              n     12    D      1     1    0    1      path >    13:                              *     13    I      1     1    0    1      path >    14:                              p     14    D      1     1    0    1      path >    15:                              s     15    D      1     1    0    1      path >    16:                              *     16    I      1     1    0    1      path >    17:                              v     17    D      1     1    0    1      path >    18:                              x     18    D      1     1    0    1      path >    19:                             *v     19    I      1     1    0    1      path >    20:                              z     20    D      1     1    0    1      path >    21:                             *-     21    I      1     1    0    1      path >    22:                              g      8    D      2     1    1    1      path >    23:                              j      9    D      2     1    1    1      path >    24:                             *v     10    I      2     1    1    1      path >    25:                              c      5    D      3     1    2    1      path >    26:                              e      6    D      3     1    2    1      path >    27:                              *      7    I      3     1    2    1      path >    28:                              h      8    D      3     1    2    1      path >    29:                              k      9    D      3     1    2    1      path >    30:                              *     10    I      3     1    2    1      path >    31:                              m     11    D      3     1    2    1      path >    32:                              o     12    D      3     1    2    1      path >    33:                             *^     13    I      3     1    2    1      path >    34:                              q     14    D      3     1    2    1      path >    35:                              t     15    D      3     1    2    1      path >    36:                             *v     16    I      3     1    2    1      path >    37:                              w     17    D      3     1    2    1      path >    38:                              y     18    D      3     1    2    1      path >    39:                             *v     19    I      3     1    2    1      path >    40:                              r     14    D      4     1    3    1      path >    41:                              u     15    D      4     1    3    1      path >    42:                             *v     16    I      4     1    3    1      path >                                 Token Record Type Column Spine Path Stop Exclusive >        Tandem Bar DoubleBar BarLabel NData                    OTL Piece >     1:   <NA>  NA        NA     <NA>    NA complex \"Path\" example     1 >     2:          0         0     <NA>    NA complex \"Path\" example     1 >     3:          0         0     <NA>     2 complex \"Path\" example     1 >     4:          0         0     <NA>    NA complex \"Path\" example     1 >     5:          0         0     <NA>     4 complex \"Path\" example     1 >     6:          0         0     <NA>     5 complex \"Path\" example     1 >     7:          0         0     <NA>    NA complex \"Path\" example     1 >     8:          0         0     <NA>     7 complex \"Path\" example     1 >     9:          0         0     <NA>     8 complex \"Path\" example     1 >    10:          0         0     <NA>    NA complex \"Path\" example     1 >    11:          0         0     <NA>    10 complex \"Path\" example     1 >    12:          0         0     <NA>    11 complex \"Path\" example     1 >    13:          0         0     <NA>    NA complex \"Path\" example     1 >    14:          0         0     <NA>    13 complex \"Path\" example     1 >    15:          0         0     <NA>    14 complex \"Path\" example     1 >    16:          0         0     <NA>    NA complex \"Path\" example     1 >    17:          0         0     <NA>    16 complex \"Path\" example     1 >    18:          0         0     <NA>    17 complex \"Path\" example     1 >    19:          0         0     <NA>    NA complex \"Path\" example     1 >    20:          0         0     <NA>    19 complex \"Path\" example     1 >    21:          0         0     <NA>    NA complex \"Path\" example     1 >    22:          0         0     <NA>     7 complex \"Path\" example     1 >    23:          0         0     <NA>     8 complex \"Path\" example     1 >    24:          0         0     <NA>    NA complex \"Path\" example     1 >    25:          0         0     <NA>     4 complex \"Path\" example     1 >    26:          0         0     <NA>     5 complex \"Path\" example     1 >    27:          0         0     <NA>    NA complex \"Path\" example     1 >    28:          0         0     <NA>     7 complex \"Path\" example     1 >    29:          0         0     <NA>     8 complex \"Path\" example     1 >    30:          0         0     <NA>    NA complex \"Path\" example     1 >    31:          0         0     <NA>    10 complex \"Path\" example     1 >    32:          0         0     <NA>    11 complex \"Path\" example     1 >    33:          0         0     <NA>    NA complex \"Path\" example     1 >    34:          0         0     <NA>    13 complex \"Path\" example     1 >    35:          0         0     <NA>    14 complex \"Path\" example     1 >    36:          0         0     <NA>    NA complex \"Path\" example     1 >    37:          0         0     <NA>    16 complex \"Path\" example     1 >    38:          0         0     <NA>    17 complex \"Path\" example     1 >    39:          0         0     <NA>    NA complex \"Path\" example     1 >    40:          0         0     <NA>    13 complex \"Path\" example     1 >    41:          0         0     <NA>    14 complex \"Path\" example     1 >    42:          0         0     <NA>    NA complex \"Path\" example     1 >        Tandem Bar DoubleBar BarLabel NData                    OTL Piece >                   Filepath File Label   Filename  Null Filter Global >     1: examples/Paths2.krn    1    _1 Paths2.krn  TRUE  FALSE   TRUE >     2: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >     3: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >     4: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >     5: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >     6: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >     7: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >     8: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >     9: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    10: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    11: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    12: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    13: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    14: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    15: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    16: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    17: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    18: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    19: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    20: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    21: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    22: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    23: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    24: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    25: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    26: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    27: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    28: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    29: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    30: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    31: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    32: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    33: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    34: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    35: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    36: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    37: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    38: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    39: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    40: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    41: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >    42: examples/Paths2.krn    1    _1 Paths2.krn FALSE  FALSE  FALSE >                   Filepath File Label   Filename  Null Filter Global >                                 Print >     1: !!!OTL: complex \"Path\" example >     2:                         **path >     3:                              a >     4:                             *^ >     5:                              b >     6:                              d >     7:                             *^ >     8:                              f >     9:                              i >    10:                             *v >    11:                              l >    12:                              n >    13:                              * >    14:                              p >    15:                              s >    16:                              * >    17:                              v >    18:                              x >    19:                             *v >    20:                              z >    21:                             *- >    22:                              g >    23:                              j >    24:                             *v >    25:                              c >    26:                              e >    27:                              * >    28:                              h >    29:                              k >    30:                              * >    31:                              m >    32:                              o >    33:                             *^ >    34:                              q >    35:                              t >    36:                             *v >    37:                              w >    38:                              y >    39:                             *v >    40:                              r >    41:                              u >    42:                             *v >                                 Print"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/GettingStarted.html","id":"doing-stuff","dir":"Articles","previous_headings":"","what":"Doing Stuff!","title":"Getting started with humdrumR","text":"Ok, ’ve now seen read inspect humdrumR data. ’ve also got idea humdrum data looks like surface: humdrum table. can ? create humdrumR corpus object, using readHumdrum, object encapsulates humdrum-table (data.table) object, data really stored. ’ve already seen can extract humdrum table directly using getHumtab—aleady R pro, might just want extract table work directly. However, humdrumR object give us convenient ways working table. example, ’ve already seen print humdrumR objects, print humdrum syntax, easier read complex humdrum table! humdrumR ! main thing humdrumR allow us work fields humdrum-tables way convenient powerful. First, create special “-expressions” refer humtable’s fields. create expression, use R ~ operator. instance, can write things like: Spine + File nchar(Token) paste0(Token, Record) However, can tell humdrumR evaluate expressions using fields humdrum tables. simplest way using wtihin function, takes humdrumR object (left side), expression right side. expression evaluated, result put back place humdrum data! ’ll also notice printout, new Data field, called Result1—default name humdrumR assigns new fields create. want, can pick names using $<- (.e., assigning new name create using $). instance, lets use humdrumR’s semits function (see humdrum pitch vignette) calculate semitone value pitch chorales: worked! Lets , save result new field, call Semits—course, give name want, just let called Result1 want! now new Data field humdrum table, called Semits. Meanwhile, original Token field still , safely unchanged! Just like , can use $ operator look fields: Whats , can use Semits field just like field:","code":"within(chorales, Spine + File) >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:          **kern        **kern        **kern        **kern >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:               2             3             4             5 >        13:              =1            =1            =1            =1 >        14:               2             3             4             5 >        15:               2             3             4             . >        16:               .             3             .             . >        17:               2             3             4             5 >        18:              =2            =2            =2            =2 >        19:               2             3             4             5 >        20:               2             3             .             . >        21:               .             .             .             5 >        22:               2             3             4             5 >        23:              =3            =3            =3            =3 >        24:               2             3             4             5 >        25:               .             3             4             . >        26:               2             3             4             . >        27:               2             .             4             5 >        28:               2             3             4             5 >        29:              =4            =4            =4            =4 >        30:               2             3             4             5 >        31:               2             3             4             5 >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:              11            12            13            14 >        53:              11            12            13            14 >        54:              =9            =9            =9            =9 >        55:              11            12            13            14 >        56:              11            12            13            14 >        57:              11             .             .             . >        58:              11            12            13            14 >        59:               .             .            13             . >        60:              11            12            13            14 >        61:             =10           =10           =10           =10 >        62:              11            12            13            14 >        63:               .            12             .             . >        64:              11             .            13            14 >        65:               .            12             .             . >        66:              11            12            13            14 >        67:             =11           =11           =11           =11 >        68:              11            12            13            14 >        69:              11            12            13            14 >        70:              11            12            13            14 >        71:               .             .            13             . >        72:             =12           =12           =12           =12 >        73:              11            12            13            14 >        74:              11            12            13            14 >        75:              11            12            13            14 >        76:              11            12             .            14 >        77:             =13           =13           =13           =13 >        78:              11            12            13            14 >        79:              11            12            13             . >        80:              11            12            13             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >                Token   :: character >               *Result1 :: integer  within(chorales,  nchar(Token)) >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:          **kern        **kern        **kern        **kern >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:               3             2             2             2 >        13:              =1            =1            =1            =1 >        14:               2             2             2             2 >        15:               2             3             2             . >        16:               .             3             .             . >        17:               3             2             2             3 >        18:              =2            =2            =2            =2 >        19:               2             2             2             3 >        20:               2             3             .             . >        21:               .             .             .             2 >        22:               2             2             2             2 >        23:              =3            =3            =3            =3 >        24:               2             3             3             3 >        25:               .             3             2             . >        26:               4             2             2             . >        27:               4             .             4             2 >        28:               3             2             2             2 >        29:              =4            =4            =4            =4 >        30:               3             3             4             3 >        31:               3             2             2             2 >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:               4             3             3             3 >        53:               2             2             2             3 >        54:              =9            =9            =9            =9 >        55:               2             2             2             2 >        56:               3             2             2             3 >        57:               3             .             .             . >        58:               3             2             3             3 >        59:               .             .             3             . >        60:               2             2             2             2 >        61:             =10           =10           =10           =10 >        62:               2             3             2             2 >        63:               .             2             .             . >        64:               2             .             2             2 >        65:               .             3             .             . >        66:               4             3             3             3 >        67:             =11           =11           =11           =11 >        68:               2             2             2             2 >        69:               3             2             2             3 >        70:               2             3             3             2 >        71:               .             .             3             . >        72:             =12           =12           =12           =12 >        73:               2             2             2             2 >        74:               2             2             2             2 >        75:               4             2             3             2 >        76:               3             2             .             2 >        77:             =13           =13           =13           =13 >        78:               4             2             3             3 >        79:               3             2             2             . >        80:               4             5             3             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >                Token   :: character >               *Result1 :: integer  within(chorales,  paste0(Token, Record)) >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:          **kern        **kern        **kern        **kern >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:           4GG21          4B21          4d21          4g21 >        13:              =1            =1            =1            =1 >        14:            4G23          4B23          4d23          2g23 >        15:            4E24         8cL24          4e24             . >        16:               .         8BJ25             .             . >        17:           4F#26          4A26          4d26         4dd26 >        18:              =2            =2            =2            =2 >        19:            4G28          4G28          2d28         4.b28 >        20:            4D29         4F#29             .             . >        21:               .             .             .          8a30 >        22:            4E31          4G31          4B31          4g31 >        23:              =3            =3            =3            =3 >        24:            4C33         8cL33         8eL33         4.g33 >        25:               .         8BJ34          8d34             . >        26:          8BBL35          4c35          8e35             . >        27:          8AAJ36             .        8f#J36          8a36 >        28:           4GG37          4d37          4g37          4b37 >        29:              =4            =4            =4            =4 >        30:           2D;39         2d;39        2f#;39         2a;39 >        31:           4GG40          4d40          4g40          4b40 >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:          2AA;61         2c;61         2e;61         2a;61 >        53:            2A62          2e62          2a62         2cc62 >        54:              =9            =9            =9            =9 >        55:            4E64          4e64          4g64          4b64 >        56:           8DL65          4e65          4g65         4cc65 >        57:           8CJ66             .             .             . >        58:           4BB67          4d67         8gL67         4dd67 >        59:               .             .         8fJ68             . >        60:            4C69          4c69          4e69          4g69 >        61:             =10           =10           =10           =10 >        62:            4D71         8F#71          4d71          4b71 >        63:               .          4G72             .             . >        64:            4D73             .          4c73          4a73 >        65:               .         8F#74             .             . >        66:          2GG;75         2G;75         2B;75         2g;75 >        67:             =11           =11           =11           =11 >        68:            2C77          2G77          2e77          2g77 >        69:           4AA78          4A78          4e78         4cc78 >        70:            4E79         4G#79         8eL79          4b79 >        71:               .             .         8dJ80             . >        72:             =12           =12           =12           =12 >        73:            4F82          4A82          4c82          4a82 >        74:            4C83          4G83          4c83          4e83 >        75:          4BB-84          4G84         [2d84          4g84 >        76:           4AA85          4A85             .          4f85 >        77:             =13           =13           =13           =13 >        78:          4GG#87          4B87         4d]87         1e;87 >        79:           4AA88          4A88          4c88             . >        80:          2EE;89       2G#X;89         2B;89             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >                Token   :: character >               *Result1 :: character within(chorales, semits(Token)) >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:        **semits      **semits      **semits      **semits >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:             -17            -1             2             7 >        13:              =1            =1            =1            =1 >        14:              -5            -1             2             7 >        15:              -8             0             4             . >        16:               .            -1             .             . >        17:              -6            -3             2            14 >        18:              =2            =2            =2            =2 >        19:              -5            -5             2            11 >        20:             -10            -6             .             . >        21:               .             .             .             9 >        22:              -8            -5            -1             7 >        23:              =3            =3            =3            =3 >        24:             -12             0             4             7 >        25:               .            -1             2             . >        26:             -13             0             4             . >        27:             -15             .             6             9 >        28:             -17             2             7            11 >        29:              =4            =4            =4            =4 >        30:             -10             2             6             9 >        31:             -17             2             7            11 >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:             -15             0             4             9 >        53:              -3             4             9            12 >        54:              =9            =9            =9            =9 >        55:              -8             4             7            11 >        56:             -10             4             7            12 >        57:             -12             .             .             . >        58:             -13             2             7            14 >        59:               .             .             5             . >        60:             -12             0             4             7 >        61:             =10           =10           =10           =10 >        62:             -10            -6             2            11 >        63:               .            -5             .             . >        64:             -10             .             0             9 >        65:               .            -6             .             . >        66:             -17            -5            -1             7 >        67:             =11           =11           =11           =11 >        68:             -12            -5             4             7 >        69:             -15            -3             4            12 >        70:              -8            -4             4            11 >        71:               .             .             2             . >        72:             =12           =12           =12           =12 >        73:              -7            -3             0             9 >        74:             -12            -5             0             4 >        75:             -14            -5             2             7 >        76:             -15            -3             .             5 >        77:             =13           =13           =13           =13 >        78:             -16            -1             2             4 >        79:             -15            -3             0             . >        80:             -20            -4            -1             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >                Token   :: character >               *Result1 :: integer within(chorales, semits(Token) -> Semits) -> chorales chorales$Token >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:        **semits      **semits      **semits      **semits >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:             4GG            4B            4d            4g >        13:              =1            =1            =1            =1 >        14:              4G            4B            4d            2g >        15:              4E           8cL            4e             . >        16:               .           8BJ             .             . >        17:             4F#            4A            4d           4dd >        18:              =2            =2            =2            =2 >        19:              4G            4G            2d           4.b >        20:              4D           4F#             .             . >        21:               .             .             .            8a >        22:              4E            4G            4B            4g >        23:              =3            =3            =3            =3 >        24:              4C           8cL           8eL           4.g >        25:               .           8BJ            8d             . >        26:            8BBL            4c            8e             . >        27:            8AAJ             .          8f#J            8a >        28:             4GG            4d            4g            4b >        29:              =4            =4            =4            =4 >        30:             2D;           2d;          2f#;           2a; >        31:             4GG            4d            4g            4b >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:            2AA;           2c;           2e;           2a; >        53:              2A            2e            2a           2cc >        54:              =9            =9            =9            =9 >        55:              4E            4e            4g            4b >        56:             8DL            4e            4g           4cc >        57:             8CJ             .             .             . >        58:             4BB            4d           8gL           4dd >        59:               .             .           8fJ             . >        60:              4C            4c            4e            4g >        61:             =10           =10           =10           =10 >        62:              4D           8F#            4d            4b >        63:               .            4G             .             . >        64:              4D             .            4c            4a >        65:               .           8F#             .             . >        66:            2GG;           2G;           2B;           2g; >        67:             =11           =11           =11           =11 >        68:              2C            2G            2e            2g >        69:             4AA            4A            4e           4cc >        70:              4E           4G#           8eL            4b >        71:               .             .           8dJ             . >        72:             =12           =12           =12           =12 >        73:              4F            4A            4c            4a >        74:              4C            4G            4c            4e >        75:            4BB-            4G           [2d            4g >        76:             4AA            4A             .            4f >        77:             =13           =13           =13           =13 >        78:            4GG#            4B           4d]           1e; >        79:             4AA            4A            4c             . >        80:            2EE;         2G#X;           2B;             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >               *Token  :: character >                Semits :: integer  chorales$Semits >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:        **semits      **semits      **semits      **semits >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:             -17            -1             2             7 >        13:              =1            =1            =1            =1 >        14:              -5            -1             2             7 >        15:              -8             0             4             . >        16:               .            -1             .             . >        17:              -6            -3             2            14 >        18:              =2            =2            =2            =2 >        19:              -5            -5             2            11 >        20:             -10            -6             .             . >        21:               .             .             .             9 >        22:              -8            -5            -1             7 >        23:              =3            =3            =3            =3 >        24:             -12             0             4             7 >        25:               .            -1             2             . >        26:             -13             0             4             . >        27:             -15             .             6             9 >        28:             -17             2             7            11 >        29:              =4            =4            =4            =4 >        30:             -10             2             6             9 >        31:             -17             2             7            11 >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:             -15             0             4             9 >        53:              -3             4             9            12 >        54:              =9            =9            =9            =9 >        55:              -8             4             7            11 >        56:             -10             4             7            12 >        57:             -12             .             .             . >        58:             -13             2             7            14 >        59:               .             .             5             . >        60:             -12             0             4             7 >        61:             =10           =10           =10           =10 >        62:             -10            -6             2            11 >        63:               .            -5             .             . >        64:             -10             .             0             9 >        65:               .            -6             .             . >        66:             -17            -5            -1             7 >        67:             =11           =11           =11           =11 >        68:             -12            -5             4             7 >        69:             -15            -3             4            12 >        70:              -8            -4             4            11 >        71:               .             .             2             . >        72:             =12           =12           =12           =12 >        73:              -7            -3             0             9 >        74:             -12            -5             0             4 >        75:             -14            -5             2             7 >        76:             -15            -3             .             5 >        77:             =13           =13           =13           =13 >        78:             -16            -1             2             4 >        79:             -15            -3             0             . >        80:             -20            -4            -1             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >                Token  :: character >               *Semits :: integer within(chorales, paste0(Token, ' = ', Semits)) >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:        **semits      **semits      **semits      **semits >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:       4GG = -17       4B = -1        4d = 2        4g = 7 >        13:              =1            =1            =1            =1 >        14:         4G = -5       4B = -1        4d = 2        2g = 7 >        15:         4E = -8       8cL = 0        4e = 4             . >        16:               .      8BJ = -1             .             . >        17:        4F# = -6       4A = -3        4d = 2      4dd = 14 >        18:              =2            =2            =2            =2 >        19:         4G = -5       4G = -5        2d = 2      4.b = 11 >        20:        4D = -10      4F# = -6             .             . >        21:               .             .             .        8a = 9 >        22:         4E = -8       4G = -5       4B = -1        4g = 7 >        23:              =3            =3            =3            =3 >        24:        4C = -12       8cL = 0       8eL = 4       4.g = 7 >        25:               .      8BJ = -1        8d = 2             . >        26:      8BBL = -13        4c = 0        8e = 4             . >        27:      8AAJ = -15             .      8f#J = 6        8a = 9 >        28:       4GG = -17        4d = 2        4g = 7       4b = 11 >        29:              =4            =4            =4            =4 >        30:       2D; = -10       2d; = 2      2f#; = 6       2a; = 9 >        31:       4GG = -17        4d = 2        4g = 7       4b = 11 >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:      2AA; = -15       2c; = 0       2e; = 4       2a; = 9 >        53:         2A = -3        2e = 4        2a = 9      2cc = 12 >        54:              =9            =9            =9            =9 >        55:         4E = -8        4e = 4        4g = 7       4b = 11 >        56:       8DL = -10        4e = 4        4g = 7      4cc = 12 >        57:       8CJ = -12             .             .             . >        58:       4BB = -13        4d = 2       8gL = 7      4dd = 14 >        59:               .             .       8fJ = 5             . >        60:        4C = -12        4c = 0        4e = 4        4g = 7 >        61:             =10           =10           =10           =10 >        62:        4D = -10      8F# = -6        4d = 2       4b = 11 >        63:               .       4G = -5             .             . >        64:        4D = -10             .        4c = 0        4a = 9 >        65:               .      8F# = -6             .             . >        66:      2GG; = -17      2G; = -5      2B; = -1       2g; = 7 >        67:             =11           =11           =11           =11 >        68:        2C = -12       2G = -5        2e = 4        2g = 7 >        69:       4AA = -15       4A = -3        4e = 4      4cc = 12 >        70:         4E = -8      4G# = -4       8eL = 4       4b = 11 >        71:               .             .       8dJ = 2             . >        72:             =12           =12           =12           =12 >        73:         4F = -7       4A = -3        4c = 0        4a = 9 >        74:        4C = -12       4G = -5        4c = 0        4e = 4 >        75:      4BB- = -14       4G = -5       [2d = 2        4g = 7 >        76:       4AA = -15       4A = -3             .        4f = 5 >        77:             =13           =13           =13           =13 >        78:      4GG# = -16       4B = -1       4d] = 2       1e; = 4 >        79:       4AA = -15       4A = -3        4c = 0             . >        80:      2EE; = -20    2G#X; = -4      2B; = -1             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >                Token   :: character >                Semits  :: integer >               *Result1 :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/HumdrumSyntax.html","id":"structure-vs-content","dir":"Articles","previous_headings":"","what":"Structure vs Content","title":"The Humdrum Syntax","text":"humdrum syntax lays simple structure encoding data, says nothing content. information encoded, information represented flexible. flexibility, structure humdrum data—humdrum syntax—always , makes easy work ! fill content humdrum files, define “interpretations. Interpretations schemes represent information characters. sounds complicated/scary, can simple! instance, wanted encode drum beats humdrum invent simple scheme encoding drum beats : Kick drum = “K” Snare drum = “S” Hi-Hat = “H” treat newline text file sixteenth-note tick (read humdrum “timebase” ) start encoding. thing need make conform humdrum syntax name : call overarching interpretations like “exclusive interpretations”, prefixed **. call **drums ’d ready create humdrum data!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/HumdrumSyntax.html","id":"syntax","dir":"Articles","previous_headings":"","what":"Syntax","title":"The Humdrum Syntax","text":"humdrum syntax , first glange, nothing simple, tab-delineated spread sheet. (“tab-delineated” just means columns spreadsheet separated TABs.) basic idea, extra features learn! Let’s take look basic humdrum file:  file can broken different types information like :  file two columns data, separated tabs. However, special terminology use: “columns” humdrum file called spines. line, row, file called record.  twenty records two spines file. character-string, located spine/record position, called token. Examples tokens file include *M4/4, 4A, =1, !Suspension.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/HumdrumSyntax.html","id":"global-vs-local","dir":"Articles","previous_headings":"Syntax","what":"Global vs Local","title":"The Humdrum Syntax","text":"’ll notice two records file (1 10) don’t seem two columns. Indeed, called “global” records—don’t belong particular column, whole row/file. image illustrates two spines file don’t include records 1 10:  real data :","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/HumdrumSyntax.html","id":"time","dir":"Articles","previous_headings":"Syntax","what":"Time","title":"The Humdrum Syntax","text":"one fundamental assumption regarding humdrum syntax encodes information: travel downward file (top bottom) encoding information order occurs time. true data records—interpetation comment records associated moment time first data record occurs . Information appears record (within one spine, different spines) assumed happen time.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/HumdrumSyntax.html","id":"record-types","dir":"Articles","previous_headings":"Syntax","what":"Record Types","title":"The Humdrum Syntax","text":"humdrum syntax recognizes four broad types records, five sub-types: Exclusive (**) Tandem (*) Reference (!!!) Global (!!) Local (!) Barlines (=) Data know type record ’re dealing looking first character token. tokens single record must type—can’t interpretation token comment token line. result, can refer type token, type whole record, tokens within record always type.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/HumdrumSyntax.html","id":"interpretations","dir":"Articles","previous_headings":"Syntax > Record Types","what":"Interpretations","title":"The Humdrum Syntax","text":"token starts *, interpretation token. Two stars ** indicates exclusive interpretation. Every spine must start exclusive interpretation, can one. exclusive interpretation spine tells us type information encoded spine, whole spine. instance, **drums interpration invented exclusive interpetation. examples ’re using , exclusive interpretation spines **kern, widely used humdrum interpretation, used encode music notation. Note humdrum file can different exclusive interpretations spine—don’t , example. read various humdrum interpretations defined, check humdrum.org.  token starts one *, called tandem interpretation. Tandem interpretations tell us specific, localized information interpret data. can different, overlapping tandem interpretations within spine. example, *C:, *Ibass, *M4/4, *M3/4, tandem interpretations. *C: used **kern indicate key C major. *Ibass indicates instrument associated spine (bass voice). *M4/4 *M3/4 indicate 4/4 3/4 meter respectively. last case brings something important tandem interprations: tandem interpretation applied subsequent data points, unless cancelled replaced another tandem intepretation type. Thus, humdrum file indicates 4/4 time starting record 5, switches 3/4 time record 13. However, *M4/4 record 4 doesn’t replace *C: record 3, different types tandem intepretations. One special token *- token. token indicates spine ends. *- missing end—one every spine—invalid humdrum file!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/HumdrumSyntax.html","id":"comments","dir":"Articles","previous_headings":"Syntax > Record Types","what":"Comments","title":"The Humdrum Syntax","text":"token begins !, comment token. Comments used freely include comments data. global comments (!!) associated spine—apply whole file point appear—local comments (!) specific particular spine. example, !! Ritardando global comment, !Suspension local comment, specific second spine.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/HumdrumSyntax.html","id":"reference-records","dir":"Articles","previous_headings":"Syntax > Record Types > Comments","what":"Reference Records","title":"The Humdrum Syntax","text":"one final type comment: reference records. Reference records global comments placed beginning end file. Reference records encode global metadata entire file: things like composed piece title piece . Reference records specific “reference codes,” usually three digits, come !!!, followed colon, whatever content record . instance, code !!!OTL: refers original title piece. Learn various standard humdrum reference records .","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Intervals.html","id":"intervals","dir":"Articles","previous_headings":"","what":"Intervals","title":"Rhythm and Pitch Intervals","text":"pitch time perceived relatively: relationship two points. Thus represent , conceptually, interval—difference. case pitch, interval two frequencies (abstractly, “tonal” interval circle--fifths). case rhythm, interval two time points—two onsets, onset offset. humdrumR, abstract intervals represented tonalInterval rhythmInterval objects, respectively. concretize abstract intervals, must establish relative . reference? actually multiple, useful ways can represent information. Since intervals relative, always implicit reference—origin, zero. tonalIntervals origin unison interval. rhythmIntervals origin zero. tonalIntervals rhythmIntervals constitute constitute algebraic module integers (module \\(\\mathbb{Z}\\)), appropriate arithmetic operations fully defined humdrumR. Since intervals can added/subtracted, interval can thought combination (addition) intervals. humdrumR, often “partition” interval combination useful sub-intervals.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Intervals.html","id":"serial-and-fixed-reference","dir":"Articles","previous_headings":"Intervals","what":"Serial and Fixed Reference","title":"Rhythm and Pitch Intervals","text":"Vectors humdrumR intervals can represented two fundamental ways: serial reference representation fixed reference representation. illustrate, use two examples, one rhythmic, one pitched: major scale “tag-line” rhythm 3+3+3+3+2+2","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Intervals.html","id":"fixed-reference","dir":"Articles","previous_headings":"Intervals > Serial and Fixed Reference","what":"Fixed reference","title":"Rhythm and Pitch Intervals","text":"fixed-reference representation, intervals interpreted relative fixed point (implicitly 0). Fixed-reference representations major scale (using semitones) tag-line rhythm follows: Note representation quite commonly used musicians, various forms, pitch. contrast, fixed-reference representations commonly used musicians rhythm. However, used contexts, essentially represent “time beginning” piece: Thus, timestamps/timelines DAWs “offsets” music21 examples fixed-reference representations time.","code":"referenceMajor   <- c(0, 2, 4, 5, 7, 9, 11, 12)  referenceTagline <- c(0, 3, 6, 9, 12, 14, 16)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Intervals.html","id":"serial-reference","dir":"Articles","previous_headings":"Intervals > Serial and Fixed Reference","what":"Serial reference","title":"Rhythm and Pitch Intervals","text":"alternative representation serial-reference representation, interval measured relative previous one. Thus, data point represents local change (\\(\\Delta\\)) parameter. lossless (explained ) first element serial data vector measured relative implicit reference (0). Serial representations tag-line major scale follows: representations also fairly intuitive musicians—representing “melodic intervals”—music notation sequencers represent pitch. contrast, serial-reference representation rhythm normative: traditional music notation note values serial-reference representation.","code":"serialMajor   <- c(0, 2, 2, 1, 2, 2, 2, 1)  serialTagline <- c(0, 3, 3, 3, 3, 2, 2)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Intervals.html","id":"transformations-interval-calculus","dir":"Articles","previous_headings":"Intervals > Serial and Fixed Reference","what":"Transformations (“Interval Calculus”)","title":"Rhythm and Pitch Intervals","text":"Since addition defined intervals fixed-reference serial-reference representations can translated . serial-reference representation can calculated pairwise differences elements fixed-reference data, first reference element appended beginning. Conversely, fixed-reference representation can calculated cumulative sum serial-reference data. Thus: humdrumR, refer two transformations delta (\\(\\Delta\\)) sigma (\\(\\Sigma\\)), differences sums respecticely. humdrumR, note relationship fixed- serial-reference representations analogous relationship function derivative. fixed-reference representation represents sequence independent values function (serial) index position. serial-reference representation represents sequence differences adjacent elements index—much fixed representation changes index. (Since first element serial-reference representation relative fixed (implicit) reference, normal one--many relationship derivatives functions removed, lossless one--one relationship maintained.) two transformations thus inverses : \\(x = sigma(delta(x))\\) \\(x = delta(sigma(x))\\). Derivative/Integral relationship Major Scale Derivative/Integral relationship Tagline Rhythm","code":"identical(cumsum(serialMajor), referenceMajor) ## [1] TRUE identical(cumsum(serialTagline), referenceTagline) ## [1] TRUE identical(c(referenceMajor[1], diff(referenceMajor)), serialMajor) ## [1] TRUE identical(c(referenceTagline[1], diff(referenceTagline)), serialTagline) ## [1] TRUE library(humdrumR) ## Loading required package: rlang ##  ## Attaching package: 'humdrumR' ## The following objects are masked from 'package:stats': ##  ##     lag, sigma, step ## The following object is masked from 'package:methods': ##  ##     signature identical(referenceMajor, sigma(delta(referenceMajor))) ## [1] TRUE identical(referenceMajor, delta(sigma(referenceMajor))) ## [1] FALSE"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Intervals.html","id":"dynamic-reference","dir":"Articles","previous_headings":"Intervals","what":"Dynamic Reference","title":"Rhythm and Pitch Intervals","text":"Since intervals additive, another possibilty use one vector intervals reference point second vector intervals. allows us create dynamic reference points. examples Figured Bass: bass voice texture encoded (serial/reference reprsentation) voices represented relative bass voice. Chord Tones: abstract “root” chord progression represented one vector, vectors representing “chord tones” (root, 3rd, 5th, 7th, etc.) relative chord root. Scale degrees: tonic key used dynamic reference, notes calculated relative tonic. Figured Bass Calculating dynamic reference intervals lossless complete information reference intervals maintained. instance, keep track serial fixed intervals bass voice. , keep track local key (usually using fixed interval “C”).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/KeysAndChord.html","id":"diatonic-sets","dir":"Articles","previous_headings":"","what":"Diatonic Sets","title":"Diatonic and Tertian Sets in humdrumR","text":"mentioned Pitch Tonality vignette, normative diatonic key consists set seven consetutive pitch chroma Line Fifths. diatonic set can orderd either line--fifths position: “scale-order,” corresponds steps \\(+2\\) (\\(-5\\)) modulo 7.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/KeysAndChord.html","id":"tertian-sets","dir":"Articles","previous_headings":"","what":"Tertian Sets","title":"Diatonic and Tertian Sets in humdrumR","text":"set seven notes diatonic key can reimagined chord—set notes played time. Specifically, full seven-note diatonic chord refered 13th chord. However, chords used tonal music subsets full diatonic set, particular three-note triads. viewing diatonic set chord, traditionally order set sequence ascending thirds, corresponding intervals \\(+4\\) line--fifths, modulo 7. tertian steps usually wrapped octave, resulting steps 9, 11, 13, instead 2, 4, 6. \\(2^7=\\) 128 possible subsets can formed full diatonic set. , seven possiblities built consecutive tertian steps theoritically priveledged : .e., \\(\\{\\{1\\}, \\{1,3\\}, \\{1,3,5\\}, \\{1,3,5,7\\}, \\{1,3,5,7,9\\}, \\{1,3,5,7,9,11\\}, \\{1,3,5,7,9,11,13\\}\\}\\). possible sets fairly commonplace Western theory well: \\(\\{1,5, 11\\}\\) (“sus4”), \\(\\{1,3,5,9\\}\\) (“add9”), \\(\\{1,3,5,13\\}\\) (“add6”), etc.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/KeysAndChord.html","id":"concrete-representations","dir":"Articles","previous_headings":"Tertian Sets","what":"Concrete Representations","title":"Diatonic and Tertian Sets in humdrumR","text":"numerous ways tertian sets notes traditionally notated annotated character strings. Unfortunately, systems always rigorously consisistent logical, convenient shorthands common chords lead ambiguity, /practices rooted traditional practices little relavance. humdrumR aims provide general approach make reading/writing chord annotations many forms possible. chord representation consists set least one following elements: root note. bass note. subset tertian steps present. Qualities chord steps, relative implicit explicit key. Traditional chord notation symbols often conflate merge various elements various ways, numerous common shorthands. particular, common diatonic traids—abstractly different combinations qualities 3rd 5th—represented various shorthands.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/KeysAndChord.html","id":"section","dir":"Articles","previous_headings":"","what":"Diatonic and Tertian Sets in humdrumR","title":"Diatonic and Tertian Sets in humdrumR","text":"Chord symbols tonal chroma practice often used indicate bass note part ostensible chord. instance, C7/Ab. consist form, unique symbol appended indicate one four unique triad types: major, minor, diminished, augmetned. However, cases, major assumed default, can ommitted. cases, either major minor symbol ommited, case root symbol used indicate major minor. (cases, case root symbol also matched diminished (lower) augmented (major) symbols).) Roman numerals 7ths 753 7, 653 65, 643 43, 642 42 2 9ths 9753: 1111100 7653: 1111001 6543: 1110011 6432: 1100111 7642: 1001111 11ths 11","code":"753:     1111000 653:     1110001 643:     1100011 642:     1000111"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Overview.html","id":"what-is-humdrum","dir":"Articles","previous_headings":"","what":"What is humdrum?","title":"Overview of humdrumR","text":"Humdrum system analyzing blah blah.","code":"library(humdrumR) #> Loading required package: rlang #>  #> Attaching package: 'humdrumR' #> The following objects are masked from 'package:stats': #>  #>     lag, sigma, step #> The following object is masked from 'package:graphics': #>  #>     segments #> The following object is masked from 'package:methods': #>  #>     signature"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/PitchAndTonality.html","id":"pitches-and-intervals","dir":"Articles","previous_headings":"","what":"Pitches and Intervals","title":"Pitch and Tonality in humdrumR","text":"humdrumR defines suite pitch functions, like kern, solfa, interval, semits. functions work essentially way: take input argument output pitch information particular format. example, Notice functions recognize pitch part input tokens, ignoring non-pitch (rhythm) information. want keep non-pitch part tokens, use inPlace argument: complete list basic pitch functions : kern pitch lilypond helmholtz tonh (German-style notation) interval solfa (relative-solfege) solfg (French-style fixed-solfege) degree (absolute scale degrees) deg (melodic scale degrees) bhatk (hindustani swara) step accidental quality octave semits midi cents pc (pitch classes) freq global documentation pitch functions can seen calling ?pitchFunctions. can also call documentation individual function, like ?kern.","code":"input <- c('4.c', '8d', '4e', '2.g')  kern(input) >    [1] \"c\" \"d\" \"e\" \"g\" interval(input) >    [1] \"P1\"  \"+M2\" \"+M3\" \"+P5\" semits(input) >    [1] 0 2 4 7 solfa(input) >    [1] \"do\" \"re\" \"mi\" \"so\" input <- c('4.c', '8d', '4e', '2.g')  kern(input, inPlace = TRUE) >    [1] \"4.c\" \"8d\"  \"4e\"  \"2.g\" interval(input, inPlace = TRUE) >    [1] \"4.P1\"  \"8+M2\"  \"4+M3\"  \"2.+P5\" semits(input, inPlace = TRUE) >    [1] \"4.0\" \"82\"  \"44\"  \"2.7\" solfa(input, inPlace = TRUE) >    [1] \"4.do\" \"8re\"  \"4mi\"  \"2.so\""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/PitchAndTonality.html","id":"generic-and-simple-pitch","dir":"Articles","previous_headings":"Pitch arguments","what":"Generic and Simple pitch","title":"Pitch and Tonality in humdrumR","text":"pitch functions accept logical (TRUE/FALSE) generic simple arguments.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/PitchAndTonality.html","id":"simple-vs-compound","dir":"Articles","previous_headings":"Pitch arguments > Generic and Simple pitch","what":"Simple vs Compound","title":"Pitch and Tonality in humdrumR","text":"default, pitch functions complete full pitch information, including octave information (“compound intervals”). However, specify simple = TRUE, octave information discarded, leaving simple part pitch information. (can alternately specify compound = FALSE).","code":"input <- c('c', 'dd#', 'G', 'GG', 'GGG-')  rbind(kern(input, simple = FALSE), kern(input, simple = TRUE)) >         [,1] [,2]  [,3] [,4] [,5]   >    [1,] \"c\"  \"dd#\" \"G\"  \"GG\" \"GGG-\" >    [2,] \"c\"  \"d#\"  \"g\"  \"g\"  \"g-\" rbind(interval(input, simple = FALSE), interval(input, simple = TRUE)) >         [,1] [,2]  [,3]  [,4]   [,5]   >    [1,] \"P1\" \"+A9\" \"-P4\" \"-P11\" \"-A18\" >    [2,] \"P1\" \"+A2\" \"-P4\" \"-P4\"  \"-A4\" rbind(semits(input, compound = TRUE), semits(input, compound = FALSE)) >         [,1] [,2] [,3] [,4] [,5] >    [1,]    0   15   -5  -17  -30 >    [2,]    0    3    7    7    6 rbind(solfa(input, compound = TRUE), solfa(input, compound = FALSE)) >         [,1] [,2]  [,3]  [,4]   [,5]    >    [1,] \"do\" \"^ri\" \"vso\" \"vvso\" \"vvvse\" >    [2,] \"do\" \"ri\"  \"so\"  \"so\"   \"se\""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/PitchAndTonality.html","id":"generic-vs-specific","dir":"Articles","previous_headings":"Pitch arguments","what":"Generic vs Specific","title":"Pitch and Tonality in humdrumR","text":"default, pitch functions complete full pitch information, including specific tonal information. “Specific” pitch information usually specified accidentals quality labels. specify generic = TRUE (specific = FALSE), accidentals qualities printed. case pitch representations without excplicit accidentals/qualities (like solfege), generic version pitch printed.","code":"input <- c('c', 'd#', 'e', 'f#', 'g')  rbind(kern(input, generic = FALSE), kern(input, generic = TRUE)) >         [,1] [,2] [,3] [,4] [,5] >    [1,] \"c\"  \"d#\" \"e\"  \"f#\" \"g\"  >    [2,] \"c\"  \"d\"  \"e\"  \"f\"  \"g\" rbind(interval(input, generic = FALSE), interval(input, generic = TRUE)) >         [,1] [,2]  [,3]  [,4]  [,5]  >    [1,] \"P1\" \"+A2\" \"+M3\" \"+A4\" \"+P5\" >    [2,] \"1\"  \"+2\"  \"+3\"  \"+4\"  \"+5\" rbind(semits(input, specific = TRUE), semits(input, specific = FALSE)) >         [,1] [,2] [,3] [,4] [,5] >    [1,]    0    3    4    6    7 >    [2,]    0    2    4    5    7 rbind(solfa(input, specific = TRUE), solfa(input, specific = FALSE)) >         [,1] [,2] [,3] [,4] [,5] >    [1,] \"do\" \"ri\" \"mi\" \"fi\" \"so\" >    [2,] \"do\" \"re\" \"mi\" \"fa\" \"so\""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/RPrimer.html","id":"basic-data-structures","dir":"Articles","previous_headings":"","what":"Basic Data Structures","title":"An R Primer for humdrumR","text":"R, two fundamental data structures used time: “atomic” vectors data.tables","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/RPrimer.html","id":"vectors","dir":"Articles","previous_headings":"Basic Data Structures","what":"Vectors","title":"An R Primer for humdrumR","text":"R, basic units—atoms, —information called “atomic” vectors. three basic atomic data types: Examples: 3, 4.2, -13, 254.30 Examples: \"note\", \"\", \", dear, female dear\" Examples: TRUE, FALSE might wondering, calling basic atoms “vectors”? Well, R, basic atomic data types always considered collection ordered values. ordered collections called vectors. simple examples , vector single value, just looks like one value—single values like often called “scalars”. However, R doesn’t really distinguish scalars (single values) vectors (multiple values)—everything always vector. (Still, sometimes refer length-1 vectors scalars.) make vector R, use c command, : example, ’ve created five vectors. numeric vector length 3. character vector length four (composers). logical vector length 2) ’s right, c(32.3) 32.3 thing—vector length 1. Notice vectors can’t mix--match different data types; makes sense cause vector single type thing. means commands like c(3, \"\") actually create character vector, 3 forced character (\"3\").","code":"c(1, 2, 3) >    [1] 1 2 3  c(\"Bach\", \"Mozart\", \"Beethoven\", \"Brahms\") >    [1] \"Bach\"      \"Mozart\"    \"Beethoven\" \"Brahms\"  c(TRUE, FALSE) >    [1]  TRUE FALSE  c(32.3) >    [1] 32.3  32.3 >    [1] 32.3"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/RPrimer.html","id":"vectorization","dir":"Articles","previous_headings":"Basic Data Structures > Vectors","what":"Vectorization","title":"An R Primer for humdrumR","text":"everything vector time useful, allows us think use collections data single thing. give , say, ten thousand numbers, don’t worry manipulating ten thousand things: rather, just work one thing: vector, happens length 10,000. R, call vectorization—generally, R humdrumR constantly taking advantage vectorization make lives super easy! example vectorization, watch : created two numeric vectors: first eight numbers Fibonnaci sequence single number 2 multiplied together! Notice entire Fibonnaci vector multiplied two! don’t worry multiplying number vector, done us. rules working vectors? two ideal circumstances working vectors. length. One vector length 1, isn’t. first case, work multiple vectors length, value vector “lined” values vector. , example, add two vectors together, “lined ” pair numbers added: second case, one vectors length-1 (“scalar”). case, scalar value paired value longer vector (Fibonnaci example ). happens vectors longer one, length. Well, R generally attempt “recycle” shorter vector—means repeat — necessary match length longer vector. shorter vector evenly divides longer vector, ’ll generally problem: division perfect, R still “recycle” shorter vector, ’ll get warning: see warning message R us? “longer object length multiple shorter object length” ’s R telling us ’ve got obvious mismatch lengths vectors. Generally, best work vectors length /scalar values (length-1 vectors), can avoid worrying exactly R “recycling” values. brings us …","code":"c(1, 1, 2, 3, 5, 8, 13, 21) * 2 >    [1]  2  2  4  6 10 16 26 42 c(1, 2, 3) + c(5, 4, 3) >    [1] 6 6 6   paste(c('a', 'b', 'c'), c(1, 2, 3)) >    [1] \"a 1\" \"b 2\" \"c 3\" c(1, 2, 3) + 5 >    [1] 6 7 8   paste(c('a', 'b', 'c'), 1) >    [1] \"a 1\" \"b 1\" \"c 1\" c(1, 2, 3, 4) * c(2, 3) >    [1]  2  6  6 12 c(1, 2, 3, 4) * c(2, 3, 4) >    Warning in c(1, 2, 3, 4) * c(2, 3, 4): longer object length is not a multiple of >    shorter object length >    [1]  2  6 12  8"},{"path":[]},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/ReadWrite.html","id":"reading-humdrum-data","dir":"Articles","previous_headings":"","what":"Reading humdrum data","title":"Reading and writing data","text":"readHumdrum function gateway humdrumR: function use read humdrum data, encoded humdrum-syntax text files, R.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/ReadWrite.html","id":"practice-data","dir":"Articles","previous_headings":"Reading humdrum data","what":"Practice Data","title":"Reading and writing data","text":"following examples, make use small number raw humdrum data files included humdrumR. access files, need navigate directory computer installed humdrumR—fortunately, humdrumR records directory computer variable called humdrumRroot. load humdrumR library, just need set R “working directory” location using command setwd. humdrum data stored subdirectory called “HumdrumData”—can look contents directory using dir(recursive = TRUE): can see, five directories containing total fifty files.","code":"library(humdrumR) setwd(humdrumRroot) dir('HumdrumData', recursive = TRUE) #>  [1] \"BachChorales/chor001.krn\"                   #>  [2] \"BachChorales/chor002.krn\"                   #>  [3] \"BachChorales/chor003.krn\"                   #>  [4] \"BachChorales/chor004.krn\"                   #>  [5] \"BachChorales/chor005.krn\"                   #>  [6] \"BachChorales/chor006.krn\"                   #>  [7] \"BachChorales/chor007.krn\"                   #>  [8] \"BachChorales/chor008.krn\"                   #>  [9] \"BachChorales/chor009.krn\"                   #> [10] \"BachChorales/chor010.krn\"                   #> [11] \"BeethovenVariations/B075_00_01_a.krn\"       #> [12] \"BeethovenVariations/B075_00_02_a.krn\"       #> [13] \"BeethovenVariations/B075_00_03_a.krn\"       #> [14] \"BeethovenVariations/B075_00_04_a.krn\"       #> [15] \"BeethovenVariations/B075_00_05_a.krn\"       #> [16] \"BeethovenVariations/B075_00_06_a.krn\"       #> [17] \"BeethovenVariations/B075_01_01_a.krn\"       #> [18] \"BeethovenVariations/B075_01_02_a.krn\"       #> [19] \"BeethovenVariations/B075_01_03_a.krn\"       #> [20] \"BeethovenVariations/B075_01_04_a.krn\"       #> [21] \"BeethovenVariations/B075_01_05_a.krn\"       #> [22] \"BeethovenVariations/B075_01_06_a.krn\"       #> [23] \"MozartVariations/M354_00_01a_a.krn\"         #> [24] \"MozartVariations/M354_00_02b_a.krn\"         #> [25] \"MozartVariations/M354_00_03c_a.krn\"         #> [26] \"MozartVariations/M354_00_04d_a.krn\"         #> [27] \"MozartVariations/M354_01_01a_a.krn\"         #> [28] \"MozartVariations/M354_01_02b_a.krn\"         #> [29] \"MozartVariations/M354_01_03c_a.krn\"         #> [30] \"MozartVariations/M354_01_04d_a.krn\"         #> [31] \"RapFlow/2pac_IGetAround.rap\"                #> [32] \"RapFlow/BeastieBoys_BrassMonkey.rap\"        #> [33] \"RapFlow/Coolio_GangstasParadise.rap\"        #> [34] \"RapFlow/Ludacris_MoneyMaker.rap\"            #> [35] \"RapFlow/NotoriousBIG_Hypnotize.rap\"         #> [36] \"RapFlow/RobBase_ItTakesTwo.rap\"             #> [37] \"RapFlow/WillSmith_Summertime.rap\"           #> [38] \"RollingStoneCorpus/all_apologies.hum\"       #> [39] \"RollingStoneCorpus/back_in_black.hum\"       #> [40] \"RollingStoneCorpus/blue_suede_shoes.hum\"    #> [41] \"RollingStoneCorpus/born_to_be_wild.hum\"     #> [42] \"RollingStoneCorpus/god_only_knows.hum\"      #> [43] \"RollingStoneCorpus/hey_jude.hum\"            #> [44] \"RollingStoneCorpus/i_walk_the_line.hum\"     #> [45] \"RollingStoneCorpus/kashmir.hum\"             #> [46] \"RollingStoneCorpus/layla.hum\"               #> [47] \"RollingStoneCorpus/lets_stay_together.hum\"  #> [48] \"RollingStoneCorpus/living_for_the_city.hum\" #> [49] \"RollingStoneCorpus/me_and_bobby_mcgee.hum\"  #> [50] \"RollingStoneCorpus/your_song.hum\""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/ReadWrite.html","id":"targeting-files","dir":"Articles","previous_headings":"Reading humdrum data","what":"Targeting files","title":"Reading and writing data","text":"use readHumdrum call function one () character-string arguments. (function documentation (?readHumdrum), ’ll see arguments called ...—R, ... means number arguments.) arguments interpreted regular expressions, matched directories files system. call “REpath-patterns,” short Regular Expression directory-path patterns. example, uses REpath-pattern \"HumdrumData/BachChorales/chor.*.krn\" match files ‘HumdrumData/BachChorales’ directory whose name matches regular expression “chor..krn.” can see, REpath-pattern includes directory (folder) paths (relative absolute)—using operating system’s appopriate delimeter (”\" windows, ”/” everybody else)—* pattern matching file paths. directory also treated regular expression, possibly matching multiple directories. Let’s break : humdrumR splits REpath-pattern input string three parts: \"HumdrumData\", \"BachChorales\", \"chor.*.krn\", treats three regular expressions. first two expressions used match directories, last expression used match files. , readHumdrum('HumdrumData/BeethovenVariations/.*.krn') matches files ”.krn” extension “BeethovenVariations” directories readHumdrum('HumdrumData/MozartVariations/.*.krn') matches files “MozartVariations” directories, command readHumdrum('HumdrumData/.*Variations/.*.krn') match kern files directories! careful: since directory/file name always treated like regular expression, can sometimes specify something general intend. instance, command readHumdrum('MyFolder/.*') match files folder called “MyFolder,” also match folders names “MyFolder_Also”, “ThisIsMyFolder.” want sure match exactly one one directory/file, use “^” “$” regular-expression markers explicitely mark beginning end pattern: command readHumdrum('^MyFolder$/.*') read files one directory “MyFolder.” read test files can enter: Note: Since humdrumR can read files multiple directories , possible two files file name, different directories matched. happens, humdrumR identifies file enough ’s directory path make sure unique.","code":"library(humdrumR) setwd(humdrumRroot)  readHumdrum('HumdrumData/BachChorales/chor.*.krn') #> ############################ vvv chor001.krn vvv ############################# #>      1:  !!!COM: Bach, Johann Sebastian #>      2:  !!!CDT: 1685/02/21/-1750/07/28/ #>      3:  !!!OTL@@DE: Aus meines Herzens Grunde #>      4:  !!!OTL@EN:      From the Depths of My Heart #>      5:  !!!SCT: BWV 269 #>      6:  !!!PC#: 1 #>      7:  !!!AGN: chorale #>    126:          **kern        **kern        **kern        **kern #>    127:          *ICvox        *ICvox        *ICvox        *ICvox #>    128:          *Ibass       *Itenor        *Ialto       *Isoprn #>    129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano #>    130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] #>    131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] #>    132:             *>A           *>A           *>A           *>A #>    133:         *clefF4      *clefGv2       *clefG2       *clefG2 #>    134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] #>      8:             *G:           *G:           *G:           *G: #>      9:             *F:             *             *             * #>     10:           *M3/4         *M3/4         *M3/4         *M3/4 #>     11:          *MM100        *MM100        *MM100        *MM100 #>     12:             4GG            4B            4d            4g #>     13:              =1            =1            =1            =1 #>     14:              4G            4B            4d            2g #>     15:              4E           8cL            4e             . #>     16:               .           8BJ             .             . #>     17:             4F#            4A            4d           4dd #>     18:              =2            =2            =2            =2 #>     19:              4G            4G            2d           4.b #>     20:              4D           4F#             .             . #>     21:               .             .             .            8a #>     22:              4E            4G            4B            4g #>     23:              =3            =3            =3            =3 #>     24:              4C           8cL           8eL           4.g #>     25:               .           8BJ            8d             . #>     26:            8BBL            4c            8e             . #>     27:            8AAJ             .          8f#J            8a #>     28:             4GG            4d            4g            4b #>     29:              =4            =4            =4            =4 #>     30:             2D;           2d;          2f#;           2a; #>     31:             4GG            4d            4g            4b #> 32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #> ############################ ^^^ chor001.krn ^^^ ############################# #>  #>      (8 more files...) #>  #> ############################ vvv chor010.krn vvv ############################# #>   1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>     52:            2AA;           2c;           2e;           2a; #>     53:              2A            2e            2a           2cc #>     54:              =9            =9            =9            =9 #>     55:              4E            4e            4g            4b #>     56:             8DL            4e            4g           4cc #>     57:             8CJ             .             .             . #>     58:             4BB            4d           8gL           4dd #>     59:               .             .           8fJ             . #>     60:              4C            4c            4e            4g #>     61:             =10           =10           =10           =10 #>     62:              4D           8F#            4d            4b #>     63:               .            4G             .             . #>     64:              4D             .            4c            4a #>     65:               .           8F#             .             . #>     66:            2GG;           2G;           2B;           2g; #>     67:             =11           =11           =11           =11 #>     68:              2C            2G            2e            2g #>     69:             4AA            4A            4e           4cc #>     70:              4E           4G#           8eL            4b #>     71:               .             .           8dJ             . #>     72:             =12           =12           =12           =12 #>     73:              4F            4A            4c            4a #>     74:              4C            4G            4c            4e #>     75:            4BB-            4G           [2d            4g #>     76:             4AA            4A             .            4f #>     77:             =13           =13           =13           =13 #>     78:            4GG#            4B           4d]           1e; #>     79:             4AA            4A            4c             . #>     80:            2EE;         2G#X;           2B;             . #>     81:              ==            ==            ==            == #>     82:              *-            *-            *-            *- #>     83:  !!!hum2abc: -Q '' #>     84:  !!!title: @{PC#}. @{OTL@@DE} #>     85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** #>     86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** #>     87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** #>     88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** #>     89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 #>     90:  !!!EED:  Craig Stuart Sapp #>     91:  !!!EEV:  2009/05/22 #> ############################ ^^^ chor010.krn ^^^ ############################# #>                       (***four global comments truncated due to screen size***) #>  #>  humdrumR corpus of ten files. #>   Data fields:  #>          *Token :: character readHumdrum('HumdrumData/.*Variations/.*.krn') #> ############# vvv B075_00_01_a.krn vvv ############## #>     1:  !!!COM: Beethoven #>     2:  !!!OTL: 7 Variations on a Quartet by Winter #>     3:  !!!Variation: Theme a #>     4:    **function      **harm   **kern      **kern #>     5:             *           *  *clefG2     *clefG2 #>     6:             *           *   *k[b-]      *k[b-] #>     7:         *M2/4       *M2/4    *M2/4       *M2/4 #>     8:           *F:         *F:      *F:         *F: #>     9:            4T          4I       4r        4ccc #>    10:            =1          =1       =1          =1 #>    11:            2T          2I       2f        8aa' #>    12:             .           .        .        8ff' #>    13:             .           .        .        8aa' #>    14:             .           .        .       8ccc' #>    15:            =2          =2       =2          =2 #>    16:            4T         4V7       4g        4bb- #>    17:            4T          4I      4f)         4aa #>    18:            =3          =3       =3          =3 #>    19:            2T          2V       4c        8gg' #>    20:             .           .        .        8ff' #>    21:             .           .       4c        8ee' #>    22:             .           .        .        8ff' #>    23:            =4          =4       =4          =4 #>    24:            4T          4V       8c         8gg #>    25:             .           .       8r          8r #>    26:            4T          4I       4r        4ccc #>    27:            =5          =5       =5          =5 #>    28:            2T          2I       2f        8aa' #>    29:             .           .        .        8ff' #>    30:             .           .        .        8aa' #>    31:             .           .        .       8ccc' #>    32:            =6          =6       =6          =6 #>    33:            4T         4V7       4g        4bb- #>    34:            4T          4I       4a         4aa #>    35:            =7          =7       =7          =7 #>    36:            4P        4iib     8B-L         8gg #>    37:             .           .     8B-J         8gg #>    38:            4D         4V7      8cL         8ee #>    39:             .           .      8cJ        16dd #>    40:             .           .        .     16eeJJ) #> 41-45:::::::::::::::::::::::::::::::::::::::::::::::: #> ############# ^^^ B075_00_01_a.krn ^^^ ############## #>  #>      (18 more files...) #>  #> ############# vvv M354_01_04d_a.krn vvv ############# #>  1-21:::::::::::::::::::::::::::::::::::::::::::::::: #>    22:             .           .        .     (16ccLL #>    23:             .           .      =43        16b- #>    24:             .           .       *^         16a #>    25:            4D         4V7       8r     16b-JJ) #>    26:             .           .        .         =41 #>    27:             .           .      (8G    (16ee-LL #>    28:             .           .        .        16dd #>    41:             *           *        .       16cc# #>    42:           =44         =44     8FJ)     16ddJJ) #>    43:            2T          2I        .     (16ccLL #>    44:             .           .       *v        16b- #>    45:             .           .     8E-L         16a #>    46:            *-          *-    8BB-J     16b-JJ) #>    47:        **harm      **kern     4EE-           * #>    48:             *     *clefG2       *-         =42 #>    49:             *  *k[b-e-a-]      2B-           * #>     4:         *M2/4       *M2/4        .    (16ee-LL #>     5:          *E-:        *E-:        .        16ff #>     6:           =40         =40        .       16gg) #>     7:             *          *^        .      16b'JJ #>     8:           2V7          8r        .     (16ccLL #>     9:             .           .        .        16dd #>    10:             .          4f      2A-      16ee-) #>    29:             .         4a-        .     16a-'JJ #>    30:             .           .        .         =43 #>    31:             .           .        .           * #>    32:             .           .        .      (16gLL #>    33:             .          8f        .        16a- #>    34:           =41           .        .       16b-) #>    35:          2V7d         =41        .      16e'JJ #>    36:             .          8r       *v      (16fLL #>    37:             .           .     2BB-         16g #>    38:             .         4B-        .       16a-) #>    39:             .          4f        .      16d'JJ #>    40:             .           .        .           * #>    50:             .           .        .         =44 #>    51:             .           .        .         4e- #>    52:             *         8B-        .           . #>    53:           =42          8f        .          4r #>    54:             *           .       *v          *- #> ############# ^^^ M354_01_04d_a.krn ^^^ ############# #>  #>  humdrumR corpus of twenty files. #>   Data fields:  #>          *Token :: character readHumdrum('HumdrumData/.*/.*') #> ############################ vvv chor001.krn vvv ############################ #>      1:  !!!COM: Bach, Johann Sebastian #>      2:  !!!CDT: 1685/02/21/-1750/07/28/ #>      3:  !!!OTL@@DE: Aus meines Herzens Grunde #>      4:  !!!OTL@EN:      From the Depths of My Heart #>      5:  !!!SCT: BWV 269 #>      6:  !!!PC#: 1 #>      7:  !!!AGN: chorale #>    126:          **kern        **kern        **kern        **kern #>    127:          *ICvox        *ICvox        *ICvox        *ICvox #>    128:          *Ibass       *Itenor        *Ialto       *Isoprn #>    129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano #>    130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] #>    131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] #>    132:             *>A           *>A           *>A           *>A #>    133:         *clefF4      *clefGv2       *clefG2       *clefG2 #>    134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] #>      8:             *G:           *G:           *G:           *G: #>      9:             *F:             *             *             * #>     10:           *M3/4         *M3/4         *M3/4         *M3/4 #>     11:          *MM100        *MM100        *MM100        *MM100 #>     12:             4GG            4B            4d            4g #>     13:              =1            =1            =1            =1 #>     14:              4G            4B            4d            2g #>     15:              4E           8cL            4e             . #>     16:               .           8BJ             .             . #>     17:             4F#            4A            4d           4dd #>     18:              =2            =2            =2            =2 #>     19:              4G            4G            2d           4.b #>     20:              4D           4F#             .             . #>     21:               .             .             .            8a #>     22:              4E            4G            4B            4g #>     23:              =3            =3            =3            =3 #>     24:              4C           8cL           8eL           4.g #>     25:               .           8BJ            8d             . #>     26:            8BBL            4c            8e             . #>     27:            8AAJ             .          8f#J            8a #>     28:             4GG            4d            4g            4b #>     29:              =4            =4            =4            =4 #>     30:             2D;           2d;          2f#;           2a; #>     31:             4GG            4d            4g            4b #> 32-125::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #> ############################ ^^^ chor001.krn ^^^ ############################ #>  #>      (48 more files...) #>  #> ########################### vvv your_song.hum vvv ########################### #> 1-1189::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>   1190:               .             .             3             . #>   1191:               .             .             .             . #>   1192:               .             .             2             . #>   1193:               .             .             1             . #>   1194:               .             .             .             . #>   1195:            =119          =119          =119          =119 #>   1196:            ii65            IV             2       222.340 #>   1197:               .             .             .             . #>   1198:               .             .             .             . #>   1199:               .             .             6             . #>   1200:               .             .             .             . #>   1201:               .             .             .             . #>   1202:               .             .             .             . #>   1203:               .             .             6             . #>   1204:            =120          =120          =120          =120 #>   1205:               .             .            b3       224.253 #>   1206:               .             .             2             . #>   1207:               .             .             .             . #>   1208:               .             .             1             . #>   1209:               .             .             .             . #>   1210:               .             .             1             . #>   1211:               .             .             1             . #>   1212:               .             .             .             . #>   1213:            =121          =121          =121          =121 #>   1214:            *tb1          *tb1          *tb1             * #>   1215:               I             I             .       226.135 #>   1216:            =122          =122          =122          =122 #>   1217:              IV          IV64             .       228.013 #>   1218:            =123          =123          =123          =123 #>   1219:               V           Vs4             .       229.838 #>   1220:            =124          =124          =124          =124 #>   1221:              IV          IV64             .       231.691 #>   1222:            =125          =125          =125          =125 #>   1223:               I             I             .       233.583 #>   1224:              *-            *-            *-            *- #>   1225:  !!!ONB: Translated from original encodings in the Rolling Stone C*** #>   1226:  !!!ONB: Original transcribers noted in comments in each spine: !D*** #>   1227:  !!!YOE: David Temperley, Trevor de Clercq #>   1228:  !!!EED: Nathaniel Condit-Schultz (fathermckenzie.net) #>   1229:  !!!ENC: Nathaniel Condit-Schultz (fathermckenzie.net), automated #> ########################### ^^^ your_song.hum ^^^ ########################### #>                     (***three global comments truncated due to screen size***) #>  #>  humdrumR corpus of fifty files. #>   Data fields:  #>          *Token :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/ReadWrite.html","id":"multi-argument-approach","dir":"Articles","previous_headings":"Reading humdrum data > Targeting files","what":"Multi-Argument Approach","title":"Reading and writing data","text":"Earlier mentioned can one RE-path patterns. one? Well, can divided RE-path patterns across multiple arguments (left right): Instead writing readHumdrum(\"HumdrumData/BachChorales/chor.*.krn\"), can write readHumdrum(\"HumdrumData\", \"BachChorales\", \"chor.*.krn\"). Thus two approaches identical. ’s advantage approach? ’ll see next section.","code":"readHumdrum(\"HumdrumData/BachChorales/chor.*.krn\")  readHumdrum(\"HumdrumData\", \"BachChorales\", \"chor.*.krn\")"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/ReadWrite.html","id":"multiple-patterns","dir":"Articles","previous_headings":"Reading humdrum data > Targeting files","what":"Multiple Patterns","title":"Reading and writing data","text":"Sometimes, expressing files want single regular expression possible. Luckily, readHumdrum can accept many separate patterns want, just group vector. Instead writing readHumdrum('HumdrumData/.*Variations/.*.krn'), explicit write ’ve used c command create vector two REpath-patterns. However, lot (bug-prone) typing…combine multiple patterns Multi-Argument Approach ?: get result! work exactly? ’ve fed three arguments readHumdrum. first last arguments (\"HumdrumData\" \".*.krn\") length one. However, middle argument (\"...Variations\") length two. readHumdrum concatenates three arguments together, making two separate REpath-patterns: Note: possible write multiple patterns match () files. argument multipleInstances = FALSE, unique file read (first matching pattern). multipleInstances = TRUE, file(s) can read .","code":"readHumdrum(c('HumdrumData/BeethovenVariations/.*.krn', 'HumdrumData/MozartVariations/.*.krn')) #> ############# vvv B075_00_01_a.krn vvv ############## #>     1:  !!!COM: Beethoven #>     2:  !!!OTL: 7 Variations on a Quartet by Winter #>     3:  !!!Variation: Theme a #>     4:    **function      **harm   **kern      **kern #>     5:             *           *  *clefG2     *clefG2 #>     6:             *           *   *k[b-]      *k[b-] #>     7:         *M2/4       *M2/4    *M2/4       *M2/4 #>     8:           *F:         *F:      *F:         *F: #>     9:            4T          4I       4r        4ccc #>    10:            =1          =1       =1          =1 #>    11:            2T          2I       2f        8aa' #>    12:             .           .        .        8ff' #>    13:             .           .        .        8aa' #>    14:             .           .        .       8ccc' #>    15:            =2          =2       =2          =2 #>    16:            4T         4V7       4g        4bb- #>    17:            4T          4I      4f)         4aa #>    18:            =3          =3       =3          =3 #>    19:            2T          2V       4c        8gg' #>    20:             .           .        .        8ff' #>    21:             .           .       4c        8ee' #>    22:             .           .        .        8ff' #>    23:            =4          =4       =4          =4 #>    24:            4T          4V       8c         8gg #>    25:             .           .       8r          8r #>    26:            4T          4I       4r        4ccc #>    27:            =5          =5       =5          =5 #>    28:            2T          2I       2f        8aa' #>    29:             .           .        .        8ff' #>    30:             .           .        .        8aa' #>    31:             .           .        .       8ccc' #>    32:            =6          =6       =6          =6 #>    33:            4T         4V7       4g        4bb- #>    34:            4T          4I       4a         4aa #>    35:            =7          =7       =7          =7 #>    36:            4P        4iib     8B-L         8gg #>    37:             .           .     8B-J         8gg #>    38:            4D         4V7      8cL         8ee #>    39:             .           .      8cJ        16dd #>    40:             .           .        .     16eeJJ) #> 41-45:::::::::::::::::::::::::::::::::::::::::::::::: #> ############# ^^^ B075_00_01_a.krn ^^^ ############## #>  #>      (18 more files...) #>  #> ############# vvv M354_01_04d_a.krn vvv ############# #>  1-21:::::::::::::::::::::::::::::::::::::::::::::::: #>    22:             .           .        .     (16ccLL #>    23:             .           .      =43        16b- #>    24:             .           .       *^         16a #>    25:            4D         4V7       8r     16b-JJ) #>    26:             .           .        .         =41 #>    27:             .           .      (8G    (16ee-LL #>    28:             .           .        .        16dd #>    41:             *           *        .       16cc# #>    42:           =44         =44     8FJ)     16ddJJ) #>    43:            2T          2I        .     (16ccLL #>    44:             .           .       *v        16b- #>    45:             .           .     8E-L         16a #>    46:            *-          *-    8BB-J     16b-JJ) #>    47:        **harm      **kern     4EE-           * #>    48:             *     *clefG2       *-         =42 #>    49:             *  *k[b-e-a-]      2B-           * #>     4:         *M2/4       *M2/4        .    (16ee-LL #>     5:          *E-:        *E-:        .        16ff #>     6:           =40         =40        .       16gg) #>     7:             *          *^        .      16b'JJ #>     8:           2V7          8r        .     (16ccLL #>     9:             .           .        .        16dd #>    10:             .          4f      2A-      16ee-) #>    29:             .         4a-        .     16a-'JJ #>    30:             .           .        .         =43 #>    31:             .           .        .           * #>    32:             .           .        .      (16gLL #>    33:             .          8f        .        16a- #>    34:           =41           .        .       16b-) #>    35:          2V7d         =41        .      16e'JJ #>    36:             .          8r       *v      (16fLL #>    37:             .           .     2BB-         16g #>    38:             .         4B-        .       16a-) #>    39:             .          4f        .      16d'JJ #>    40:             .           .        .           * #>    50:             .           .        .         =44 #>    51:             .           .        .         4e- #>    52:             *         8B-        .           . #>    53:           =42          8f        .          4r #>    54:             *           .       *v          *- #> ############# ^^^ M354_01_04d_a.krn ^^^ ############# #>  #>  humdrumR corpus of twenty files. #>   Data fields:  #>          *Token :: character readHumdrum('HumdrumData',             c('BeethovenVariations', 'MozartVariations'),             '.*.krn') #> ############# vvv B075_00_01_a.krn vvv ############## #>     1:  !!!COM: Beethoven #>     2:  !!!OTL: 7 Variations on a Quartet by Winter #>     3:  !!!Variation: Theme a #>     4:    **function      **harm   **kern      **kern #>     5:             *           *  *clefG2     *clefG2 #>     6:             *           *   *k[b-]      *k[b-] #>     7:         *M2/4       *M2/4    *M2/4       *M2/4 #>     8:           *F:         *F:      *F:         *F: #>     9:            4T          4I       4r        4ccc #>    10:            =1          =1       =1          =1 #>    11:            2T          2I       2f        8aa' #>    12:             .           .        .        8ff' #>    13:             .           .        .        8aa' #>    14:             .           .        .       8ccc' #>    15:            =2          =2       =2          =2 #>    16:            4T         4V7       4g        4bb- #>    17:            4T          4I      4f)         4aa #>    18:            =3          =3       =3          =3 #>    19:            2T          2V       4c        8gg' #>    20:             .           .        .        8ff' #>    21:             .           .       4c        8ee' #>    22:             .           .        .        8ff' #>    23:            =4          =4       =4          =4 #>    24:            4T          4V       8c         8gg #>    25:             .           .       8r          8r #>    26:            4T          4I       4r        4ccc #>    27:            =5          =5       =5          =5 #>    28:            2T          2I       2f        8aa' #>    29:             .           .        .        8ff' #>    30:             .           .        .        8aa' #>    31:             .           .        .       8ccc' #>    32:            =6          =6       =6          =6 #>    33:            4T         4V7       4g        4bb- #>    34:            4T          4I       4a         4aa #>    35:            =7          =7       =7          =7 #>    36:            4P        4iib     8B-L         8gg #>    37:             .           .     8B-J         8gg #>    38:            4D         4V7      8cL         8ee #>    39:             .           .      8cJ        16dd #>    40:             .           .        .     16eeJJ) #> 41-45:::::::::::::::::::::::::::::::::::::::::::::::: #> ############# ^^^ B075_00_01_a.krn ^^^ ############## #>  #>      (18 more files...) #>  #> ############# vvv M354_01_04d_a.krn vvv ############# #>  1-21:::::::::::::::::::::::::::::::::::::::::::::::: #>    22:             .           .        .     (16ccLL #>    23:             .           .      =43        16b- #>    24:             .           .       *^         16a #>    25:            4D         4V7       8r     16b-JJ) #>    26:             .           .        .         =41 #>    27:             .           .      (8G    (16ee-LL #>    28:             .           .        .        16dd #>    41:             *           *        .       16cc# #>    42:           =44         =44     8FJ)     16ddJJ) #>    43:            2T          2I        .     (16ccLL #>    44:             .           .       *v        16b- #>    45:             .           .     8E-L         16a #>    46:            *-          *-    8BB-J     16b-JJ) #>    47:        **harm      **kern     4EE-           * #>    48:             *     *clefG2       *-         =42 #>    49:             *  *k[b-e-a-]      2B-           * #>     4:         *M2/4       *M2/4        .    (16ee-LL #>     5:          *E-:        *E-:        .        16ff #>     6:           =40         =40        .       16gg) #>     7:             *          *^        .      16b'JJ #>     8:           2V7          8r        .     (16ccLL #>     9:             .           .        .        16dd #>    10:             .          4f      2A-      16ee-) #>    29:             .         4a-        .     16a-'JJ #>    30:             .           .        .         =43 #>    31:             .           .        .           * #>    32:             .           .        .      (16gLL #>    33:             .          8f        .        16a- #>    34:           =41           .        .       16b-) #>    35:          2V7d         =41        .      16e'JJ #>    36:             .          8r       *v      (16fLL #>    37:             .           .     2BB-         16g #>    38:             .         4B-        .       16a-) #>    39:             .          4f        .      16d'JJ #>    40:             .           .        .           * #>    50:             .           .        .         =44 #>    51:             .           .        .         4e- #>    52:             *         8B-        .           . #>    53:           =42          8f        .          4r #>    54:             *           .       *v          *- #> ############# ^^^ M354_01_04d_a.krn ^^^ ############# #>  #>  humdrumR corpus of twenty files. #>   Data fields:  #>          *Token :: character \"HumdrumData/BeethovenVariations/.*.krn\" \"HumdrumData/MozartVariations/.*.krn\""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/ReadWrite.html","id":"pattern-names","dir":"Articles","previous_headings":"Reading humdrum data > Targeting files > Multiple Patterns","what":"Pattern Names","title":"Reading and writing data","text":"Whenever specific one REpath-pattern, humdrumR gives names can access Label field resulting humdrumR data object. can choose labels giving names patterns multi-pattern vectors: Thus, write two separate patterns matched read names \"Rap\" \"Rock\" associated resulting Label field. feature useful working multiple heterogenous datasets want able apply analyses/parsing one data subsets.","code":"readHumdrum('HumdrumData',             c(Rap  = 'Rap/.*',               Rock = 'RollingStone/.*')) -> rapAndRock"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/ReadWrite.html","id":"contains","dir":"Articles","previous_headings":"Reading humdrum data > Targeting files","what":"Contains","title":"Reading and writing data","text":"Sometimes want read humdrum files contain particular data. instance, might want read files minor key. One option read files corpus filter files don’t want (see humdrumR filtering vignette learn . However, cases, can save lot time effort filter files want parsing . contains argument readHumdrum can used just way! contains argument must character vector—character string treated regular expression, files contain matches regular expressions read. Thus, read pieces minor keys writing: (regular expression matches standard humdrum tandem interpretations minor keys.)","code":"readHumdrum('HumdrumData', 'BachChorales', 'chor.*.krn',             contains = '\\\\*[a-g][-b#]*:')  #> ############################ vvv chor003.krn vvv ############################# #>      1:  !!!COM: Bach, Johann Sebastian #>      2:  !!!CDT: 1685/02/21/-1750/07/28/ #>      3:  !!!OTL@@DE: Ach Gott, vom Himmel sieh darein #>      4:  !!!OTL@EN: Oh God, look down from Heaven #>      5:  !!!OPR: Cantata BWV 153: Schau, lieber Gott, wie meine Feind #>      6:  !!!SCT: BWV 153/1 #>      7:  !!!PC#: 3 #>      8:  !!!AGN: chorale #>    101:          **kern        **kern        **kern        **kern #>    102:          *ICvox        *ICvox        *ICvox        *ICvox #>    103:          *Ibass       *Itenor        *Ialto       *Isoprn #>    104:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano #>    105:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] #>    106:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] #>    107:             *>A           *>A           *>A           *>A #>    108:         *clefF4      *clefGv2       *clefG2       *clefG2 #>    109:          *k[f#]        *k[f#]        *k[f#]        *k[f#] #>    110:             *a:           *a:           *a:           *a: #>      9:         !dorian       !dorian       !dorian       !dorian #>     10:           *M4/4         *M4/4         *M4/4         *M4/4 #>     11:         *met(c)       *met(c)       *met(c)       *met(c) #>     12:          *MM100        *MM100        *MM100        *MM100 #>     13:              4E            4e           4g#            4b #>     14:              =1            =1            =1            =1 #>     15:              4A            4e            4a           4cc #>     16:              4B            4d           4g#            4b #>     17:              4c            4e            4a            4a #>     18:             8BL           8dL          8g#L           4ee #>     19:             8AJ           8cJ           8aJ             . #>     20:              =2            =2            =2            =2 #>     21:             4G#            4B            4b          8eeL #>     22:               .             .             .          8ddJ #>     23:              4A           8cL           8eL           4cc #>     24:               .           8dJ          8f#J             . #>     25:             4E;           4e;          4g#;           4b; #>     26:             4BB            4f           4g#           4dd #>     27:              =3            =3            =3            =3 #>     28:             8CL            4e            4a           4cc #>     29:             8DJ             .             .             . #>     30:              4E           8eL           4g#            4b #> 31-100:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #> ############################ ^^^ chor003.krn ^^^ ############################# #>  #>      (1 more files...) #>  #> ############################ vvv chor010.krn vvv ############################# #>   1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: #>     52:            2AA;           2c;           2e;           2a; #>     53:              2A            2e            2a           2cc #>     54:              =9            =9            =9            =9 #>     55:              4E            4e            4g            4b #>     56:             8DL            4e            4g           4cc #>     57:             8CJ             .             .             . #>     58:             4BB            4d           8gL           4dd #>     59:               .             .           8fJ             . #>     60:              4C            4c            4e            4g #>     61:             =10           =10           =10           =10 #>     62:              4D           8F#            4d            4b #>     63:               .            4G             .             . #>     64:              4D             .            4c            4a #>     65:               .           8F#             .             . #>     66:            2GG;           2G;           2B;           2g; #>     67:             =11           =11           =11           =11 #>     68:              2C            2G            2e            2g #>     69:             4AA            4A            4e           4cc #>     70:              4E           4G#           8eL            4b #>     71:               .             .           8dJ             . #>     72:             =12           =12           =12           =12 #>     73:              4F            4A            4c            4a #>     74:              4C            4G            4c            4e #>     75:            4BB-            4G           [2d            4g #>     76:             4AA            4A             .            4f #>     77:             =13           =13           =13           =13 #>     78:            4GG#            4B           4d]           1e; #>     79:             4AA            4A            4c             . #>     80:            2EE;         2G#X;           2B;             . #>     81:              ==            ==            ==            == #>     82:              *-            *-            *-            *- #>     83:  !!!hum2abc: -Q '' #>     84:  !!!title: @{PC#}. @{OTL@@DE} #>     85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** #>     86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** #>     87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** #>     88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** #>     89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 #>     90:  !!!EED:  Craig Stuart Sapp #>     91:  !!!EEV:  2009/05/22 #> ############################ ^^^ chor010.krn ^^^ ############################# #>                       (***four global comments truncated due to screen size***) #>  #>  humdrumR corpus of three files. #>   Data fields:  #>          *Token :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/ReadWrite.html","id":"finding-files","dir":"Articles","previous_headings":"Reading humdrum data","what":"Finding Files","title":"Reading and writing data","text":"readHumdrum interprets REpath-patterns finds files using helper function findHumdrum. sure humdrum files , pattern want use find , might start using findHumdrum. findHumdrum takes input readHumdrum, doesn’t fully parse input humdrumR. Instead, returns data.table containing matching filenames () raw file content. use verbose = TRUE option either findHumdrum readHumdrum, complete list matches files printed. useful check reading files intend read.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/ReadWrite.html","id":"validation","dir":"Articles","previous_headings":"Reading humdrum data > Finding Files","what":"Validation","title":"Reading and writing data","text":"findHumdrum, extension readHumdrum, smart functions ignore non-humdrum files matched pattern. Non-text files (like .pdf .jpg) ignored. Whatsmore, text files fail conform humdrum syntax read either. see message checks files “valid humdrum,” tell many () text files read. trying read file think valid humdrum, readHumdrum won’t read , use validateHumdrum exact REpath-pattern arguments, specify errorReport.path see detailed report problem. humdrumR won’t read files humdrum-syntax violations—might minor problems data need fix. Call ?validateHumdrum read humdrum data validation vignette learn humdrumR’s data validation tools, can used identify errors humdrum data. (validateHumdrum automatically check humdrum data encoded correctly makes sense, just structurally sound, accordance humdrum syntax.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/ReadWrite.html","id":"reading","dir":"Articles","previous_headings":"Reading humdrum data","what":"Reading","title":"Reading and writing data","text":", actually happens run readHumdrum? now, ’ve seen readHumdrum prints messages describing process. First, files match search patterns () identified, text read R. Next, files checked see valid humdrum files. files parsed—.e., translated humdrumR‘s data.table backend. step takes longest far, includes parsing humdrum files’ data tokens, interpretations, reference records, (worst ) spine paths. Indeed, reading humdrum data spine paths take significantly longer reading pathless data. save time, can potentially use tandems reference arguments (see “Parsing Metadata” ).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/ReadWrite.html","id":"parsing-metadata","dir":"Articles","previous_headings":"Reading humdrum data","what":"Parsing Metadata","title":"Reading and writing data","text":"default, humdrumR parses metadata humdrum files reads. includes true global metadata files, encoded humdrum reference records, well local tandem interpretations.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/ReadWrite.html","id":"reference-records","dir":"Articles","previous_headings":"Reading humdrum data > Parsing Metadata","what":"Reference Records","title":"Reading and writing data","text":"default, humdrumR parses reference records files reads, creating unique field reference key. (one instance given key, combined string separated semicolons.) lot unique reference keys dataset, can end taking lot memory humdrum table. cases, might find useful limit readHumdrum parsing reference records actually going use. can accomplished quite easily reference argument. reference argument defaults \"\", means reference records parsed. However, reference can also character vector reference codes. Thus, parse COM reference record piece. can use rename reference fields like—case, COM reference records parsed saved field called Composer instead COM. don’t want parse reference records, specify reference = NULL.","code":"readHumdrum('HumdrumData',             c('BeethovenVariations', 'MozartVariations'),             '.*.krn',             reference = 'COM') #> ############# vvv B075_00_01_a.krn vvv ############## #>     1:  !!!COM: Beethoven #>     2:  !!!OTL: 7 Variations on a Quartet by Winter #>     3:  !!!Variation: Theme a #>     4:    **function      **harm   **kern      **kern #>     5:             *           *  *clefG2     *clefG2 #>     6:             *           *   *k[b-]      *k[b-] #>     7:         *M2/4       *M2/4    *M2/4       *M2/4 #>     8:           *F:         *F:      *F:         *F: #>     9:            4T          4I       4r        4ccc #>    10:            =1          =1       =1          =1 #>    11:            2T          2I       2f        8aa' #>    12:             .           .        .        8ff' #>    13:             .           .        .        8aa' #>    14:             .           .        .       8ccc' #>    15:            =2          =2       =2          =2 #>    16:            4T         4V7       4g        4bb- #>    17:            4T          4I      4f)         4aa #>    18:            =3          =3       =3          =3 #>    19:            2T          2V       4c        8gg' #>    20:             .           .        .        8ff' #>    21:             .           .       4c        8ee' #>    22:             .           .        .        8ff' #>    23:            =4          =4       =4          =4 #>    24:            4T          4V       8c         8gg #>    25:             .           .       8r          8r #>    26:            4T          4I       4r        4ccc #>    27:            =5          =5       =5          =5 #>    28:            2T          2I       2f        8aa' #>    29:             .           .        .        8ff' #>    30:             .           .        .        8aa' #>    31:             .           .        .       8ccc' #>    32:            =6          =6       =6          =6 #>    33:            4T         4V7       4g        4bb- #>    34:            4T          4I       4a         4aa #>    35:            =7          =7       =7          =7 #>    36:            4P        4iib     8B-L         8gg #>    37:             .           .     8B-J         8gg #>    38:            4D         4V7      8cL         8ee #>    39:             .           .      8cJ        16dd #>    40:             .           .        .     16eeJJ) #> 41-45:::::::::::::::::::::::::::::::::::::::::::::::: #> ############# ^^^ B075_00_01_a.krn ^^^ ############## #>  #>      (18 more files...) #>  #> ############# vvv M354_01_04d_a.krn vvv ############# #>  1-21:::::::::::::::::::::::::::::::::::::::::::::::: #>    22:             .           .        .     (16ccLL #>    23:             .           .      =43        16b- #>    24:             .           .       *^         16a #>    25:            4D         4V7       8r     16b-JJ) #>    26:             .           .        .         =41 #>    27:             .           .      (8G    (16ee-LL #>    28:             .           .        .        16dd #>    41:             *           *        .       16cc# #>    42:           =44         =44     8FJ)     16ddJJ) #>    43:            2T          2I        .     (16ccLL #>    44:             .           .       *v        16b- #>    45:             .           .     8E-L         16a #>    46:            *-          *-    8BB-J     16b-JJ) #>    47:        **harm      **kern     4EE-           * #>    48:             *     *clefG2       *-         =42 #>    49:             *  *k[b-e-a-]      2B-           * #>     4:         *M2/4       *M2/4        .    (16ee-LL #>     5:          *E-:        *E-:        .        16ff #>     6:           =40         =40        .       16gg) #>     7:             *          *^        .      16b'JJ #>     8:           2V7          8r        .     (16ccLL #>     9:             .           .        .        16dd #>    10:             .          4f      2A-      16ee-) #>    29:             .         4a-        .     16a-'JJ #>    30:             .           .        .         =43 #>    31:             .           .        .           * #>    32:             .           .        .      (16gLL #>    33:             .          8f        .        16a- #>    34:           =41           .        .       16b-) #>    35:          2V7d         =41        .      16e'JJ #>    36:             .          8r       *v      (16fLL #>    37:             .           .     2BB-         16g #>    38:             .         4B-        .       16a-) #>    39:             .          4f        .      16d'JJ #>    40:             .           .        .           * #>    50:             .           .        .         =44 #>    51:             .           .        .         4e- #>    52:             *         8B-        .           . #>    53:           =42          8f        .          4r #>    54:             *           .       *v          *- #> ############# ^^^ M354_01_04d_a.krn ^^^ ############# #>  #>  humdrumR corpus of twenty files. #>   Data fields:  #>          *Token :: character readHumdrum('HumdrumData',             c('BeethovenVariations', 'MozartVariations'),             '.*.krn',             reference = c(Composer = 'COM')) #> ############# vvv B075_00_01_a.krn vvv ############## #>     1:  !!!COM: Beethoven #>     2:  !!!OTL: 7 Variations on a Quartet by Winter #>     3:  !!!Variation: Theme a #>     4:    **function      **harm   **kern      **kern #>     5:             *           *  *clefG2     *clefG2 #>     6:             *           *   *k[b-]      *k[b-] #>     7:         *M2/4       *M2/4    *M2/4       *M2/4 #>     8:           *F:         *F:      *F:         *F: #>     9:            4T          4I       4r        4ccc #>    10:            =1          =1       =1          =1 #>    11:            2T          2I       2f        8aa' #>    12:             .           .        .        8ff' #>    13:             .           .        .        8aa' #>    14:             .           .        .       8ccc' #>    15:            =2          =2       =2          =2 #>    16:            4T         4V7       4g        4bb- #>    17:            4T          4I      4f)         4aa #>    18:            =3          =3       =3          =3 #>    19:            2T          2V       4c        8gg' #>    20:             .           .        .        8ff' #>    21:             .           .       4c        8ee' #>    22:             .           .        .        8ff' #>    23:            =4          =4       =4          =4 #>    24:            4T          4V       8c         8gg #>    25:             .           .       8r          8r #>    26:            4T          4I       4r        4ccc #>    27:            =5          =5       =5          =5 #>    28:            2T          2I       2f        8aa' #>    29:             .           .        .        8ff' #>    30:             .           .        .        8aa' #>    31:             .           .        .       8ccc' #>    32:            =6          =6       =6          =6 #>    33:            4T         4V7       4g        4bb- #>    34:            4T          4I       4a         4aa #>    35:            =7          =7       =7          =7 #>    36:            4P        4iib     8B-L         8gg #>    37:             .           .     8B-J         8gg #>    38:            4D         4V7      8cL         8ee #>    39:             .           .      8cJ        16dd #>    40:             .           .        .     16eeJJ) #> 41-45:::::::::::::::::::::::::::::::::::::::::::::::: #> ############# ^^^ B075_00_01_a.krn ^^^ ############## #>  #>      (18 more files...) #>  #> ############# vvv M354_01_04d_a.krn vvv ############# #>  1-21:::::::::::::::::::::::::::::::::::::::::::::::: #>    22:             .           .        .     (16ccLL #>    23:             .           .      =43        16b- #>    24:             .           .       *^         16a #>    25:            4D         4V7       8r     16b-JJ) #>    26:             .           .        .         =41 #>    27:             .           .      (8G    (16ee-LL #>    28:             .           .        .        16dd #>    41:             *           *        .       16cc# #>    42:           =44         =44     8FJ)     16ddJJ) #>    43:            2T          2I        .     (16ccLL #>    44:             .           .       *v        16b- #>    45:             .           .     8E-L         16a #>    46:            *-          *-    8BB-J     16b-JJ) #>    47:        **harm      **kern     4EE-           * #>    48:             *     *clefG2       *-         =42 #>    49:             *  *k[b-e-a-]      2B-           * #>     4:         *M2/4       *M2/4        .    (16ee-LL #>     5:          *E-:        *E-:        .        16ff #>     6:           =40         =40        .       16gg) #>     7:             *          *^        .      16b'JJ #>     8:           2V7          8r        .     (16ccLL #>     9:             .           .        .        16dd #>    10:             .          4f      2A-      16ee-) #>    29:             .         4a-        .     16a-'JJ #>    30:             .           .        .         =43 #>    31:             .           .        .           * #>    32:             .           .        .      (16gLL #>    33:             .          8f        .        16a- #>    34:           =41           .        .       16b-) #>    35:          2V7d         =41        .      16e'JJ #>    36:             .          8r       *v      (16fLL #>    37:             .           .     2BB-         16g #>    38:             .         4B-        .       16a-) #>    39:             .          4f        .      16d'JJ #>    40:             .           .        .           * #>    50:             .           .        .         =44 #>    51:             .           .        .         4e- #>    52:             *         8B-        .           . #>    53:           =42          8f        .          4r #>    54:             *           .       *v          *- #> ############# ^^^ M354_01_04d_a.krn ^^^ ############# #>  #>  humdrumR corpus of twenty files. #>   Data fields:  #>          *Token :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/ReadWrite.html","id":"tandem-interpretations","dir":"Articles","previous_headings":"Reading humdrum data > Parsing Metadata","what":"Tandem Interpretations","title":"Reading and writing data","text":"Tandem interpretations used humdrum data represent “local,” real-time metainformation associated specific spines—review humdrum syntax vignette details. HumdrumR can read arbitrary tandem interpertations humdrum data. However, non-standard intrepretations used, humdrumR way knowing parse . default, humdrumR always reads tandem interpretations field called Tandem. field tabulates tandem interperations far appeared spine order, concatenating single comma-delimited, recent distant. instance, Tandem field spine parsed , interpretations pile longer longer string piece progresses. Notice \"D:\" \"C:\" intrerpretations get piled separately, just like interpretation, even though tandem class, \"D:\" supercede \"C:\". ? Well, general way know arbitrary tandem interpretations class. create humdrum data new interpretations , humdrumR doesn’t know parse , just pile like Tandem field. Fortunately, humdrumR know parse many standard tandem interpretations. run command see currently ten classes tandem interpretations humdrumR recognizes, associated regular expression. Thus, really apply readHumdrum file recognize tokens \"C:\" \"D:\" match known regular expression Key tandem interpretation, parse field called Key, look like: Likewise, ’d get TimeSignature BPM fields.","code":"**kern *C: *M4/4 *MM100 c e c g *D: d f# *- \"\" C: M4/4,C: MM100,M4/4,C: MM100,M4/4,C: MM100,M4/4,C: D:,MM100,M4/4,C: D:,MM100,M4/4,C: D:,MM100,M4/4,C: knownInterpretations[Type == 'Tandem']  #>                      Name Exclusive #>  1:                   Key           #>  2:          KeySignature           #>  3:                  Clef           #>  4:         TimeSignature           #>  5:           Mensuration           #>  6:                   BPM           #>  7:              Timebase           #>  8:            Instrument           #>  9:       InstrumentClass           #> 10: TransposingInstrument           #>                                                      RE Pretty   Type #>  1: [A-Ga-g][-#b]*:(mix|dor|phr|lyd|loc)?([#bn]?[1-7])*     _: Tandem #>  2:                              k\\\\[([a-g][#-]* *)*\\\\]   k[_] Tandem #>  3:                                   clef[A-G]v*[1-5]*  clef_ Tandem #>  4:                     M[1-9][0-9]*/((16)|(32)|[1248])   M_/_ Tandem #>  5:                                      met\\\\([^)]*\\\\) met(_) Tandem #>  6:                                            MM[0-9]+    MM_ Tandem #>  7:                     tb[1-9][0-9]*%?[1-9]?[0-9]*[.]*    tb_ Tandem #>  8:                                             I[^C,]+     I_ Tandem #>  9:                                             IC[^,]*    IC_ Tandem #> 10:                                            ITr[^,]*   ITr_ Tandem **kern *C: *M4/4 *MM100 c e c g *D: d f# *- NA C: C: C: C: C: D: D: D:"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/ReadWrite.html","id":"custom-tandems","dir":"Articles","previous_headings":"Reading humdrum data > Parsing Metadata > Tandem Interpretations","what":"Custom Tandems","title":"Reading and writing data","text":"readHumdrum tandems argument allows us take control tandem interpretation parsing process. tandems character vector, defaulting known, parses known interpretations fields (following knownInterpretations table). can use tandems two ways. 1.) can remove \"known\" vector specify Name specific tandem interpretations want parse. instance, write tandem = \"Clef\", Clef pattern knownInterpretations table parsed, (others). 2.) character string tandems \"known\" exact match Name knownInterpretations, instead treated regular expression match new tandem interpretation class. instance, tandems = \"[Aa]pple|[Bb]anana\" match “*Apple”, “*apple”, “*Banana”, “*banana,” parsing four patterns field (called [Aa]pple|[Bb]anana]). give field name writing tandems = c(Fruit = \"[Aa]pple|[Bb]anana\"). (fact, can rename known interpretations well, instance writing tandems = c(Meter = \"TimeSignature\".) tandems = NULL, tandem interpretations parsed —can used shorten parsing time.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Reshaping.html","id":"filtering-data","dir":"Articles","previous_headings":"","what":"Filtering Data","title":"Shaping Humdrum Data","text":"first step might remove data don’t need. article, ’ll show common, basic, ways might filter data. details humdrumR filtering functionatily, check data filtering article.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Reshaping.html","id":"indexing","dir":"Articles","previous_headings":"Filtering Data","what":"Indexing","title":"Shaping Humdrum Data","text":"example, studying tonality, might simply want ignore lyric data. easiest way index spines don’t want, either using numeric indices exclusive interpretation:","code":"example[[ , c(1,3,5)]] >     vvv Reshaping_example.hum vvv # >       1:    **kern   **kern  **harm >       2:    *ICvox   *ICvox       * >       3:    *Ialto  *Isoprn       * >       4:     *M4/4    *M4/4       * >       5:       *C:      *C:     *C: >       6:       4.c      4.e       I >       7:        8d       8f       . >       8:        4e       4g       . >       9:        4f       4a      IV >      10:         =        =       = >      11:        2g      4dd     I64 >      12:         .      4cc       . >      13:        2g       2b       V >      14:        *-       *-      *- >     ^^^ Reshaping_example.hum ^^^ # >        Data fields:  >               *Token :: character example[[ , c('**kern', '**harm')]] >     vvv Reshaping_example.hum vvv # >       1:    **kern   **kern  **harm >       2:    *ICvox   *ICvox       * >       3:    *Ialto  *Isoprn       * >       4:     *M4/4    *M4/4       * >       5:       *C:      *C:     *C: >       6:       4.c      4.e       I >       7:        8d       8f       . >       8:        4e       4g       . >       9:        4f       4a      IV >      10:         =        =       = >      11:        2g      4dd     I64 >      12:         .      4cc       . >      13:        2g       2b       V >      14:        *-       *-      *- >     ^^^ Reshaping_example.hum ^^^ # >        Data fields:  >               *Token :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Reshaping.html","id":"parsing-token","dir":"Articles","previous_headings":"Filtering Data","what":"Parsing Token","title":"Shaping Humdrum Data","text":"file, **kern spines example file include rhythmic data (**recip) pitch data. just studying tonality, extract just pitch information Token field, save new field. example, can use kern extract pitch information Token, put new field—let’s call Pitch. new Pitch field, can still access original Token field. can see easily setting “active” field back Token:","code":"within(example,         kern(Token) -> Pitch) -> example  example >    ######### vvv Reshaping_example.hum vvv ########## >       1:    **kern  **silbe   **kern  **silbe  **harm >       2:    *ICvox        *   *ICvox        *       * >       3:    *Ialto        *  *Isoprn        *       * >       4:     *M4/4        *    *M4/4        *       * >       5:       *C:        *      *C:        *     *C: >       6:         c        .        e        .       . >       7:         d        .        f        .       . >       8:         e        .        g        .       . >       9:         f        .        a        .       . >      10:         =        =        =        =       = >      11:         g        .       dd        .       . >      12:         .        .       cc        .       . >      13:         g        .        b        .       . >      14:        *-       *-       *-       *-      *- >    ######### ^^^ Reshaping_example.hum ^^^ ########## >        Data fields:  >                Token :: character >               *Pitch :: character example$Token >    ######### vvv Reshaping_example.hum vvv ########## >       1:    **kern  **silbe   **kern  **silbe  **harm >       2:    *ICvox        *   *ICvox        *       * >       3:    *Ialto        *  *Isoprn        *       * >       4:     *M4/4        *    *M4/4        *       * >       5:       *C:        *      *C:        *     *C: >       6:       4.c     This      4.e     This       I >       7:        8d       is       8f       is       . >       8:        4e       an       4g       an       . >       9:        4f      ex-       4a      ex-      IV >      10:         =        =        =        =       = >      11:        2g     -am-      4dd     -am-     I64 >      12:         .        .      4cc        _       . >      13:        2g     -ple       2b     -ple       V >      14:        *-       *-       *-       *-      *- >    ######### ^^^ Reshaping_example.hum ^^^ ########## >        Data fields:  >               *Token :: character >                Pitch :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Reshaping.html","id":"splittingseparating-data","dir":"Articles","previous_headings":"","what":"Splitting/Separating Data","title":"Shaping Humdrum Data","text":"Humdrum data often packs multiple pieces information compact, concise, readable tokens. classic example, course, **kern often includes rhythm, pitch, phrasing, beaming, pitch ornamentation information! tokens great reading/writing, analyzing, typically want separate information want.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Reshaping.html","id":"pitch-and-rhythm","dir":"Articles","previous_headings":"Splitting/Separating Data","what":"Pitch and Rhythm","title":"Shaping Humdrum Data","text":"’ve seen, **kern spines example file include rhythmic data (**recip) pitch data. cases, might want access pieces information, separately. can separate applying different functions Token field, saving output new fields. example, uses pitch function extract pitch information saves new field call Pitch uses recip function extract rhythm information saves new field call Rhythm. (course, choose different names new fields, instead Pitch Rhythm.) can use either new fields, , call within.humdrumR, make active fields see print:","code":"within(example,         Pitch <- pitch(Token),        Rhythm <- recip(Token)) -> example   example >    ################## vvv Reshaping_example.hum vvv ################## >       1:    **pitch, *  **pitch, *  **pitch, *  **pitch, *  **pitch, * >       2:        *ICvox           *      *ICvox           *           * >       3:        *Ialto           *     *Isoprn           *           * >       4:         *M4/4           *       *M4/4           *           * >       5:           *C:           *         *C:           *         *C: >       6:        C4, 4.           .      E4, 4.           .           . >       7:         D4, 8           .       F4, 8           .           . >       8:         E4, 4           .       G4, 4           .           . >       9:         F4, 4           .       A4, 4           .           . >      10:             =           =           =           =           = >      11:         G4, 2           .       D5, 4           .        , 64 >      12:             .           .       C5, 4           .           . >      13:         G4, 2           .       B4, 2           .           . >      14:            *-          *-          *-          *-          *- >    ################## ^^^ Reshaping_example.hum ^^^ ################## >        Data fields:  >                Token  :: character >               *Pitch  :: character >               *Rhythm :: character example$Pitch >    ########## vvv Reshaping_example.hum vvv ########### >       1:    **pitch  **pitch  **pitch  **pitch  **pitch >       2:     *ICvox        *   *ICvox        *        * >       3:     *Ialto        *  *Isoprn        *        * >       4:      *M4/4        *    *M4/4        *        * >       5:        *C:        *      *C:        *      *C: >       6:         C4        .       E4        .        . >       7:         D4        .       F4        .        . >       8:         E4        .       G4        .        . >       9:         F4        .       A4        .        . >      10:          =        =        =        =        = >      11:         G4        .       D5        .        . >      12:          .        .       C5        .        . >      13:         G4        .       B4        .        . >      14:         *-       *-       *-       *-       *- >    ########## ^^^ Reshaping_example.hum ^^^ ########### >        Data fields:  >                Token  :: character >               *Pitch  :: character >                Rhythm :: character  example$Rhythm >    ######### vvv Reshaping_example.hum vvv ########## >       1:    **kern  **silbe   **kern  **silbe  **harm >       2:    *ICvox        *   *ICvox        *       * >       3:    *Ialto        *  *Isoprn        *       * >       4:     *M4/4        *    *M4/4        *       * >       5:       *C:        *      *C:        *     *C: >       6:        4.        .       4.        .       . >       7:         8        .        8        .       . >       8:         4        .        4        .       . >       9:         4        .        4        .       . >      10:         =        =        =        =       = >      11:         2        .        4        .      64 >      12:         .        .        4        .       . >      13:         2        .        2        .       . >      14:        *-       *-       *-       *-      *- >    ######### ^^^ Reshaping_example.hum ^^^ ########## >        Data fields:  >                Token  :: character >                Pitch  :: character >               *Rhythm :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Reshaping.html","id":"pastingaligning","dir":"Articles","previous_headings":"","what":"Pasting/Aligning","title":"Shaping Humdrum Data","text":"next step might align/combine information currently separated. many humrum datasets, multiple pieces information spread across multiple spines, cases, across spine paths stops. , given research question, need think multiple pieces information describing single data point, ’ll reshape data. example, example file **silbe (lyric) spines associate syllable exactly one note adjacent **kern spines.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Reshaping.html","id":"folding-data","dir":"Articles","previous_headings":"Pasting/Aligning","what":"Folding Data","title":"Shaping Humdrum Data","text":"powerful approach aligning separated data “folding” information new field using family “folding functions.” Folding means taking information one spine, path, stop, moving new data field “top ” another spine. means taking, example, data Spine 2 putting new field Spine 1.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Reshaping.html","id":"lyrics","dir":"Articles","previous_headings":"Pasting/Aligning > Folding Data > Folding Spines","what":"Lyrics","title":"Shaping Humdrum Data","text":"example, want align notes **kern spines syllables **silbe spine. can directly using foldHumdrum: use fold argument indicate spine fold, onto argument indicate spine move onto. Notice second spine disappeared, now new field called Result1, first (onto) spine, containing data old Spine 2. **silbe spines like : datasets, might different numbers **kern/**silbe spines different files within dataset. Though foldHumdrum can handle case, usually easier use special foldExclusive function, folds based exclusive interpretation. Just specify fold onto arguments character strings matching names exclusive interpretations file: Notice foldExclusive automatically folded **sible spines onto respective **kern spines, new field name.","code":"foldHumdrum(example, fold = 2, onto = 1) >    ##### vvv Reshaping_example.hum vvv ###### >       1:    **silbe   **kern  **silbe  **harm >       2:     *ICvox   *ICvox        *       * >       3:     *Ialto  *Isoprn        *       * >       4:      *M4/4    *M4/4        *       * >       5:        *C:      *C:        *     *C: >       6:       This        .        .       . >       7:         is        .        .       . >       8:         an        .        .       . >       9:        ex-        .        .       . >      10:          =        =        =       = >      11:       -am-        .        .       . >      12:          .        .        .       . >      13:       -ple        .        .       . >      14:         *-       *-       *-      *- >    ##### ^^^ Reshaping_example.hum ^^^ ###### >        Data fields:  >                Token   :: character >                Pitch   :: character >                Rhythm  :: character >               *Result1 :: character foldHumdrum(example, fold = c(2, 4), onto = c(1, 3)) >    # vvv Reshaping_example.hum vvv # >       1:    **silbe  **silbe  **harm >       2:     *ICvox   *ICvox       * >       3:     *Ialto  *Isoprn       * >       4:      *M4/4    *M4/4       * >       5:        *C:      *C:     *C: >       6:       This     This       . >       7:         is       is       . >       8:         an       an       . >       9:        ex-      ex-       . >      10:          =        =       = >      11:       -am-     -am-       . >      12:          .        _       . >      13:       -ple     -ple       . >      14:         *-       *-      *- >    # ^^^ Reshaping_example.hum ^^^ # >        Data fields:  >                Token   :: character >                Pitch   :: character >                Rhythm  :: character >               *Result1 :: character foldExclusive(example, 'silbe', 'kern') >    # vvv Reshaping_example.hum vvv # >       1:    **silbe  **silbe  **harm >       2:     *ICvox   *ICvox       * >       3:     *Ialto  *Isoprn       * >       4:      *M4/4    *M4/4       * >       5:        *C:      *C:     *C: >       6:       This     This       . >       7:         is       is       . >       8:         an       an       . >       9:        ex-      ex-       . >      10:          =        =       = >      11:       -am-     -am-       . >      12:          .        _       . >      13:       -ple     -ple       . >      14:         *-       *-      *- >    # ^^^ Reshaping_example.hum ^^^ # >        Data fields:  >                Token  :: character >                Pitch  :: character >                Rhythm :: character >               *Silbe  :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Reshaping.html","id":"harmonic-interval","dir":"Articles","previous_headings":"Pasting/Aligning > Folding Data > Folding Spines","what":"Harmonic Interval","title":"Shaping Humdrum Data","text":"Let’s consider another common use case “folding” humdrum data. Lots humdrum files multiple spines **kern. cases, research question lead us think note, across spines, individual data points. However, research question concerns harmonic intervals (combinations pitches happening time) might think record multiple pitches single data observation. case, might want fold kern data one spine, top another! can using foldHumdrum well: now cross tabulate two spines data:","code":"example <- readHumdrum(humdrumRroot, 'examples/Reshaping_example.hum')  kernonly <- example[[ , '**kern']]  foldHumdrum(kernonly, 2, 1) -> kernonly$Spine2 with(kernonly, table(Token, Spine2)) >         Spine2 >    Token 2b 4.e 4a 4cc 4dd 4g 8f >      2g   1   0  0   0   1  0  0 >      4.c  0   1  0   0   0  0  0 >      4e   0   0  0   0   0  1  0 >      4f   0   0  1   0   0  0  0 >      8d   0   0  0   0   0  0  1"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Reshaping.html","id":"harmony-spreading-data","dir":"Articles","previous_headings":"Pasting/Aligning > Folding Data > Folding Spines","what":"Harmony (Spreading Data)","title":"Shaping Humdrum Data","text":"another common use case, might one spine data actually describes happening entire record data. example, example’s **harm spine. chords indicated spine associated pitches , either, **kern spines. Luckily, foldHumdrum foldExclusive given onto spines fold spines, fold spine duplicated fill one target spines: harm spine copied new field “top ” **kern spines!","code":"example <- readHumdrum(humdrumRroot, 'examples/Reshaping_example.hum')  foldExclusive(example, 'harm', 'kern')  >    ##### vvv Reshaping_example.hum vvv ###### >       1:    **harm  **silbe   **harm  **silbe >       2:    *ICvox        *   *ICvox        * >       3:    *Ialto        *  *Isoprn        * >       4:     *M4/4        *    *M4/4        * >       5:       *C:        *      *C:        * >       6:         I        .        I        . >       7:         .        .        .        . >       8:         .        .        .        . >       9:        IV        .       IV        . >      10:         =        =        =        = >      11:       I64        .      I64        . >      12:         .        .        .        . >      13:         V        .        V        . >      14:        *-       *-       *-       *- >    ##### ^^^ Reshaping_example.hum ^^^ ###### >        Data fields:  >                Token :: character >               *Harm  :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Reshaping.html","id":"folding-stops-and-paths","dir":"Articles","previous_headings":"Pasting/Aligning > Folding Data","what":"Folding Stops and Paths","title":"Shaping Humdrum Data","text":"Though spines common structure humdrum data might need “fold,” can also fold structures. course, depends questions trying ask data! Consider example, multi-stop chords **kern spine: default, humdrumR treats token (note) stop separate data observation, row humdrum table. studying harmony, might want align stops “top” , different fields. Try foldStops function! working spine paths, often less obvious interpret different paths terms data observations, want fold , can using foldPaths: Note foldPaths something little bit different: wherever “folding” path null (non-existent) copies data base path. means get two complete copies melody, identical spine path, different different paths. get one melody (Token field) going 4c 4d 4e 4d 2c 2B another melody (new Token_Path field) going 4c 4d 4e 4f 2g 2g. option can used folding functions well, setting argument fillFromField == TRUE.","code":"example_stops <- readHumdrum(humdrumRroot, 'examples/Reshaping_example2_stops.hum')  example_stops >     vvv Reshaping_example2_stops.hum vvv  >       1:    **kern  **harm >       2:     *M4/4       * >       3:       *C:     *C: >       4:        4c       I >       5:        4B      Vb >       6:         g      vb >       7:         f     IVb >       8:         =       = >       9:         e     I64 >      10:         d       V >      11:        *-      *- >     ^^^ Reshaping_example2_stops.hum ^^^  >        Data fields:  >               *Token :: character foldStops(example_stops) >     vvv Reshaping_example2_stops.hum vvv  >       1:    **kern  **harm >       2:     *M4/4       * >       3:       *C:     *C: >       4:         .       . >       5:         .       . >       6:      d, g       . >       7:      d, f       . >       8:         =       = >       9:      c, e       . >      10:      B, d       . >      11:        *-      *- >     ^^^ Reshaping_example2_stops.hum ^^^  >        Data fields:  >                Token       :: character >               *Token_Stop2 :: character >               *Token_Stop3 :: character example_paths <- readHumdrum(humdrumRroot, 'examples/Reshaping_example3_paths.hum')  example_paths >     vvv Reshaping_example3_paths.hum vvv  >       1:    **kern      **harm >       2:     *M4/4           * >       3:       *C:         *C: >       4:        4c           I >       5:        4d           . >       6:        4e           . >       7:        *^           * >       8:        4d  4f      ii >       9:         =   =       = >      10:        2c  2g       I >      11:        2B  2g      Vb >      12:        *v  *v       * >      13:         =           = >      14:        *-          *- >     ^^^ Reshaping_example3_paths.hum ^^^  >        Data fields:  >               *Token :: character  foldPaths(example_paths) >     vvv Reshaping_example3_paths.hum vvv  >       1:    **kern    **harm >       2:     *M4/4         * >       3:       *C:       *C: >       4:        4c         I >       5:        4d         . >       6:        4e         . >       7:        *^         * >       8:        4f        ii >       9:         =         = >      10:        2g         I >      11:        2g        Vb >      12:        *v         * >      13:         =         = >      14:        *-        *- >     ^^^ Reshaping_example3_paths.hum ^^^  >        Data fields:  >                Token       :: character >               *Token_Path1 :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Reshaping.html","id":"folding-grace-notes","dir":"Articles","previous_headings":"Pasting/Aligning > Folding Data","what":"Folding Grace Notes","title":"Shaping Humdrum Data","text":"functionality hasn’t implemented yet. Bug us !","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Reshaping.html","id":"other-folding","dir":"Articles","previous_headings":"Pasting/Aligning > Folding Data","what":"Other Folding","title":"Shaping Humdrum Data","text":"Using foldHumdrum, also possible fold data structures. obvious example, folding consecutive records bars top . ’m sure want ! , use argument foldHumdrum.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/Reshaping.html","id":"collapsing-data","dir":"Articles","previous_headings":"Pasting/Aligning","what":"Collapsing Data","title":"Shaping Humdrum Data","text":"TBA","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/WorkingWithData.html","id":"with-and-within-you","dir":"Articles","previous_headings":"","what":"With and within you","title":"Working with Humdrum Data","text":"key functions working humdrumR data objects within. functions allow get “inside” data. Basically, call /within, data fields within data become available , .","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/WorkingWithData.html","id":"with","dir":"Articles","previous_headings":"With and within you","what":"With","title":"Working with Humdrum Data","text":"Let’s start . call humdrumR data object first argument. second argument can arbitrary R expression like, can use fields humdrum data. “expression” just valid bit R code; example, 2 + 2, c(1, 2, 3), (x - mean(x))^2, nchar(letters) |> mean() examples expressions. “arbitrary R expression” just fancy way saying R code want. execute R command, R “evaluates” expression(s) returns results. starting point, lets tabulate tokens dataset. first load humdrum data, original data tokens always put field called Token. use awesome built-R function, table, tabulate unique tokens Token field. However, can’t access Token field directly; just write expression table(Token) ’ll get error—R able “find”, say “Error: object 'Token' found.” Instead, use enter data, R can “see” Token (data fields): worked! However, ’s lot unique tokens data, kind mess. Let’s take page pitch vignette extract just pitch information using kern function: Much better! Notice whole expression kern(Token) |> table() executed within data. expressions can get complicated want. Let’s add call sort: Ah, now can clearly see top 10 common notes data e, , g, d, b, B, , f#, c, E. last step might make plot. ’ll use built tail function grab top (last) 10, built-barplot function.  Notice writing big complex expression like ’s helpful spread expression across multiple lines. |> (pipe) operator great place .","code":"with(chorales, table(Token)) >    Token >        [2d     [2e     [4a     [4A     [4B     [4c     [4d     [4e     [4E     [4f  >          1       1       1       2       1       1       1       2       2       1  >       [4f#     [4g     [4G    [8cJ    [8CJ    [8gJ    16AL  16B-Jk 16b-XJJ  16BBJJ  >          1       4       2       1       1       1       1       1       1       1  >      16BJJ   16C#L  16c#LL   16ccL  16ccLL  16d#JJ  16ddJJ   16dJJ   16EJJ    16eL  >          1       1       1       1       1       1       1       2       1       2  >      16F#L     1e;    2.a;    2.A;   2.AA;     2.b    2.b;    2.B;   2.BB;    2.c;  >          1       1       1       1       1       1       1       1       1       1  >       2.C#   2.c#;     2.d    2.d;     2.e    2.e;    2.ee    2.f;   2.f#;   2.FF;  >          1       1       1       2       1       1       1       1       1       1  >       2.g;   2.GG;      2a      2A    2a-;    2A-;     2a;     2A;   2AA-;    2AA;  >          1       1      17      10       1       2       9       2       1       4  >         2b      2B    2b-;     2b;     2B;     2BB   2BB-;    2BB;      2c      2C  >         10       2       1       3       8       2       1       1       1       1  >        2c;     2C;     2c#    2c#;     2cc    2cc#   2cc#;      2d      2D    2d-;  >          6       1       5       3       3       3       1       6       5       1  >        2d;     2D;     2d#     2D#    2d#;     2dd    2DnX      2e      2E    2e-;  >          6       5       1       1       1       8       1      13       4       1  >        2e;     2E;     2E#    2EE;     2f;     2f#     2F#    2f#;    2F#;    2FF;  >          9       5       1       1       4      10       4       5       1       3  >      2FF#;      2g      2G     2g;     2G;     2g#     2G#    2g#;    2G#;   2G#X;  >          1       7       1       3       1       4       1       1       4       1  >       2GG;     4.a    4.a-     4.b     4.B    4.b-    4.BB     4.c   4.cc#     4.d  >          2       2       1       2       3       2       2       1       1       1  >       4.dd     4.e    4.e-    4.ee     4.f    4.f#     4.g      4a      4A     4a-  >          1       1       1       1       3       1       5      90      58      15  >        4A-    4a-;    4A-;    4a-X     4a;     4A;     4a#     4A#     4AA    4AA-  >          4       2       2       1       8       3       4       2      20       2  >      4AA-;    4AA;    4AA#    4anX      4b      4B     4b-     4B-    4B-X     4b;  >          1       5       1       1      81      56      16      10       1       9  >        4B;     4B]     4BB    4BB-    4BB;      4c      4C     4c;     4C;     4c]  >          9       1      25       7       3      49      23       8       2       1  >        4c#     4C#    4c#;    4C#;     4cc    4cc;    4cc#   4ccnX    4CnX      4d  >         27      19       2       1      48       3      28       1       1      53  >         4D     4d-     4D-     4d;     4D;     4d]     4d#     4D#    4d#;     4dd  >         30       9       4       8       4       1       9       8       3      29  >        4DD    4dd-    4dd;    4dd#    4dnX    4DnX      4e      4E     4e-     4E-  >          1       7       2       3       2       1     103      43       7       6  >       4e-;     4e;     4E;     4e]     4E]     4e#     4E#    4e#;    4E#X     4ee  >          2      14       7       1       1       3       2       1       1      20  >        4EE    4ee-   4ee-X    4ee;    4EE;    4enX    4EnX      4f      4F     4f;  >          2       3       1       1       2       1       1      50      12       2  >        4F;     4f#     4F#    4f#;    4F#;    4F#X   4F#X;     4ff     4FF    4ff;  >          2      47      30       4       2       1       1       6       3       1  >       4FF;    4ff#    4FF#      4g      4G     4g-     4g;     4G;     4g]     4G]  >          1       1       2      66      33       1       8       3       2       1  >        4g#     4G#    4g#;    4G#;    4G#X   4G#X;     4gg     4GG    4GG;    4GG#  >         34      21       5       3       1       1       1      15       5       2  >       4gnX    4GnX      4r     4ry    8.cL      8a      8A     8a-     8A-    8a-J  >          1       1       2       2       1       5       5       2       1       2  >       8A-J    8a-L    8A-L   8a-XJ     8A#    8a#J    8A#J     8AA    8AA-    8AAJ  >          1       4       1       1       2       1       1       3       1       7  >       8AAL     8aJ     8AJ     8aL     8AL    8aL]    8AL]   8AnXL      8b     8b-  >          4      15      17      10      12       1       2       1       2       1  >        8B-    8b-J    8B-J    8b-L     8BB   8BB-J   8BB-L    8BBJ    8BBL     8bJ  >          1       1       6       2       3       6       3       6       4      11  >        8BJ     8bL     8BL      8c      8C     8C#    8c#J    8C#J    8c#L    8C#L  >         15      14      18       1       5       2       3       2       5       4  >      8c#XJ     8cc   8cc#J   8cc#L    8ccJ    8ccL     8cJ     8CJ     8cL     8CL  >          1       2       2       2       7       7      15       8      14      14  >       8cL]    8CL]   8cnXJ      8d      8D     8d-     8D-    8D-J    8D-L   8d-XJ  >          1       1       1       5       3       1       6       4       2       1  >       8d#J    8D#J    8d#L    8D#L     8dd   8dd#J    8ddJ    8ddL     8dJ     8DJ  >          5       1       1       2       1       1       2       4      19      15  >        8dL     8DL    8dL]    8dnJ      8e      8E     8E-    8e-J    8E-J    8e-L  >         24       6       1       1       6       2       6       1       1       1  >       8E-L    8EEJ    8eeL    8EEL     8eJ     8EJ     8eL     8EL    8eL]    8EL]  >          4       1       2       1      20       7      35      15       2       1  >         8f      8F     8f#     8F#    8f#J    8F#J    8f#L    8F#L   8f#L]   8F#XJ  >          3       4       2       3      26      14      12       7       1       1  >      8f#XL   8FF#J    8FFL     8fJ     8FJ     8fL     8FL    8fL]   8FnXL      8g  >          1       2       2       4       5       5       6       1       1       3  >         8G     8g#     8G#    8g#J    8G#J    8g#L    8G#L   8g#XJ     8GG    8GGJ  >          4       4       4       7       7       5       3       1       2       2  >       8GGL     8gJ     8GJ     8gL     8GL    8gL]    8GL]   8gnXL   8GnXL  >          2      14       8      14      17       3       1       2       1 with(chorales,       kern(Token) |> table()) >     >      a   A  a-  A-  a#  A#  AA AA- AA#   b   B  b-  B-  BB BB-   c   C  c#  C#  cc  >    160 114  29  11   5   5  44   5   1 134 115  24  19  48  17 102  57  48  30  73  >    cc#   d   D  d-  D-  d#  D#  dd  DD dd- dd#   e   E  e-  E-  e#  E#  ee  EE ee-  >     37 134  70  12  16  21  12  48   1   7   4 213  89  13  17   4   4  25   7   4  >      f   F  f#  F#  ff  FF ff# FF#   g   G  g-  g#  G#  gg  GG GG#  >     74  30 111  65   7  10   1   5 134  73   1  61  46   1  29   2 with(chorales,       kern(Token) |>  table() |>  sort()) >     >    AA#  DD ff#  g-  gg GG# dd#  e#  E# ee-  a#  A# AA- FF# dd-  EE  ff  FF  A-  d-  >      1   1   1   1   1   2   4   4   4   4   5   5   5   5   7   7   7  10  11  12  >     D#  e-  D- BB-  E-  B-  d#  b-  ee  a-  GG  C#   F cc#  AA  G#  BB  c#  dd   C  >     12  13  16  17  17  19  21  24  25  29  29  30  30  37  44  46  48  48  48  57  >     g#  F#   D  cc   G   f   E   c  f#   A   B   b   d   g   a   e  >     61  65  70  73  73  74  89 102 111 114 115 134 134 134 160 213 with(chorales,       kern(Token) |>         table() |>         sort() |>         tail(n = 10) |>         barplot()) kern(Token) |>         table() |>         sort() |>         tail(n = 10) |>         barplot()"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/WorkingWithData.html","id":"within","dir":"Articles","previous_headings":"With and within you","what":"Within","title":"Working with Humdrum Data","text":"many cases, want apply functions humdrum data, keep humdrum/humdrumR structure place. within . just returns ever output commands , within (attempt ) put results commands “back inside” humdrumR data object, new field. example, let’s say want translate kern data different pitch representation, like scientific pitch. can pitch command. use … just get notes! Let’s try within instead: Now get humdrumR data back, Token data transformed **kern **pitch. Notice, now two “Data fields” listed bottom: Token (original data) Result1—default name new fields produced within, yes, get higher numbers keep making new fields. “Result1” informative, ’s actually good idea give new fields specific names. can assigning expressions within:","code":"with(chorales, pitch(Token)) >       [1] \"G2\"  \"G3\"  \"E3\"  \"F#3\" \"G3\"  \"D3\"  \"E3\"  \"C3\"  \"B2\"  \"A2\"  \"G2\"  \"D3\"  >      [13] \"G2\"  \"F#2\" \"G2\"  \"A2\"  \"B2\"  \"C3\"  \"D3\"  \"G2\"  \"G2\"  \"G2\"  \"A2\"  \"B2\"  >      [25] \"B2\"  \"A2\"  \"G2\"  \"D3\"  \"E3\"  \"E3\"  \"D3\"  \"C3\"  \"B2\"  \"C3\"  \"D3\"  \"G2\"  >      [37] \"A2\"  \"B2\"  \"G2\"  \"C3\"  \"G2\"  \"F#2\" \"G2\"  \"A2\"  \"B2\"  \"G2\"  \"D3\"  \"E3\"  >      [49] \"D3\"  \"C3\"  \"B2\"  \"A2\"  \"G2\"  \"D3\"  \"G3\"  \"G3\"  \"F#3\" \"E3\"  \"E3\"  \"D3\"  >      [61] \"C3\"  \"D3\"  \"G2\"  \"B3\"  \"B3\"  \"C4\"  \"B3\"  \"A3\"  \"G3\"  \"F#3\" \"G3\"  \"C4\"  >      [73] \"B3\"  \"C4\"  \"D4\"  \"D4\"  \"D4\"  \"A3\"  \"B3\"  \"C4\"  \"D4\"  \"E4\"  \"D4\"  \"C4\"  >      [85] \"B3\"  \"D4\"  \"D4\"  \"C4\"  \"B3\"  \"A3\"  \"B3\"  \"C4\"  \"D4\"  \"D4\"  \"D4\"  \"B3\"  >      [97] \"G3\"  \"B3\"  \"E4\"  \"D4\"  \"D4\"  \"D4\"  \"C4\"  \"D4\"  \"D4\"  \"C4\"  \"B3\"  \"C4\"  >     [109] \"D4\"  \"D4\"  \"C4\"  \"B3\"  \"C4\"  \"D4\"  \"D4\"  \"D4\"  \"D4\"  \"E4\"  \"E4\"  \"D4\"  >     [121] \"C4\"  \"B3\"  \"D4\"  \"D4\"  \"E4\"  \"D4\"  \"D4\"  \"B3\"  \"E4\"  \"D4\"  \"E4\"  \"F#4\" >     [133] \"G4\"  \"F#4\" \"G4\"  \"D4\"  \"E4\"  \"F#4\" \"G4\"  \"F#4\" \"D4\"  \"G4\"  \"G4\"  \"F#4\" >     [145] \"E4\"  \"F#4\" \"G4\"  \"G4\"  \"A4\"  \"G4\"  \"F#4\" \"G4\"  \"F#4\" \"E4\"  \"E4\"  \"F#4\" >     [157] \"G4\"  \"A4\"  \"A4\"  \"G4\"  \"F#4\" \"G4\"  \"F4\"  \"E4\"  \"G4\"  \"A4\"  \"G4\"  \"F#4\" >     [169] \"G4\"  \"F#4\" \"F#4\" \"E4\"  \"E4\"  \"F#4\" \"G4\"  \"F#4\" \"G4\"  \"A4\"  \"G4\"  \"F#4\" >     [181] \"G4\"  \"F#4\" \"D4\"  \"G4\"  \"G4\"  \"D5\"  \"B4\"  \"A4\"  \"G4\"  \"G4\"  \"A4\"  \"B4\"  >     [193] \"A4\"  \"B4\"  \"D5\"  \"C5\"  \"B4\"  \"A4\"  \"G4\"  \"B4\"  \"B4\"  \"C5\"  \"D5\"  \"D5\"  >     [205] \"C5\"  \"B4\"  \"A4\"  \"G4\"  \"B4\"  \"C5\"  \"D5\"  \"C5\"  \"B4\"  \"G4\"  \"B4\"  \"D5\"  >     [217] \"C5\"  \"B4\"  \"A4\"  \"G4\"  \"A4\"  \"B4\"  \"A4\"  \"B4\"  \"D5\"  \"C5\"  \"B4\"  \"A4\"  >     [229] \"G4\"  \"A3\"  \"G#3\" \"F#3\" \"C#3\" \"D3\"  \"D#3\" \"E3\"  \"B2\"  \"E2\"  \"E3\"  \"A3\"  >     [241] \"B3\"  \"C#4\" \"B3\"  \"A3\"  \"B3\"  \"B2\"  \"E3\"  \"C#3\" \"F#3\" \"G#3\" \"A3\"  \"E3\"  >     [253] \"C#3\" \"A2\"  \"D3\"  \"C#3\" \"D3\"  \"E3\"  \"C#3\" \"B2\"  \"C#3\" \"D3\"  \"G3\"  \"F#3\" >     [265] \"B2\"  \"C#3\" \"F#3\" \"E3\"  \"D3\"  \"C#3\" \"B2\"  \"A2\"  \"B2\"  \"C#3\" \"D3\"  \"E3\"  >     [277] \"B2\"  \"F#3\" \"G#3\" \"A3\"  \"G#3\" \"E3\"  \"A3\"  \"A3\"  \"G#3\" \"F#3\" \"E3\"  \"D3\"  >     [289] \"E3\"  \"A2\"  \"C#4\" \"C#4\" \"C#4\" \"B3\"  \"A3\"  \"G#3\" \"F#3\" \"B3\"  \"A3\"  \"G#3\" >     [301] \"E4\"  \"E4\"  \"D#4\" \"C#4\" \"B3\"  \"A3\"  \"G#3\" \"G#3\" \"A3\"  \"B3\"  \"C#4\" \"D4\"  >     [313] \"E4\"  \"E4\"  \"D4\"  \"E4\"  \"E4\"  \"E4\"  \"F#4\" \"B3\"  \"A#3\" \"B3\"  \"C#4\" \"D4\"  >     [325] \"G#3\" \"A3\"  \"G#3\" \"F#3\" \"E3\"  \"E4\"  \"D4\"  \"C#4\" \"D4\"  \"E4\"  \"F#4\" \"G#4\" >     [337] \"F#4\" \"F#4\" \"E4\"  \"D4\"  \"C#4\" \"B3\"  \"C#4\" \"D4\"  \"E4\"  \"D4\"  \"C#4\" \"F#4\" >     [349] \"B3\"  \"E4\"  \"D4\"  \"C#4\" \"E4\"  \"F#4\" \"E4\"  \"F#4\" \"F#4\" \"E4\"  \"D#4\" \"B3\"  >     [361] \"G#4\" \"A4\"  \"G#4\" \"F#4\" \"E4\"  \"E4\"  \"D#4\" \"B3\"  \"C#5\" \"B4\"  \"A4\"  \"A4\"  >     [373] \"G#4\" \"A4\"  \"G4\"  \"F#4\" \"G#4\" \"A4\"  \"G#4\" \"A#4\" \"B4\"  \"A4\"  \"G4\"  \"F#4\" >     [385] \"E4\"  \"F#4\" \"F#4\" \"E4\"  \"D4\"  \"C#4\" \"D4\"  \"E4\"  \"F#4\" \"G#4\" \"A4\"  \"E4\"  >     [397] \"B4\"  \"A4\"  \"G#4\" \"F#4\" \"E4\"  \"F#4\" \"G#4\" \"A4\"  \"A4\"  \"G#4\" \"E4\"  \"A4\"  >     [409] \"A4\"  \"A4\"  \"A4\"  \"B4\"  \"G4\"  \"F#4\" \"E4\"  \"B4\"  \"C#5\" \"B4\"  \"A4\"  \"G#4\" >     [421] \"F#4\" \"G#4\" \"F#4\" \"E4\"  \"E5\"  \"D5\"  \"C#5\" \"B4\"  \"A4\"  \"A4\"  \"B4\"  \"C#5\" >     [433] \"B4\"  \"C#5\" \"D5\"  \"C#5\" \"B4\"  \"A#4\" \"B4\"  \"E4\"  \"A4\"  \"B4\"  \"C#5\" \"D5\"  >     [445] \"E5\"  \"D5\"  \"C#5\" \"B4\"  \"D5\"  \"C#5\" \"B4\"  \"E5\"  \"D5\"  \"C#5\" \"B4\"  \"A4\"  >     [457] \"B4\"  \"C#5\" \"B4\"  \"A4\"  \"E3\"  \"A3\"  \"B3\"  \"C4\"  \"B3\"  \"A3\"  \"G#3\" \"A3\"  >     [469] \"E3\"  \"B2\"  \"C3\"  \"D3\"  \"E3\"  \"F3\"  \"E3\"  \"D3\"  \"E3\"  \"A2\"  \"F#3\" \"G3\"  >     [481] \"F#3\" \"E3\"  \"B3\"  \"A3\"  \"G3\"  \"F#3\" \"E3\"  \"D3\"  \"C3\"  \"B2\"  \"E3\"  \"F3\"  >     [493] \"C3\"  \"D3\"  \"E3\"  \"A2\"  \"B2\"  \"C3\"  \"D3\"  \"E3\"  \"A2\"  \"A3\"  \"G#3\" \"A3\"  >     [505] \"G3\"  \"F3\"  \"E3\"  \"D3\"  \"C#3\" \"D3\"  \"D#3\" \"E3\"  \"E4\"  \"E4\"  \"D4\"  \"E4\"  >     [517] \"D4\"  \"C4\"  \"B3\"  \"C4\"  \"D4\"  \"E4\"  \"F4\"  \"E4\"  \"E4\"  \"D4\"  \"C4\"  \"D4\"  >     [529] \"G#3\" \"A3\"  \"G#3\" \"C4\"  \"A3\"  \"G3\"  \"A3\"  \"B3\"  \"B3\"  \"B3\"  \"A3\"  \"B3\"  >     [541] \"C4\"  \"F#3\" \"E4\"  \"D4\"  \"C4\"  \"D4\"  \"E4\"  \"E4\"  \"E4\"  \"D4\"  \"C4\"  \"B3\"  >     [553] \"C4\"  \"C4\"  \"B3\"  \"A3\"  \"A3\"  \"Bb3\" \"A3\"  \"E3\"  \"F#3\" \"G#3\" \"G#4\" \"A4\"  >     [565] \"G#4\" \"A4\"  \"G#4\" \"A4\"  \"B4\"  \"E4\"  \"F#4\" \"G#4\" \"G#4\" \"A4\"  \"G#4\" \"A4\"  >     [577] \"G4\"  \"F4\"  \"E4\"  \"E4\"  \"D4\"  \"D4\"  \"D#4\" \"E4\"  \"D#4\" \"E4\"  \"D#4\" \"E4\"  >     [589] \"G4\"  \"F#4\" \"E4\"  \"D#4\" \"B3\"  \"A3\"  \"A4\"  \"G#4\" \"A4\"  \"E4\"  \"E4\"  \"E4\"  >     [601] \"E4\"  \"E4\"  \"E4\"  \"F4\"  \"G4\"  \"F#4\" \"G#4\" \"A4\"  \"E4\"  \"B4\"  \"C5\"  \"B4\"  >     [613] \"A4\"  \"E5\"  \"E5\"  \"D5\"  \"C5\"  \"B4\"  \"D5\"  \"C5\"  \"B4\"  \"A4\"  \"B4\"  \"C5\"  >     [625] \"D5\"  \"C5\"  \"B4\"  \"A4\"  \"A4\"  \"B4\"  \"A4\"  \"G4\"  \"F#4\" \"E4\"  \"F#4\" \"G4\"  >     [637] \"A4\"  \"B4\"  \"G4\"  \"A4\"  \"B4\"  \"C5\"  \"B4\"  \"C5\"  \"B4\"  \"A4\"  \"G#4\" \"A4\"  >     [649] \"A4\"  \"E5\"  \"C5\"  \"D5\"  \"E5\"  \"D5\"  \"C5\"  \"B4\"  \"E3\"  \"D#3\" \"B2\"  \"E3\"  >     [661] \"F#3\" \"G#3\" \"A3\"  \"E3\"  \"A2\"  \"D#3\" \"E3\"  \"F#3\" \"G#3\" \"C#3\" \"F#3\" \"E3\"  >     [673] \"D#3\" \"C#3\" \"B2\"  \"F#3\" \"B2\"  \"E3\"  \"C#3\" \"D#3\" \"E3\"  \"F#3\" \"B3\"  \"G#3\" >     [685] \"E3\"  \"F#3\" \"B2\"  \"E3\"  \"G#3\" \"E3\"  \"A3\"  \"B3\"  \"C#4\" \"E#3\" \"F#3\" \"C#3\" >     [697] \"E3\"  \"B2\"  \"C#3\" \"D#3\" \"E3\"  \"B2\"  \"A#2\" \"B2\"  \"E2\"  \"E4\"  \"F#4\" \"E4\"  >     [709] \"D#4\" \"E4\"  \"A3\"  \"B3\"  \"C#4\" \"D4\"  \"E4\"  \"D4\"  \"C#4\" \"B3\"  \"B3\"  \"A3\"  >     [721] \"G#3\" \"F#3\" \"F#3\" \"B3\"  \"A#3\" \"F#3\" \"G#3\" \"C#4\" \"F#3\" \"F#4\" \"F#4\" \"B3\"  >     [733] \"A#3\" \"D#4\" \"E4\"  \"B3\"  \"E4\"  \"E4\"  \"C#4\" \"D4\"  \"C#4\" \"C#4\" \"B3\"  \"B3\"  >     [745] \"E4\"  \"E4\"  \"D#4\" \"B3\"  \"F#3\" \"G#3\" \"G#4\" \"F#4\" \"G#4\" \"A4\"  \"G#4\" \"F#4\" >     [757] \"E4\"  \"A4\"  \"G#4\" \"E4\"  \"F#4\" \"E4\"  \"E4\"  \"D#4\" \"E4\"  \"C#4\" \"F#4\" \"E4\"  >     [769] \"D#4\" \"E4\"  \"D#4\" \"E4\"  \"F#4\" \"G#4\" \"A#4\" \"B4\"  \"A#4\" \"B4\"  \"B4\"  \"F#4\" >     [781] \"F#4\" \"G#4\" \"E4\"  \"F#4\" \"G#4\" \"A4\"  \"E4\"  \"F#4\" \"G#4\" \"F#4\" \"E#4\" \"E4\"  >     [793] \"D#4\" \"C#4\" \"B3\"  \"B3\"  \"C#4\" \"B3\"  \"B3\"  \"B4\"  \"B4\"  \"B4\"  \"B4\"  \"D5\"  >     [805] \"C#5\" \"B4\"  \"A4\"  \"B4\"  \"G#4\" \"E4\"  \"F#4\" \"G#4\" \"A#4\" \"B4\"  \"C#5\" \"B4\"  >     [817] \"B4\"  \"E5\"  \"D#5\" \"C#5\" \"D#5\" \"E5\"  \"D#5\" \"C#5\" \"B4\"  \"B4\"  \"E5\"  \"B4\"  >     [829] \"C#5\" \"G#4\" \"A4\"  \"B4\"  \"A4\"  \"G#4\" \"G#4\" \"F#4\" \"A4\"  \"G#4\" \"F#4\" \"C#4\" >     [841] \"D#4\" \"E4\"  \"G3\"  \"C3\"  \"D3\"  \"E3\"  \"F#3\" \"G3\"  \"A3\"  \"D3\"  \"G3\"  \"F#3\" >     [853] \"G3\"  \"F#3\" \"E3\"  \"B2\"  \"C3\"  \"D3\"  \"G2\"  \"G3\"  \"F#3\" \"E3\"  \"D3\"  \"E3\"  >     [865] \"F#3\" \"G3\"  \"D3\"  \"G2\"  \"C3\"  \"G3\"  \"F3\"  \"E3\"  \"D3\"  \"C3\"  \"B2\"  \"C3\"  >     [877] \"D3\"  \"E3\"  \"A2\"  \"D3\"  \"G3\"  \"A3\"  \"B3\"  \"C4\"  \"F#3\" \"G#3\" \"A3\"  \"A2\"  >     [889] \"E3\"  \"G#2\" \"A2\"  \"B2\"  \"C3\"  \"A2\"  \"F3\"  \"E3\"  \"D3\"  \"E3\"  \"E2\"  \"A2\"  >     [901] \"A2\"  \"B2\"  \"C#3\" \"D3\"  \"C#3\" \"D3\"  \"A2\"  \"D3\"  \"B2\"  \"E3\"  \"D3\"  \"G3\"  >     [913] \"F#3\" \"E3\"  \"B2\"  \"A2\"  \"G2\"  \"C3\"  \"B2\"  \"A2\"  \"D3\"  \"C3\"  \"D3\"  \"G2\"  >     [925] \"B3\"  \"C4\"  \"B3\"  \"A3\"  \"E4\"  \"A3\"  \"B3\"  \"C4\"  \"E4\"  \"D4\"  \"D4\"  \"D4\"  >     [937] \"D4\"  \"G3\"  \"A3\"  \"B3\"  \"G3\"  \"E4\"  \"A3\"  \"B3\"  \"C4\"  \"B3\"  \"B3\"  \"A3\"  >     [949] \"D4\"  \"G3\"  \"A3\"  \"A3\"  \"G3\"  \"G3\"  \"F#3\" \"G3\"  \"G3\"  \"G3\"  \"G3\"  \"G3\"  >     [961] \"G3\"  \"G3\"  \"A3\"  \"B3\"  \"A3\"  \"A3\"  \"G3\"  \"G3\"  \"D4\"  \"C4\"  \"B3\"  \"A3\"  >     [973] \"E4\"  \"E4\"  \"E4\"  \"E4\"  \"D4\"  \"C4\"  \"B3\"  \"A3\"  \"A3\"  \"G#3\" \"A3\"  \"B3\"  >     [985] \"G#3\" \"A3\"  \"G#3\" \"A3\"  \"E3\"  \"F#3\" \"G3\"  \"D4\"  \"C4\"  \"Bb3\" \"A3\"  \"A3\"  >     [997] \"G3\"  \"F#3\" \"F#3\" \"G3\"  \"D4\"  \"D4\"  \"E4\"  \"D4\"  \"E4\"  \"D4\"  \"C4\"  \"D4\"  >    [1009] \"E4\"  \"D4\"  \"C4\"  \"B3\"  \"G4\"  \"G4\"  \"F#4\" \"G4\"  \"F#4\" \"E4\"  \"G4\"  \"G4\"  >    [1021] \"F#4\" \"G4\"  \"A4\"  \"G4\"  \"G4\"  \"G4\"  \"G4\"  \"G4\"  \"F#4\" \"D4\"  \"D4\"  \"D4\"  >    [1033] \"E4\"  \"F#4\" \"E4\"  \"E4\"  \"D4\"  \"D4\"  \"C4\"  \"B3\"  \"E4\"  \"D4\"  \"E4\"  \"F4\"  >    [1045] \"E4\"  \"F#4\" \"G4\"  \"F#4\" \"G4\"  \"A4\"  \"F#4\" \"D4\"  \"G4\"  \"G4\"  \"A4\"  \"B4\"  >    [1057] \"B4\"  \"G#4\" \"A4\"  \"G#4\" \"B4\"  \"A4\"  \"E4\"  \"C4\"  \"D4\"  \"E4\"  \"F4\"  \"E4\"  >    [1069] \"D4\"  \"C4\"  \"A4\"  \"D4\"  \"E4\"  \"F4\"  \"E4\"  \"D4\"  \"E4\"  \"E4\"  \"D4\"  \"D4\"  >    [1081] \"C#4\" \"D4\"  \"D4\"  \"C4\"  \"B3\"  \"A3\"  \"G3\"  \"F#3\" \"G3\"  \"G4\"  \"F#4\" \"G4\"  >    [1093] \"G4\"  \"G4\"  \"G4\"  \"F#4\" \"D4\"  \"D5\"  \"E5\"  \"D5\"  \"C5\"  \"B4\"  \"C5\"  \"D5\"  >    [1105] \"C5\"  \"B4\"  \"C5\"  \"B4\"  \"A4\"  \"B4\"  \"C5\"  \"D5\"  \"C5\"  \"B4\"  \"A4\"  \"G4\"  >    [1117] \"A4\"  \"G4\"  \"G4\"  \"A4\"  \"B4\"  \"C5\"  \"B4\"  \"A4\"  \"B4\"  \"A4\"  \"G4\"  \"G4\"  >    [1129] \"A4\"  \"B4\"  \"C5\"  \"D5\"  \"E5\"  \"B4\"  \"C#5\" \"D5\"  \"B4\"  \"C5\"  \"D5\"  \"E5\"  >    [1141] \"D5\"  \"C5\"  \"B4\"  \"C5\"  \"B4\"  \"E5\"  \"E5\"  \"E5\"  \"A4\"  \"D5\"  \"C5\"  \"B4\"  >    [1153] \"A4\"  \"C5\"  \"B4\"  \"A4\"  \"G4\"  \"A4\"  \"G4\"  \"F4\"  \"E4\"  \"D4\"  \"D4\"  \"G4\"  >    [1165] \"A4\"  \"B4\"  \"C5\"  \"D5\"  \"C5\"  \"B4\"  \"A4\"  \"B4\"  \"C5\"  \"A4\"  \"G4\"  \"F2\"  >    [1177] \"F3\"  \"E3\"  \"Eb3\" \"D3\"  \"C3\"  \"D3\"  \"E3\"  \"C3\"  \"F3\"  \"Bb2\" \"A2\"  \"G2\"  >    [1189] \"F2\"  \"A2\"  \"C3\"  \"F2\"  NA    \"A3\"  \"B2\"  \"C3\"  \"D3\"  \"F3\"  \"A3\"  \"G3\"  >    [1201] \"F3\"  \"D3\"  \"G3\"  \"C3\"  \"F2\"  \"G2\"  \"A2\"  \"Bb2\" \"C3\"  \"F2\"  \"A3\"  \"C4\"  >    [1213] \"C4\"  \"C4\"  \"D4\"  \"G3\"  \"C4\"  \"C4\"  \"Bb3\" \"C4\"  \"D4\"  \"Bb3\" \"C4\"  \"C4\"  >    [1225] \"C4\"  NA    \"F4\"  \"F4\"  \"E4\"  \"E4\"  \"D4\"  \"C4\"  \"C4\"  \"B3\"  \"E4\"  \"C4\"  >    [1237] \"Bb3\" \"C4\"  \"D4\"  \"C4\"  \"Bb3\" \"A3\"  \"C4\"  \"F4\"  \"G4\"  \"F4\"  \"F4\"  \"E4\"  >    [1249] \"F4\"  \"G4\"  \"E4\"  \"F4\"  \"F4\"  \"F4\"  \"E4\"  \"F4\"  \"E4\"  \"F4\"  NA    \"A4\"  >    [1261] \"A4\"  \"G4\"  \"G4\"  \"C5\"  \"Bb4\" \"A4\"  \"A4\"  \"A4\"  \"G4\"  \"G4\"  \"F4\"  \"F4\"  >    [1273] \"E4\"  \"F4\"  \"F4\"  \"E4\"  \"C4\"  \"F4\"  \"A4\"  \"G4\"  \"A4\"  \"Bb4\" \"C5\"  \"A4\"  >    [1285] \"D5\"  \"C5\"  \"Bb4\" \"A4\"  \"G4\"  \"A4\"  NA    \"C5\"  \"D5\"  \"E5\"  \"F5\"  \"E5\"  >    [1297] \"D5\"  \"C5\"  \"A4\"  \"Bb4\" \"A4\"  \"G4\"  \"G4\"  \"F4\"  \"A3\"  \"F#3\" \"C#3\" \"D3\"  >    [1309] \"D3\"  \"C#3\" \"D3\"  \"E3\"  \"A2\"  \"A3\"  \"E#3\" \"C#3\" \"F#3\" \"E3\"  \"D3\"  \"C#3\" >    [1321] \"D3\"  \"E3\"  \"A2\"  \"A2\"  \"D3\"  \"A3\"  \"G#3\" \"F#3\" \"E#3\" \"F#3\" \"B2\"  \"C#3\" >    [1333] \"F#2\" \"D#3\" \"E3\"  \"D3\"  \"C#3\" \"A2\"  \"B2\"  \"E3\"  \"C#3\" \"F#3\" \"E3\"  \"F#3\" >    [1345] \"G#3\" \"F#3\" \"E3\"  \"A3\"  \"A2\"  \"D3\"  \"C#3\" \"B2\"  \"B3\"  \"A3\"  \"G3\"  \"F#3\" >    [1357] \"E3\"  \"F#3\" \"G3\"  \"F#3\" \"B2\"  \"E3\"  \"A3\"  \"G#3\" \"F#3\" \"B3\"  \"A3\"  \"G3\"  >    [1369] \"C#3\" \"D3\"  \"A3\"  \"D#3\" \"E3\"  \"A2\"  \"B2\"  \"E3\"  \"C#3\" \"F#3\" \"E3\"  \"B2\"  >    [1381] \"C#3\" \"D3\"  \"D#3\" \"E3\"  \"E#3\" \"F#3\" \"G#3\" \"A3\"  \"E3\"  \"F#3\" \"D3\"  \"E3\"  >    [1393] \"E3\"  \"A2\"  \"C#4\" \"C#4\" \"C#4\" \"A3\"  \"G#3\" \"A3\"  \"G#3\" \"A3\"  \"C#4\" \"C#4\" >    [1405] \"B3\"  \"A3\"  \"E4\"  \"E4\"  \"F#4\" \"E4\"  \"C#4\" \"C#4\" \"D4\"  \"E4\"  \"E#4\" \"F#4\" >    [1417] \"G#4\" \"C#4\" \"D4\"  \"C#4\" \"A3\"  \"A3\"  \"G#3\" \"A3\"  \"B3\"  \"C#4\" \"B3\"  \"A3\"  >    [1429] \"G#3\" \"G#3\" \"A3\"  \"D4\"  \"B3\"  \"E4\"  \"E4\"  \"D4\"  \"E4\"  \"F#4\" \"B3\"  \"E4\"  >    [1441] \"D4\"  \"C#4\" \"B3\"  \"A#3\" \"B3\"  \"G#3\" \"A3\"  \"A3\"  \"B3\"  \"B3\"  \"B3\"  \"A3\"  >    [1453] \"G3\"  \"F#3\" \"A3\"  \"F#3\" \"B3\"  \"C#4\" \"B3\"  \"A3\"  \"G#3\" \"G#3\" \"A3\"  \"B3\"  >    [1465] \"B3\"  \"A3\"  \"G#3\" \"D4\"  \"A3\"  \"G#3\" \"C#4\" \"F#4\" \"E4\"  \"E4\"  \"E4\"  \"D4\"  >    [1477] \"C#4\" \"F#4\" \"E4\"  \"D4\"  \"C#4\" \"E4\"  \"F#4\" \"E4\"  \"D4\"  \"C#4\" \"B3\"  \"E4\"  >    [1489] \"F#4\" \"E4\"  \"E4\"  \"E4\"  \"F#4\" \"G#4\" \"E#4\" \"F#4\" \"G#4\" \"A4\"  \"G#4\" \"E4\"  >    [1501] \"E4\"  \"F#4\" \"G#4\" \"A4\"  \"B4\"  \"A4\"  \"G#4\" \"F#4\" \"E#4\" \"C#4\" \"F#4\" \"E4\"  >    [1513] \"E4\"  \"E4\"  \"D#4\" \"B3\"  \"C#4\" \"C#4\" \"F#4\" \"E4\"  \"F#4\" \"G#4\" \"A4\"  \"G4\"  >    [1525] \"F#4\" \"A4\"  \"B4\"  \"B4\"  \"A4\"  \"G4\"  \"A4\"  \"B4\"  \"E4\"  \"D#4\" \"E4\"  \"E4\"  >    [1537] \"F#4\" \"F#4\" \"G4\"  \"G4\"  \"F#4\" \"E4\"  \"D4\"  \"E4\"  \"F#4\" \"E4\"  \"E4\"  \"D#4\" >    [1549] \"B3\"  \"C#4\" \"C#4\" \"D#4\" \"E4\"  \"D#4\" \"E4\"  \"F#4\" \"G#4\" \"A4\"  \"E4\"  \"G#4\" >    [1561] \"A4\"  \"B4\"  \"A4\"  \"G#4\" \"A4\"  \"A4\"  \"G#4\" \"E4\"  \"A4\"  \"A4\"  \"G#4\" \"F#4\" >    [1573] \"E4\"  \"A4\"  \"B4\"  \"C#5\" \"C#5\" \"C#5\" \"B4\"  \"C#5\" \"C#5\" \"B4\"  \"A4\"  \"B4\"  >    [1585] \"A4\"  \"A4\"  \"A4\"  \"B4\"  \"C#5\" \"B4\"  \"C#5\" \"A4\"  \"G#4\" \"F#4\" \"B4\"  \"B4\"  >    [1597] \"A4\"  \"G#4\" \"A4\"  \"F#4\" \"E4\"  \"E4\"  \"A4\"  \"A4\"  \"B4\"  \"B4\"  \"C#5\" \"B4\"  >    [1609] \"C#5\" \"A4\"  \"A4\"  \"D5\"  \"D5\"  \"C#5\" \"B4\"  \"C#5\" \"B4\"  \"B4\"  \"C#5\" \"C#5\" >    [1621] \"D5\"  \"D5\"  \"E5\"  \"A4\"  \"C#5\" \"B4\"  \"A4\"  \"G#4\" \"A4\"  \"F#4\" \"E4\"  \"E4\"  >    [1633] \"A4\"  \"G#4\" \"F#4\" \"E4\"  \"B4\"  \"C#5\" \"B4\"  \"C#5\" \"D5\"  \"C#5\" \"B4\"  \"A4\"  >    [1645] \"G#4\" \"A4\"  \"B4\"  \"C#5\" \"B4\"  \"A4\"  \"F3\"  \"Eb3\" \"Db3\" \"C3\"  \"Bb2\" \"C3\"  >    [1657] \"F2\"  \"F2\"  \"F3\"  \"Eb3\" \"Db3\" \"C3\"  \"Bb2\" \"Ab2\" \"Db3\" \"Eb3\" \"Ab2\" \"Db3\" >    [1669] \"C3\"  \"Bb2\" \"C3\"  \"Db3\" \"Bb2\" \"C3\"  \"F2\"  \"F3\"  \"G3\"  \"A3\"  \"F3\"  \"Bb2\" >    [1681] \"C3\"  \"Db3\" \"Bb2\" \"Eb3\" \"F3\"  \"G3\"  \"Eb3\" \"Ab3\" \"Ab3\" \"Db3\" \"Eb3\" \"F3\"  >    [1693] \"Db3\" \"Bb2\" \"C3\"  \"Db3\" \"Bb2\" \"Eb3\" \"C3\"  \"F3\"  \"Bb2\" \"Bb3\" \"Ab3\" \"G3\"  >    [1705] \"F3\"  \"Bb2\" \"C3\"  \"F2\"  \"F2\"  \"G2\"  \"Ab2\" \"Bb2\" \"C3\"  \"D3\"  \"Eb3\" \"F3\"  >    [1717] \"G3\"  \"G2\"  \"C3\"  \"C3\"  \"F3\"  \"Eb3\" \"Db3\" \"C3\"  \"Bb2\" \"C3\"  \"Db3\" \"Eb3\" >    [1729] \"Eb3\" \"Ab2\" \"Ab2\" \"Db3\" \"Eb3\" \"Db3\" \"C3\"  \"Bb2\" \"C3\"  \"Db3\" \"Bb2\" \"Eb3\" >    [1741] \"F3\"  \"Eb3\" \"Db3\" \"C3\"  \"Db3\" \"Eb3\" \"C3\"  \"F3\"  \"E3\"  \"F3\"  \"G3\"  \"Ab3\" >    [1753] \"G3\"  \"Ab3\" \"Bb3\" \"C4\"  \"C3\"  \"F3\"  \"F3\"  \"Ab3\" \"A3\"  \"Bb3\" \"C4\"  \"Db4\" >    [1765] \"C4\"  \"Bb3\" \"Ab3\" \"Ab3\" \"C4\"  \"Bb3\" \"Eb4\" \"Eb4\" \"F4\"  \"Eb4\" \"Db4\" \"C4\"  >    [1777] \"Db4\" \"Db4\" \"G3\"  \"F3\"  \"Ab3\" \"Db4\" \"C4\"  \"Bb3\" \"Ab3\" \"A3\"  \"Bb3\" \"C4\"  >    [1789] \"A3\"  \"Bb3\" \"Bb3\" \"Bb3\" \"Eb4\" \"Eb4\" \"Eb4\" \"Db4\" \"Db4\" \"F4\"  \"F4\"  \"Gb4\" >    [1801] \"F4\"  \"Eb4\" \"Db4\" \"C4\"  \"C4\"  \"Bb3\" \"C4\"  \"Db4\" \"C4\"  \"Bb3\" \"Ab3\" \"C4\"  >    [1813] \"C4\"  \"C4\"  \"C4\"  \"C4\"  \"B3\"  \"C4\"  \"G3\"  \"A3\"  \"A3\"  \"Bb3\" \"Eb3\" \"Eb4\" >    [1825] \"Db4\" \"C4\"  \"C4\"  \"Db4\" \"Db4\" \"F4\"  \"F4\"  \"Eb4\" \"Eb4\" \"G4\"  \"G4\"  \"F4\"  >    [1837] \"F4\"  \"C4\"  \"F3\"  \"C4\"  \"C4\"  \"C4\"  \"C4\"  \"F4\"  \"F4\"  \"F4\"  \"E4\"  \"F4\"  >    [1849] \"F4\"  \"G4\"  \"E4\"  \"F4\"  \"C4\"  \"F4\"  \"G4\"  \"Ab4\" \"Ab4\" \"Ab4\" \"F4\"  \"G4\"  >    [1861] \"Eb4\" \"F4\"  \"G4\"  \"E4\"  \"F4\"  \"F4\"  \"E4\"  \"C4\"  \"F4\"  \"F4\"  \"F4\"  \"F4\"  >    [1873] \"G4\"  \"Ab4\" \"Bb4\" \"G4\"  \"Ab4\" \"Ab4\" \"F4\"  \"F4\"  \"Bb4\" \"Bb4\" \"Bb4\" \"A4\"  >    [1885] \"F4\"  \"E4\"  \"F4\"  \"F4\"  \"E4\"  \"F4\"  \"F4\"  \"E4\"  \"C4\"  \"Ab4\" \"Ab4\" \"G4\"  >    [1897] \"G4\"  \"G4\"  \"Ab4\" \"G4\"  \"F4\"  \"E4\"  \"E4\"  \"F4\"  \"F4\"  \"F4\"  \"G4\"  \"Ab4\" >    [1909] \"Ab4\" \"F4\"  \"G4\"  \"Eb4\" \"Eb4\" \"F4\"  \"F4\"  \"Bb4\" \"Bb4\" \"G4\"  \"G4\"  \"C5\"  >    [1921] \"C5\"  \"Ab4\" \"G4\"  \"Ab4\" \"Bb4\" \"C5\"  \"Bb4\" \"Ab4\" \"G4\"  \"G4\"  \"A4\"  \"A4\"  >    [1933] \"C5\"  \"C5\"  \"Bb4\" \"Ab4\" \"G4\"  \"F4\"  \"F4\"  \"F4\"  \"Ab4\" \"Bb4\" \"C5\"  \"C5\"  >    [1945] \"Bb4\" \"Ab4\" \"Ab4\" \"Ab4\" \"Bb4\" \"Bb4\" \"Ab4\" \"G4\"  \"F4\"  \"F4\"  \"C5\"  \"C5\"  >    [1957] \"Db5\" \"Db5\" \"Bb4\" \"Bb4\" \"C5\"  \"C5\"  \"Ab4\" \"Ab4\" \"Db5\" \"Db5\" \"C5\"  \"C5\"  >    [1969] \"Bb4\" \"G4\"  \"Ab4\" \"Bb4\" \"Ab4\" \"G4\"  \"G4\"  \"F4\"  \"F5\"  \"F5\"  \"Eb5\" \"Eb5\" >    [1981] \"D5\"  \"D5\"  \"C5\"  \"C5\"  \"C5\"  \"C5\"  \"Db5\" \"C5\"  \"Bb4\" \"Ab4\" \"Ab4\" \"Ab4\" >    [1993] \"Ab4\" \"Ab4\" \"Db5\" \"Db5\" \"Bb4\" \"Bb4\" \"Eb5\" \"Eb5\" \"C5\"  \"C5\"  \"F5\"  \"F5\"  >    [2005] \"E5\"  \"E5\"  \"F5\"  \"F5\"  \"G3\"  \"F#3\" \"E3\"  \"D3\"  \"G3\"  \"F#3\" \"G3\"  \"A3\"  >    [2017] \"A2\"  \"D3\"  \"D#3\" \"E3\"  \"F#3\" \"G3\"  \"C3\"  \"C3\"  \"B2\"  \"A2\"  \"G2\"  \"D3\"  >    [2029] \"D2\"  \"G2\"  \"D3\"  \"D4\"  \"C4\"  \"B3\"  \"A3\"  \"D#3\" \"E3\"  \"E2\"  \"A2\"  \"E3\"  >    [2041] \"F#3\" \"G3\"  \"G#3\" \"A3\"  \"A#3\" \"B3\"  \"B2\"  \"E3\"  \"D3\"  \"C3\"  \"B2\"  \"A2\"  >    [2053] \"G2\"  \"F#2\" \"E2\"  \"F#2\" \"G2\"  \"E2\"  \"C#3\" \"B2\"  \"C#3\" \"A2\"  \"D3\"  \"B2\"  >    [2065] \"C3\"  \"D3\"  \"E3\"  \"F#3\" \"G3\"  \"C3\"  \"D3\"  \"G2\"  \"B3\"  \"B3\"  \"C4\"  \"C4\"  >    [2077] \"D4\"  \"B3\"  \"A3\"  \"A3\"  \"A3\"  \"A3\"  \"A3\"  \"B3\"  \"A3\"  \"G3\"  \"A3\"  \"B3\"  >    [2089] \"C4\"  \"D4\"  \"D4\"  \"D4\"  \"C4\"  \"B3\"  \"D4\"  \"E4\"  \"F#4\" \"E4\"  \"D4\"  \"E4\"  >    [2101] \"F#4\" \"B3\"  \"E4\"  \"D4\"  \"C4\"  \"G3\"  \"A3\"  \"B3\"  \"C4\"  \"D4\"  \"E4\"  \"C4\"  >    [2113] \"C#4\" \"B3\"  \"B3\"  \"B3\"  \"D4\"  \"D4\"  \"G4\"  \"G3\"  \"A3\"  \"B3\"  \"E4\"  \"D4\"  >    [2125] \"E4\"  \"C#4\" \"D4\"  \"D4\"  \"D4\"  \"C4\"  \"C4\"  \"B3\"  \"B3\"  \"A3\"  \"G3\"  \"G3\"  >    [2137] \"F#3\" \"E3\"  \"F#3\" \"C4\"  \"B3\"  \"D4\"  \"E4\"  \"F#4\" \"D4\"  \"E4\"  \"F#4\" \"E4\"  >    [2149] \"F#4\" \"G4\"  \"F#4\" \"F#4\" \"E4\"  \"D4\"  \"E4\"  \"F#4\" \"G4\"  \"G4\"  \"F#4\" \"D4\"  >    [2161] \"F#4\" \"G4\"  \"A4\"  \"G#4\" \"A4\"  \"G#4\" \"A4\"  \"A4\"  \"G#4\" \"E4\"  \"E4\"  \"D#4\" >    [2173] \"E4\"  \"E4\"  \"E4\"  \"F#4\" \"G4\"  \"F#4\" \"F#4\" \"G4\"  \"A4\"  \"G4\"  \"A4\"  \"G4\"  >    [2185] \"A4\"  \"B4\"  \"B4\"  \"A4\"  \"A4\"  \"G4\"  \"G4\"  \"F#4\" \"G4\"  \"F#4\" \"E4\"  \"F#4\" >    [2197] \"G4\"  \"A4\"  \"D4\"  \"E4\"  \"D4\"  \"D4\"  \"G4\"  \"G4\"  \"A4\"  \"B4\"  \"C#5\" \"D5\"  >    [2209] \"D5\"  \"C#5\" \"D5\"  \"B4\"  \"C5\"  \"B4\"  \"A4\"  \"B4\"  \"A4\"  \"G4\"  \"A4\"  \"A4\"  >    [2221] \"B4\"  \"C5\"  \"C5\"  \"B4\"  \"A4\"  \"B4\"  \"A4\"  \"B4\"  \"B4\"  \"B4\"  \"C5\"  \"D5\"  >    [2233] \"E5\"  \"E5\"  \"D#5\" \"E5\"  \"F#5\" \"G5\"  \"B4\"  \"C5\"  \"B4\"  \"A4\"  \"A4\"  \"D5\"  >    [2245] \"E5\"  \"D5\"  \"C5\"  \"B4\"  \"C5\"  \"A4\"  \"G4\"  \"D3\"  \"C3\"  \"B2\"  \"A2\"  \"B2\"  >    [2257] \"C3\"  \"B2\"  \"A2\"  \"E3\"  \"E3\"  \"A3\"  \"G3\"  \"F3\"  \"E3\"  \"F3\"  \"C3\"  \"D3\"  >    [2269] \"E3\"  \"C4\"  \"B3\"  \"A3\"  \"G3\"  \"F3\"  \"E3\"  \"D3\"  \"E3\"  \"A2\"  \"A3\"  \"E3\"  >    [2281] \"D3\"  \"C3\"  \"B2\"  \"C3\"  \"D3\"  \"D3\"  \"G2\"  \"C3\"  \"A2\"  \"E3\"  \"F3\"  \"C3\"  >    [2293] \"Bb2\" \"A2\"  \"G#2\" \"A2\"  \"E2\"  \"G#3\" \"A3\"  \"D4\"  \"E4\"  \"D4\"  \"E4\"  \"D4\"  >    [2305] \"C4\"  \"B3\"  \"E4\"  \"E4\"  \"F4\"  \"G4\"  \"C4\"  \"C4\"  \"B3\"  \"A3\"  \"G#3\" \"A3\"  >    [2317] \"B3\"  \"C4\"  \"D4\"  \"D4\"  \"E4\"  \"F4\"  \"B3\"  \"C4\"  \"E4\"  \"E4\"  \"E4\"  \"D4\"  >    [2329] \"C4\"  \"F#3\" \"G3\"  \"F#3\" \"G3\"  \"G3\"  \"A3\"  \"G#3\" \"A3\"  \"G3\"  \"G3\"  \"A3\"  >    [2341] \"B3\"  \"A3\"  \"G#3\" \"E4\"  \"E4\"  \"G#4\" \"A4\"  \"G4\"  \"F#4\" \"E4\"  \"F#4\" \"G#4\" >    [2353] \"G#4\" \"A4\"  \"B4\"  \"C5\"  \"F4\"  \"E4\"  \"D4\"  \"C4\"  \"B3\"  \"E4\"  \"D4\"  \"E4\"  >    [2365] \"F#4\" \"G4\"  \"A4\"  \"B4\"  \"A4\"  \"G#4\" \"E4\"  \"A4\"  \"G4\"  \"G4\"  \"G4\"  \"F4\"  >    [2377] \"E4\"  \"D4\"  \"C4\"  \"B3\"  \"E4\"  \"E4\"  \"E4\"  \"D4\"  \"C4\"  \"C4\"  \"D4\"  \"D4\"  >    [2389] \"C4\"  \"B3\"  \"B4\"  \"E4\"  \"B4\"  \"C5\"  \"B4\"  \"A4\"  \"G4\"  \"A4\"  \"B4\"  \"B4\"  >    [2401] \"C5\"  \"D5\"  \"C5\"  \"B4\"  \"A4\"  \"G4\"  \"F4\"  \"E4\"  \"A4\"  \"G4\"  \"C5\"  \"B4\"  >    [2413] \"A4\"  \"D5\"  \"C5\"  \"B4\"  \"A4\"  \"C5\"  \"B4\"  \"C5\"  \"D5\"  \"G4\"  \"B4\"  \"A4\"  >    [2425] \"G4\"  \"G4\"  \"C5\"  \"B4\"  \"A4\"  \"E4\"  \"G4\"  \"F4\"  \"E4\"  >    attr(,\"Exclusive\") >    **pitch within(chorales, pitch(Token)) >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:         **pitch       **pitch       **pitch       **pitch >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:              G2            B3            D4            G4 >        13:              =1            =1            =1            =1 >        14:              G3            B3            D4            G4 >        15:              E3            C4            E4             . >        16:               .            B3             .             . >        17:             F#3            A3            D4            D5 >        18:              =2            =2            =2            =2 >        19:              G3            G3            D4            B4 >        20:              D3           F#3             .             . >        21:               .             .             .            A4 >        22:              E3            G3            B3            G4 >        23:              =3            =3            =3            =3 >        24:              C3            C4            E4            G4 >        25:               .            B3            D4             . >        26:              B2            C4            E4             . >        27:              A2             .           F#4            A4 >        28:              G2            D4            G4            B4 >        29:              =4            =4            =4            =4 >        30:              D3            D4           F#4            A4 >        31:              G2            D4            G4            B4 >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:              A2            C4            E4            A4 >        53:              A3            E4            A4            C5 >        54:              =9            =9            =9            =9 >        55:              E3            E4            G4            B4 >        56:              D3            E4            G4            C5 >        57:              C3             .             .             . >        58:              B2            D4            G4            D5 >        59:               .             .            F4             . >        60:              C3            C4            E4            G4 >        61:             =10           =10           =10           =10 >        62:              D3           F#3            D4            B4 >        63:               .            G3             .             . >        64:              D3             .            C4            A4 >        65:               .           F#3             .             . >        66:              G2            G3            B3            G4 >        67:             =11           =11           =11           =11 >        68:              C3            G3            E4            G4 >        69:              A2            A3            E4            C5 >        70:              E3           G#3            E4            B4 >        71:               .             .            D4             . >        72:             =12           =12           =12           =12 >        73:              F3            A3            C4            A4 >        74:              C3            G3            C4            E4 >        75:             Bb2            G3            D4            G4 >        76:              A2            A3             .            F4 >        77:             =13           =13           =13           =13 >        78:             G#2            B3            D4            E4 >        79:              A2            A3            C4             . >        80:              E2           G#3            B3             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >                Token   :: character >               *Result1 :: character within(chorales, Pitch <- pitch(Token)) -> chorales  chorales >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:         **pitch       **pitch       **pitch       **pitch >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:              G2            B3            D4            G4 >        13:              =1            =1            =1            =1 >        14:              G3            B3            D4            G4 >        15:              E3            C4            E4             . >        16:               .            B3             .             . >        17:             F#3            A3            D4            D5 >        18:              =2            =2            =2            =2 >        19:              G3            G3            D4            B4 >        20:              D3           F#3             .             . >        21:               .             .             .            A4 >        22:              E3            G3            B3            G4 >        23:              =3            =3            =3            =3 >        24:              C3            C4            E4            G4 >        25:               .            B3            D4             . >        26:              B2            C4            E4             . >        27:              A2             .           F#4            A4 >        28:              G2            D4            G4            B4 >        29:              =4            =4            =4            =4 >        30:              D3            D4           F#4            A4 >        31:              G2            D4            G4            B4 >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:              A2            C4            E4            A4 >        53:              A3            E4            A4            C5 >        54:              =9            =9            =9            =9 >        55:              E3            E4            G4            B4 >        56:              D3            E4            G4            C5 >        57:              C3             .             .             . >        58:              B2            D4            G4            D5 >        59:               .             .            F4             . >        60:              C3            C4            E4            G4 >        61:             =10           =10           =10           =10 >        62:              D3           F#3            D4            B4 >        63:               .            G3             .             . >        64:              D3             .            C4            A4 >        65:               .           F#3             .             . >        66:              G2            G3            B3            G4 >        67:             =11           =11           =11           =11 >        68:              C3            G3            E4            G4 >        69:              A2            A3            E4            C5 >        70:              E3           G#3            E4            B4 >        71:               .             .            D4             . >        72:             =12           =12           =12           =12 >        73:              F3            A3            C4            A4 >        74:              C3            G3            C4            E4 >        75:             Bb2            G3            D4            G4 >        76:              A2            A3             .            F4 >        77:             =13           =13           =13           =13 >        78:             G#2            B3            D4            E4 >        79:              A2            A3            C4             . >        80:              E2           G#3            B3             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >                Token :: character >               *Pitch :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/WorkingWithData.html","id":"withwithin-subsets","dir":"Articles","previous_headings":"","what":"With/Within Subsets","title":"Working with Humdrum Data","text":"real power within functions, comes additional “control” arguments can pass. Two prominent examples allow automatically work subsets data: arguments. can indicate subset, multiple subsets, expressions evaluated separately within subset.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/WorkingWithData.html","id":"with-subset","dir":"Articles","previous_headings":"With/Within Subsets","what":"With Subset","title":"Working with Humdrum Data","text":"argument indicates subset data evaluate “within.” argument must expression evaluates logical vector (TRUE FALSE). main command evaluated wherever expression evaluates TRUE. Let’s try tabling example. Maybe want table tokens first spine: see low notes, ’d expect bass voice. , let’s tabulate even-numbered bars: datasets measures indicated (= tokens), Bar field integers counting bars within piece. want even numbers, can ask Bar modulu 2 zero?: Bar %% 2 == 0. use argument within, parts data don’t match within expression returned null: Notice, new Pitch field NULL spine except spine 1.","code":"with(chorales,       kern(Token) |> table() |> sort() |> tail(n = 10),      where = Spine == 1) >     >    GG C#  A  G AA F# BB  C  D  E  >    29 30 36 36 44 44 48 57 70 85 with(chorales,       kern(Token) |> table() |> sort() |> tail(n = 10),      where = Bar %% 2 == 0) >     >      G   c  f#   A   B   b   d   g   a   e  >     41  53  57  59  62  63  63  72  82 111 within(chorales,        Pitch <- pitch(Token, simple = TRUE),        where = Spine == 1) >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:         **pitch       **pitch       **pitch       **pitch >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:               G             .             .             . >        13:              =1            =1            =1            =1 >        14:               G             .             .             . >        15:               E             .             .             . >        16:               .             .             .             . >        17:              F#             .             .             . >        18:              =2            =2            =2            =2 >        19:               G             .             .             . >        20:               D             .             .             . >        21:               .             .             .             . >        22:               E             .             .             . >        23:              =3            =3            =3            =3 >        24:               C             .             .             . >        25:               .             .             .             . >        26:               B             .             .             . >        27:               A             .             .             . >        28:               G             .             .             . >        29:              =4            =4            =4            =4 >        30:               D             .             .             . >        31:               G             .             .             . >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:               A             .             .             . >        53:               A             .             .             . >        54:              =9            =9            =9            =9 >        55:               E             .             .             . >        56:               D             .             .             . >        57:               C             .             .             . >        58:               B             .             .             . >        59:               .             .             .             . >        60:               C             .             .             . >        61:             =10           =10           =10           =10 >        62:               D             .             .             . >        63:               .             .             .             . >        64:               D             .             .             . >        65:               .             .             .             . >        66:               G             .             .             . >        67:             =11           =11           =11           =11 >        68:               C             .             .             . >        69:               A             .             .             . >        70:               E             .             .             . >        71:               .             .             .             . >        72:             =12           =12           =12           =12 >        73:               F             .             .             . >        74:               C             .             .             . >        75:              Bb             .             .             . >        76:               A             .             .             . >        77:             =13           =13           =13           =13 >        78:              G#             .             .             . >        79:               A             .             .             . >        80:               E             .             .             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >                Token :: character >               *Pitch :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/WorkingWithData.html","id":"or-else","dir":"Articles","previous_headings":"With/Within Subsets > With Subset","what":"Or else…","title":"Working with Humdrum Data","text":"many cases using ’d like something , least keep, “” part data. can expressing “else” expression. idea say “evaluate X Y true, otherwise evaluate instead.” easiest understand use wihtin example . Maybe want calculate simple pitch first spine, leave spines unchanged: pattern, orelse = Token quite common.","code":"within(chorales,        Pitch <- pitch(Token, simple = TRUE),        where = Spine == 1,        orelse = Token) >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:         **pitch       **pitch       **pitch       **pitch >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:               G            4B            4d            4g >        13:              =1            =1            =1            =1 >        14:               G            4B            4d            2g >        15:               E           8cL            4e             . >        16:               .           8BJ             .             . >        17:              F#            4A            4d           4dd >        18:              =2            =2            =2            =2 >        19:               G            4G            2d           4.b >        20:               D           4F#             .             . >        21:               .             .             .            8a >        22:               E            4G            4B            4g >        23:              =3            =3            =3            =3 >        24:               C           8cL           8eL           4.g >        25:               .           8BJ            8d             . >        26:               B            4c            8e             . >        27:               A             .          8f#J            8a >        28:               G            4d            4g            4b >        29:              =4            =4            =4            =4 >        30:               D           2d;          2f#;           2a; >        31:               G            4d            4g            4b >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:               A           2c;           2e;           2a; >        53:               A            2e            2a           2cc >        54:              =9            =9            =9            =9 >        55:               E            4e            4g            4b >        56:               D            4e            4g           4cc >        57:               C             .             .             . >        58:               B            4d           8gL           4dd >        59:               .             .           8fJ             . >        60:               C            4c            4e            4g >        61:             =10           =10           =10           =10 >        62:               D           8F#            4d            4b >        63:               .            4G             .             . >        64:               D             .            4c            4a >        65:               .           8F#             .             . >        66:               G           2G;           2B;           2g; >        67:             =11           =11           =11           =11 >        68:               C            2G            2e            2g >        69:               A            4A            4e           4cc >        70:               E           4G#           8eL            4b >        71:               .             .           8dJ             . >        72:             =12           =12           =12           =12 >        73:               F            4A            4c            4a >        74:               C            4G            4c            4e >        75:              Bb            4G           [2d            4g >        76:               A            4A             .            4f >        77:             =13           =13           =13           =13 >        78:              G#            4B           4d]           1e; >        79:               A            4A            4c             . >        80:               E         2G#X;           2B;             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >                Token :: character >               *Pitch :: character"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/WorkingWithData.html","id":"with-subgroups","dir":"Articles","previous_headings":"With/Within Subsets","what":"With Subgroups","title":"Working with Humdrum Data","text":"keyword arguments short “group .” can indicate field data group data —main call applied separately group, groups returned. Let’s try tabling example. Let’s group data spine, tabulate spine data (voice) separately! get four different tables, one spine. want make multiple plots, can just add barplot like .  Let’s try something slightly different: Since four spines represent bass, tenor, alto, soprano voices (order) ’d expect average pitch spine significantly different. Let’s convert pitch data semitones (using semits) add call base-R function mean: Watch Oops, didn’t work! ’s Token data rests, like 4r. semits function doesn’t know read 4r returns NA value. Don’t worry, easy fix, good lesson data analysis general R particular. always need keep mind data “missing” Applicable (NA). R math functions option ignore missing data setting na.rm = TRUE (NA remove): ’s expected! course, might prefer plot.  Notice something differently ! don’t want make separate plot group-calculation—just single number spine. want make plot four numbers, put barplot call (outside) call. Notice can also control labels barplot using names.arg argument. Maybe want inspect whole histogram pitches voice. can use base-R hist function; Since want histogram spine, want put hist “inside” call :  Pro tips: setting xlim (x-limit) argument, make sure four barplots cover ranges pitches, comparable. also set main argument (figure title) using Instrument field, gives us names instrument. ’s right, can refer /fields humdrum data! (datasets tandem interpretation, wouldn’t always work.)","code":"with(chorales,       kern(Token) |> table() |> sort() |> tail(n = 10),      by = Spine) >    $`1` >     >    GG C#  A  G AA F# BB  C  D  E  >    29 30 36 36 44 44 48 57 70 85  >     >    $`2` >     >    B- F# G# c#  G  e  A  c  B  d  >    17 20 29 34 35 75 76 83 85 88  >     >    $`3` >     >      B  d#   b   d  g#   f   a  f#   g   e  >     16  16  19  43  44  50  67  83  88 121  >     >    $`4` >     >     b-  g#   e  ee cc#   g  dd  cc   a   b  >     15  15  17  25  36  42  48  68  93 115 with(chorales,       kern(Token) |> table() |> sort() |> tail(n = 10) |> barplot(),      by = Spine) with(chorales,       semits(Token) |> mean(),      by = Spine) >             1          2          3          4  >    -9.6692308 -0.1143317  5.6065041 10.5672192 with(chorales,       semits(Token) |> mean(na.rm = TRUE),      by = Spine) >             1          2          3          4  >    -9.6692308 -0.1143317  5.6065041 10.5672192 with(chorales,       semits(Token) |> mean(na.rm = TRUE),      by = Spine) |> barplot(names.arg = c('Bass', 'Tenor', 'Alto', 'Soprano'),                              main = 'Mean Pitch by Voice',                             ylab = 'Semitones') with(chorales,       semits(Token) |> hist(xlim = c(-24, 24), main = Instrument[1]),      by = Spine)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/WorkingWithData.html","id":"advanced-grouping","dir":"Articles","previous_headings":"With/Within Subsets > With Subgroups","what":"Advanced Grouping","title":"Working with Humdrum Data","text":"can group data arbitrary grouping data. fact keyword argument can complex expression, long output length input. example, maybe ’d like reproduce histograms, lumping male (bass/tenor) female (alto/soprano) voices together.  expression Spine < 3 returns FALSE spines 1 2 (bass tenor) TRUE spines 3 4. two categories (FALSE TRUE) used group data.","code":"with(chorales,       semits(Token) |> hist(xlim = c(-24, 24), main = paste(unique(Instrument), sep = ' and ')),      by = Spine < 3)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/articles/WorkingWithData.html","id":"recycling-results","dir":"Articles","previous_headings":"With/Within Subsets","what":"Recycling results","title":"Working with Humdrum Data","text":"cases, ’d like perform command within data might output smaller vector input, including single value, still want reconstruct data fully. R, usually called “recycling”—.e., repeating value matches certain length. using within, can cause results recycled full field length using fill argument expression. useful want group something, fill group value: command ? looks every bar file finds lowest note, “fills” notes bar , single, note. calculate harmonic interval bar’s bass note:","code":"within(chorales,        Semits <- semits(Token)) -> chorales  within(chorales,         fill = BarBassNote <- min(Semits),        by = list(File, Bar)) -> chorales  chorales >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:        **semits      **semits      **semits      **semits >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:             -17           -17           -17           -17 >        13:              =1            =1            =1            =1 >        14:              -8            -8            -8            -8 >        15:              -8            -8            -8             . >        16:               .            -8             .             . >        17:              -8            -8            -8            -8 >        18:              =2            =2            =2            =2 >        19:             -10           -10           -10           -10 >        20:             -10           -10             .             . >        21:               .             .             .           -10 >        22:             -10           -10           -10           -10 >        23:              =3            =3            =3            =3 >        24:             -17           -17           -17           -17 >        25:               .           -17           -17             . >        26:             -17           -17           -17             . >        27:             -17             .           -17           -17 >        28:             -17           -17           -17           -17 >        29:              =4            =4            =4            =4 >        30:             -17           -17           -17           -17 >        31:             -17           -17           -17           -17 >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:             -15           -15           -15           -15 >        53:             -15           -15           -15           -15 >        54:              =9            =9            =9            =9 >        55:             -13           -13           -13           -13 >        56:             -13           -13           -13           -13 >        57:             -13             .             .             . >        58:             -13           -13           -13           -13 >        59:               .             .           -13             . >        60:             -13           -13           -13           -13 >        61:             =10           =10           =10           =10 >        62:             -17           -17           -17           -17 >        63:               .           -17             .             . >        64:             -17             .           -17           -17 >        65:               .           -17             .             . >        66:             -17           -17           -17           -17 >        67:             =11           =11           =11           =11 >        68:             -15           -15           -15           -15 >        69:             -15           -15           -15           -15 >        70:             -15           -15           -15           -15 >        71:               .             .           -15             . >        72:             =12           =12           =12           =12 >        73:             -15           -15           -15           -15 >        74:             -15           -15           -15           -15 >        75:             -15           -15           -15           -15 >        76:             -15           -15             .           -15 >        77:             =13           =13           =13           =13 >        78:             -20           -20           -20           -20 >        79:             -20           -20           -20             . >        80:             -20           -20           -20             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >                Token       :: character >                Pitch       :: character >                Semits      :: integer >               *BarBassNote :: integer within(chorales,        Semits - BarBassNote) >    ############################ vvv chor001.krn vvv ############################# >         1:  !!!COM: Bach, Johann Sebastian >         2:  !!!CDT: 1685/02/21/-1750/07/28/ >         3:  !!!OTL@@DE: Aus meines Herzens Grunde >         4:  !!!OTL@EN:      From the Depths of My Heart >         5:  !!!SCT: BWV 269 >         6:  !!!PC#: 1 >         7:  !!!AGN: chorale >       126:        **semits      **semits      **semits      **semits >       127:          *ICvox        *ICvox        *ICvox        *ICvox >       128:          *Ibass       *Itenor        *Ialto       *Isoprn >       129:         *I\"Bass      *I\"Tenor       *I\"Alto    *I\"Soprano >       130:       *>[A,A,B]     *>[A,A,B]     *>[A,A,B]     *>[A,A,B] >       131:    *>norep[A,B]  *>norep[A,B]  *>norep[A,B]  *>norep[A,B] >       132:             *>A           *>A           *>A           *>A >       133:         *clefF4      *clefGv2       *clefG2       *clefG2 >       134:          *k[f#]        *k[f#]        *k[f#]        *k[f#] >         8:             *G:           *G:           *G:           *G: >         9:             *F:             *             *             * >        10:           *M3/4         *M3/4         *M3/4         *M3/4 >        11:          *MM100        *MM100        *MM100        *MM100 >        12:               0            16            19            24 >        13:              =1            =1            =1            =1 >        14:               3             7            10            15 >        15:               0             8            12             . >        16:               .             7             .             . >        17:               2             5            10            22 >        18:              =2            =2            =2            =2 >        19:               5             5            12            21 >        20:               0             4             .             . >        21:               .             .             .            19 >        22:               2             5             9            17 >        23:              =3            =3            =3            =3 >        24:               5            17            21            24 >        25:               .            16            19             . >        26:               4            17            21             . >        27:               2             .            23            26 >        28:               0            19            24            28 >        29:              =4            =4            =4            =4 >        30:               7            19            23            26 >        31:               0            19            24            28 >    32-125:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >    ############################ ^^^ chor001.krn ^^^ ############################# >     >           (8 more files...) >     >    ############################ vvv chor010.krn vvv ############################# >      1-51:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: >        52:               0            15            19            24 >        53:              12            19            24            27 >        54:              =9            =9            =9            =9 >        55:               5            17            20            24 >        56:               3            17            20            25 >        57:               1             .             .             . >        58:               0            15            20            27 >        59:               .             .            18             . >        60:               1            13            17            20 >        61:             =10           =10           =10           =10 >        62:               7            11            19            28 >        63:               .            12             .             . >        64:               7             .            17            26 >        65:               .            11             .             . >        66:               0            12            16            24 >        67:             =11           =11           =11           =11 >        68:               3            10            19            22 >        69:               0            12            19            27 >        70:               7            11            19            26 >        71:               .             .            17             . >        72:             =12           =12           =12           =12 >        73:               8            12            15            24 >        74:               3            10            15            19 >        75:               1            10            17            22 >        76:               0            12             .            20 >        77:             =13           =13           =13           =13 >        78:               4            19            22            24 >        79:               5            17            20             . >        80:               0            16            19             . >        81:              ==            ==            ==            == >        82:              *-            *-            *-            *- >        83:  !!!hum2abc: -Q '' >        84:  !!!title: @{PC#}. @{OTL@@DE} >        85:  !!!YOR1: 371 vierstimmige Choralges&auml;nge von Johann Sebastian *** >        86:  !!!YOR2: 4th ed. by Alfred D&ouml;rffel (Leipzig: Breitkopf und H&*** >        87:  !!!YOR2: c.1875). 178 pp. Plate \"V.A.10\".  reprint: J.S. Bach, 371*** >        88:  !!!YOR4: Chorales (New York: Associated Music Publishers, Inc., c.*** >        89:  !!!SMS: B&H, 4th ed, Alfred D&ouml;rffel, c.1875, plate V.A.10 >        90:  !!!EED:  Craig Stuart Sapp >        91:  !!!EEV:  2009/05/22 >    ############################ ^^^ chor010.krn ^^^ ############################# >                          (***four global comments truncated due to screen size***) >     >       humdrumR corpus of ten files. >        Data fields:  >                Token       :: character >                Pitch       :: character >                Semits      :: integer >                BarBassNote :: integer >               *Result1     :: integer  with(chorales, hist(Semits - BarBassNote))"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nathaniel Condit-Schultz. Author, maintainer.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Condit-Schultz N (2022). humdrumR: humdrumR. R package version 0.3.0.9000, https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR.","code":"@Manual{,   title = {humdrumR: humdrumR},   author = {Nathaniel Condit-Schultz},   year = {2022},   note = {R package version 0.3.0.9000},   url = {https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR}, }"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/index.html","id":"humdrumr","dir":"","previous_headings":"","what":"humdrumR","title":"humdrumR","text":"humdrumR R library analyzing musicological data encoded humdrum data format.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/index.html","id":"installing-r","dir":"","previous_headings":"Installation","what":"Installing R","title":"humdrumR","text":"use humdrumR, ’ll first need install R, version 4.1 later. highly recommend install Integrated Development Environment Rstudio well! link—Installing R RStudio—good starting place.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/index.html","id":"installing-humdrumr","dir":"","previous_headings":"Installation","what":"Installing humdrumR","title":"humdrumR","text":"humdrumR yet available standard R package repository, CRAN, (now) can installed github repository. install latest version (master branch) humdrumR, ’ll first need install R package devtools—devtools used creating maintaining R packages. Luckily, devtools CRAN, open R session machine type: successfuly installed devtools, now ready use install humdrumR straight github. R session, type:","code":"install.packages('devtools') devtools::install_github(\"Computational-Cognitive-Musicology-Lab/humdrumR\", build_vignettes = TRUE)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/index.html","id":"humdrumr-source","dir":"","previous_headings":"Installation","what":"humdrumR source","title":"humdrumR","text":"Another option—useful, want inspect, contribute , humdrumR source code—actually download humdrumR package source github install directly. ’ll first need install git. git installed computer, can download humdrumR repository clicking “Clone download” github page. Alternatively, can use git directly: navigate directory machine ’d like save package source type: ’ve done , can install source computer using devtools: Open R session use setwd move working directory inside repository just downloaded (.e., cloned). , type downloaded Rstudio, can use “Open Project” option select file humdrumR.Rproj repository. ’ve done can just click “Install Restart” “Build” pane. ’ve completed installtion humdrumR can used simply calling:","code":"git clone https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR devtools::install() library(humdrumR)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"humdrumR","text":"stage, humdrumR functions least partially documented, can easily read using ? operator name function. good place start : also check “vignettes” humdrumR, offer easier introduction package. installed github using build_vignettes = TRUE option, able simply call:","code":"library(humdrumR)  ?humdrumR browseVignettes(\"humdrumR\")"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/LO5th.html","id":null,"dir":"Reference","previous_headings":"","what":"Line of Fifths — LO5th","title":"Line of Fifths — LO5th","text":"function LO5th S3-generic function methods extract \"line--fifths\" value various pitch objects representations.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/LO5th.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Line of Fifths — LO5th","text":"","code":"LO5th(x, generic = FALSE, ...)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/LO5th.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Line of Fifths — LO5th","text":"Returns integer vector array, matching input.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/LO5th.html","id":"the-line-of-fifths","dir":"Reference","previous_headings":"","what":"The Line of Fifths","title":"Line of Fifths — LO5th","text":"Every interval Western music associated integer line fifths: Bb = m7 = -2 F =  P4  = -1 C =  P1 = 0 G =  P5 = 1 D =  M2 = 2 =  M6 = 3 E =  M3 = 4 B =  M7 = 5 F# = A4 = 6 etc. natural notes (C) major scale---also call generic intervals---fall range -1:5. fact, diatonic key block seven consecutive numbers line--fifths: example, Eb major -4:2. \"Sharps\" \"flats\" represent +7 -7 line--fifths respectively.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/REparser.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse String Using Regular expressions — REparser","title":"Parse String Using Regular expressions — REparser","text":"Takes input string parses sequence regular expressions.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/REparser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse String Using Regular expressions — REparser","text":"","code":"REparser(   res,   parse.strict = TRUE,   parse.exhaust = TRUE,   parse.lead = FALSE,   parse.rest = FALSE,   toEnv = FALSE )  REparse(   str,   res,   parse.strict = TRUE,   parse.exhaust = TRUE,   parse.lead = FALSE,   parse.rest = FALSE,   reverse = FALSE,   sep = NULL,   toEnv = FALSE )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/REparser.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse String Using Regular expressions — REparser","text":"exhaustive TRUE, string must exhaustively broken matching regular expressions. Superfluous (non-match) characters begginning, end, bettween matches, result NA returned. ------------------------------------------->             NEEDS DOCUMENTATION             <-------------------------------------------","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/RegexFind.html","id":null,"dir":"Reference","previous_headings":"","what":"Match strings against regular expression — RegexFind","title":"Match strings against regular expression — RegexFind","text":"functions give concise way search regular expressions character vectors. \"infix\" functions, meaning write function two arguments: myvector %~% regex.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/RegexFind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match strings against regular expression — RegexFind","text":"","code":"x %~l% regex  x %~i% regex  x %~n% regex  x %~m% regex  x %~% regex  ... %!~% NA  ... %!~l% NA  x %!~i% pattern"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/RegexFind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match strings against regular expression — RegexFind","text":"x character vector search . regex One regular expressions. one regex supplied, matches regexes returned. (See \"Multiple regexes\" section.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/RegexFind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match strings against regular expression — RegexFind","text":"version function returns different type information regex matches () input vector: %~l%: returns logical (TRUE/FALSE) indicating x matches. %~%: returns integer indicating indices matches x. %~n%: returns integer indicating number (count) matches string. %~m%: returns character string matched string . Returns NA match. basic function (%~%) %~l%. also negative versions l functions: giving strings match given regular expression. %!~%, %!~l%, %!~%. functions simply syntactic sugar existing R regular expression matching functions: %~l%: base::grepl() %~%: base::grep() %~n%: stringi::stri_count_regex() %~m%: stringi::stri_extract_first_regex()","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/RegexFind.html","id":"multiple-regexes","dir":"Reference","previous_headings":"","what":"Multiple regexes","title":"Match strings against regular expression — RegexFind","text":"one regex supplied, %~l% %~% return indices regexes match. case %~n%, matching regex counted separately, summed. case %~m%, matches () pasted together, including multiple matches string.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/SOI.html","id":null,"dir":"Reference","previous_headings":"","what":"Onset/Offset interval since beginning. — SOI","title":"Onset/Offset interval since beginning. — SOI","text":"Refers duration rhythmic time elapsed since starting point (usually, beginning piece). music21 described \"offsets\"---however, prefer reserve words \"onset\" \"offset\" refer beginning (attacK) end (release) rhythmic events. STO takes vector numbers representing durations (numeric values) cummulatively sums starting value. Unlike sigma(), SOI returns timestamp onset rhythmic duration offset. SOI interprets first duration starting zero---different value specified start argument.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/SOI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Onset/Offset interval since beginning. — SOI","text":"","code":"SOI(durations, start = 0L)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/SOI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Onset/Offset interval since beginning. — SOI","text":"durations vector numeric values representing durations. start duration value (coerced class durations), offset begins.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/SOI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Onset/Offset interval since beginning. — SOI","text":"S3 object class \"rhythmOffset\", essentially data.frame two columns---Onset Offset--- numeric values class input durations argument.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/accidental.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract accidental from pitch — accidental","title":"Extract accidental from pitch — accidental","text":"Extract accidental pitch","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/accidental.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract accidental from pitch — accidental","text":"","code":"accidental(x, ..., Key = NULL, parseArgs = list(), inPlace = FALSE)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/accidental.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract accidental from pitch — accidental","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ).","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/apply2Humdrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply functions to humdrum data\n\napply2Humdrum is just a wrapper for\n[humdrumR:with-in-Humdrum][with(in)Humdrum],\nincluded to parallel the R family of [base:lapply][_apply] functions.\napply2Humdrum uses non-standard evaluation\nto capture arguments fed to it without the user needing to make explicit\n[base:tilde][formula] using ~. This is only guaranteed to work\nin the [base:environment][global environment], so be careful. If you run into\nproblems, switch over to [humdrumR:with-in-Humdrum][with(in)Humdrum] and use\nexplicit [base:tilde][X~formulas]. — apply2Humdrum","title":"Apply functions to humdrum data\n\napply2Humdrum is just a wrapper for\n[humdrumR:with-in-Humdrum][with(in)Humdrum],\nincluded to parallel the R family of [base:lapply][_apply] functions.\napply2Humdrum uses non-standard evaluation\nto capture arguments fed to it without the user needing to make explicit\n[base:tilde][formula] using ~. This is only guaranteed to work\nin the [base:environment][global environment], so be careful. If you run into\nproblems, switch over to [humdrumR:with-in-Humdrum][with(in)Humdrum] and use\nexplicit [base:tilde][X~formulas]. — apply2Humdrum","text":"Apply functions humdrum data apply2Humdrum just wrapper [humdrumR:--Humdrum][()Humdrum], included parallel R family [base:lapply][_apply] functions. apply2Humdrum uses non-standard evaluation capture arguments fed without user needing make explicit [base:tilde][formula] using ~. guaranteed work [base:environment][global environment], careful. run problems, switch [humdrumR:--Humdrum][()Humdrum] use explicit [base:tilde][X~formulas].","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/apply2Humdrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply functions to humdrum data\n\napply2Humdrum is just a wrapper for\n[humdrumR:with-in-Humdrum][with(in)Humdrum],\nincluded to parallel the R family of [base:lapply][_apply] functions.\napply2Humdrum uses non-standard evaluation\nto capture arguments fed to it without the user needing to make explicit\n[base:tilde][formula] using ~. This is only guaranteed to work\nin the [base:environment][global environment], so be careful. If you run into\nproblems, switch over to [humdrumR:with-in-Humdrum][with(in)Humdrum] and use\nexplicit [base:tilde][X~formulas]. — apply2Humdrum","text":"","code":"apply2Humdrum(humdrumR, FUN, ..., within = TRUE, doplot = FALSE)  happly(humdrumR, FUN, ..., within = TRUE, doplot = FALSE)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/apply2Humdrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply functions to humdrum data\n\napply2Humdrum is just a wrapper for\n[humdrumR:with-in-Humdrum][with(in)Humdrum],\nincluded to parallel the R family of [base:lapply][_apply] functions.\napply2Humdrum uses non-standard evaluation\nto capture arguments fed to it without the user needing to make explicit\n[base:tilde][formula] using ~. This is only guaranteed to work\nin the [base:environment][global environment], so be careful. If you run into\nproblems, switch over to [humdrumR:with-in-Humdrum][with(in)Humdrum] and use\nexplicit [base:tilde][X~formulas]. — apply2Humdrum","text":"humdrumR humdrumRclass data object. FUN function apply humdrumR:humdrumRfield(s) thehumdrumR` object. ... arguments can fed [humdrumR:--Humdrum][()Humdrum] formulae (except expressions, replaced FUN argument!). However, rather writinging formula format Keyword ~ Expression, apply2Humdrum arguments written normal R arguments: Keyword = Expression. Unnamed arguments ignored. #' @param within logical. TRUE (default), [humdrumR:--Humdrum][withinHumdrum] used apply function---meaning output reconstituted new field humdrumR object. within == FALSE, [humdrumR:--Humdrum][withHumdrum] used instead, results function's output returned inprocessed. doplot Boolean. TRUE FUN argument treated doplot expression [humdrumR:--Humdrum][()Humdrum], result ignored (plotting side-effects purposes).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/bhatk.html","id":null,"dir":"Reference","previous_headings":"","what":"Swara representation — bhatk","title":"Swara representation — bhatk","text":"Swara syllabes used represent scale degrees hindustani music---like solfege.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/bhatk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swara representation — bhatk","text":"","code":"bhatk(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/bhatk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swara representation — bhatk","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). generic (logical, length == 1) generic = TRUE \"specific\" pitch information (accidentals qualites) discarded. simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. transposeArgs (list) transposeArgs can list arguments passed special call transpose. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/bhatk.html","id":"basic-pitch-arguments","dir":"Reference","previous_headings":"","what":"Basic pitch arguments","title":"Swara representation — bhatk","text":"pitch function standard arguments control details output. important generic simple arguments, allow control type pitch information returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/bhatk.html","id":"generic-vs-specific","dir":"Reference","previous_headings":"","what":"Generic vs Specific","title":"Swara representation — bhatk","text":"generic = TRUE, specific pitch information (accidentals qualities) omitted output. alternative way controlling functionality, can use specific argument, specific == !generic. case atonal functions, \"generic\" version pitch output: example, semits('c#', generic = TRUE) return 0, \"generic\" version C# C, corresponds 0. However, note generic version pitch follows key, semits('c#', generic = TRUE, Key = ':') return 1!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/bhatk.html","id":"simple-vs-compound","dir":"Reference","previous_headings":"","what":"Simple vs Compound","title":"Swara representation — bhatk","text":"simple = TRUE, compound pitch information (octave contour) omitted output. alternative way controlling functionality, can use compound argument ,compound == !simple. actually one way might want divide compound intervals simple octave parts. example, might like call output -M2 (descending major 2nd) +m7 (ascending minor 7th octave ). functionality can controlled octave.round argument: see pitch deparsing documentation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/bhatk.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"Swara representation — bhatk","text":"Key argument must diatonicSet, something can parsed one. Key argument passed parser, deparser, transpose---unless alternate Key passed transposeArgs parseArgs. Various deparsing options use Key argument; example, use implicitSpecies (see advanced parsing section) dependent Key. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function---means, cases, need explicitly anything Key argument! (want happen, need explicitly specify Key argument, Key = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/bhatk.html","id":"parse-arguments","dir":"Reference","previous_headings":"","what":"Parse arguments","title":"Swara representation — bhatk","text":"parseArgs argument must list() (named) arguments passed input parser. example, input representation uses \"X\" represent double sharps, specify kern('CX5', parseArgs = list(doublesharp = 'X')) get correct result (\"cc##\"). convenient shorthand, \"syntactic sugar,\" can specify parseArgs alternate way: Simply input parse(args...) unnamed argument pitch function. example, can get exact result typing kern('CX5', parse(doublesharp = 'X')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/bhatk.html","id":"transpose-arguments","dir":"Reference","previous_headings":"","what":"Transpose arguments","title":"Swara representation — bhatk","text":"transposeArgs argument must list() (named) arguments passed internal call transpose(), allowing us easily transpose pitch information. example, type kern(c('C', 'D', 'E'), transposeArgs = list(= 'M9')) can get output c('d', 'e', 'f#'). possible transpose args : (tonalInterval, length == 1 | length == (x)) (diatonicSet, length == 1 | length == (x))  (diatonicSet, length == 1 | length == (x)) real (logical, length == 1) transposition real tonal? relative (logical, length == 1) key-wise transposition based relative parallel keys? convenient shorthand, \"syntactic sugar,\" can specify transposeArgs alternate way: Simply input transpose(args...) unnamed argument pitch function. example, can get exact result typing kern(c('C', 'D', 'E'), transpose(= 'M9')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/bhatk.html","id":"transposing-by-interval","dir":"Reference","previous_headings":"","what":"Transposing by interval","title":"Swara representation — bhatk","text":"calling transpose() directly, argument can anything coercable tonalInterval, output transposed amount. real = FALSE, tonal transposition (within Key) performed. details transposition behavior, check transpose() docs.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/bhatk.html","id":"transposing-by-key","dir":"Reference","previous_headings":"","what":"Transposing by key","title":"Swara representation — bhatk","text":"Another way transposing specifying input (\"\") key output (\"\") key. default, Key argument passed transpose , nothing actually happens. Thus, specify either key key, transposition happen /key Key. course, specify transposition happen keys specify. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function. specify key, Key field passed transpose key, result, pitches input transposed whatever keys target () key! real relative arguments give special control key-wise transposition works, check transpose() docs details!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/bhatk.html","id":"in-place-parsing","dir":"Reference","previous_headings":"","what":"In-place parsing","title":"Swara representation — bhatk","text":"humdrum data, character strings often encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find using appropriate known regular expressions. example, pitch('4.ee-[') returns Eb5. However, pitch functions (like pitch() kern()) option keep \"extra\" information return result \"place\"---.e., embedded right found input string. controlled inPlace argument, FALSE default. , pitch('4.ee-[', inPlace = TRUE) return 4.Eb5[---keeping \"4.\" \"[\". (obviously works input string, numeric!) Note inPlace = TRUE force functions like semits, normally return numeric values, return character strings input character string.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/census.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate records and tokens in a humdrumR corpus — census","title":"Tabulate records and tokens in a humdrumR corpus — census","text":"census one humdrumR's summary functions, used tabulate raw size humdrumR corpus. census takes humdrumR object returns humCensus table.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate records and tokens in a humdrumR corpus — census","text":"","code":"census(humdrumR, dataTypes = \"GLIMDd\", by = \"Filename\", removeEmpty = FALSE)  census(humdata)[i]  # S3 method for humCensus print(censusTable, showEach = TRUE, screenWidth = options(\"width\")$width - 10L)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate records and tokens in a humdrumR corpus — census","text":"humdrumR humdrumR object dataTypes types humdrum records include. Legal values 'G', 'L', '', 'M', 'D', 'd' combination (e.g., \"LIM\"). (see humdrum table documentation Fields section explanation.). character string length 1. Must field humdrumR object. Rows humCensus object can selected single argument : e.g., censusTable[]. numeric, corresponding rows selected ordinally (File number). character string, string matched regular expression file names.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/census.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tabulate records and tokens in a humdrumR corpus — census","text":"humCensus table five columns information: Records total number records. Tokens total number tokens. (unique) number unique tokens Characters total numder characters. includes humdrum control characters like * !!. (per token) simply Characters / Tokens, indicating mean length token. humCensus table one row file corpus. Rows labeled file's corresponding number (humTable's File field) name (Filename field). addition, humCensus object printed, totals across files printed well---(unique) (per token) across files calculated across files well, summed.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/census.html","id":"indexing","dir":"Reference","previous_headings":"","what":"Indexing","title":"Tabulate records and tokens in a humdrumR corpus — census","text":"drop argument also available. TRUE, plain data.table::data.table() returned.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":null,"dir":"Reference","previous_headings":"","what":"12-tone equal-temperament cent representation — cents","title":"12-tone equal-temperament cent representation — cents","text":"default, output cents simply semits(x) * 100. However, tonalHarmonic value can modified cents produce cent-values alternate tunings. example, cents('g', tonalHarmonic = 3) returns 701.955000865387, \"pure\" third harmonic (3) 1.955 sharper equal-temperment. Thus, midi semits return integers, cents always returns real-number (double) values.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"12-tone equal-temperament cent representation — cents","text":"","code":"cents(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE,   tonalHarmonic = 2^(19/12) )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"12-tone equal-temperament cent representation — cents","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). generic (logical, length == 1) generic = TRUE \"specific\" pitch information (accidentals qualites) discarded. simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. transposeArgs (list) transposeArgs can list arguments passed special call transpose. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extral, non-pitch information strings \"beside\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ). tonalHarmonic (numeric, length == 1) frequency \"tonal harmonic\" (perfect 10th) tuned ? default, value 2^(19/12), 12-tone equal-temperament10th. Pythagorean tuning, set tonalHarmonic = 3.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"12-tone equal-temperament cent representation — cents","text":"TonalIntervals parsed frequency might also arbitrary cent deviations. example, cents(440 * 10/9, Exclusive = 'freq') returns 1082.404---correspond \"minor tone\" =440.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"basic-pitch-arguments","dir":"Reference","previous_headings":"","what":"Basic pitch arguments","title":"12-tone equal-temperament cent representation — cents","text":"pitch function standard arguments (details ), control details output. important generic simple arguments, allow control type pitch information returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"generic-vs-specific","dir":"Reference","previous_headings":"","what":"Generic vs Specific","title":"12-tone equal-temperament cent representation — cents","text":"generic = TRUE, specific pitch information (accidentals qualities) omitted output. alternative way controlling functionality, can use specific argument, specific == !generic. case atonal outputs, \"generic\" version pitch output: example, semits('c#', generic = TRUE) return 0, \"generic\" version C# C, corresponds 0. However, note generic version pitch follows key, semits('c#', generic = TRUE, Key = ':') return 1!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"simple-vs-compound","dir":"Reference","previous_headings":"","what":"Simple vs Compound","title":"12-tone equal-temperament cent representation — cents","text":"simple = TRUE, compound pitch information (octave contour) omitted output. alternative way controlling functionality, can use compound argument ,compound == !simple. actually one way might want divide compound intervals simple octave parts. example, might like call output -M2 (descending major 2nd) +m7 (ascending minor 7th octave ). functionality can controlled octave.round argument: see \"advanced deparsing\" section .","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"12-tone equal-temperament cent representation — cents","text":"Key argument must diatonicSet, something can parsed one. Key argument passed parser, deparser, transpose---unless alternate Key passed transposeArgs parseArgs. Various deparsing options use Key argument; example, use implicitSpecies (see advanced parsing section) dependent Key. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function---means, cases, need explicitly anything Key argument! (want happen, need explicitly specify Key argument, Key = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"parse-arguments","dir":"Reference","previous_headings":"","what":"Parse arguments","title":"12-tone equal-temperament cent representation — cents","text":"parseArgs argument must list() (named) arguments passed input parser. example, input representation uses \"X\" represent double sharps, specify kern('CX5', parseArgs = list(doublesharp = 'X')) get correct result (\"cc##\"). convenient shorthand, \"syntactic sugar,\" can specify parseArgs alternate way: Simply input parse(args...) unnamed argument pitch function. example, can get exact result typing kern('CX5', parse(doublesharp = 'X')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"transpose-arguments","dir":"Reference","previous_headings":"","what":"Transpose arguments","title":"12-tone equal-temperament cent representation — cents","text":"transposeArgs argument must list() (named) arguments passed internal call transpose(), allowing us easily transpose pitch information. example, type kern(c('C', 'D', 'E'), transposeArgs = list(= 'M9')) can get output c('d', 'e', 'f#'). possible transpose args : (tonalInterval, length == 1 | length == (x)) (diatonicSet, length == 1 | length == (x))  (diatonicSet, length == 1 | length == (x)) real (logical, length == 1) transposition real tonal? relative (logical, length == 1) key-wise transposition based relative parallel keys? convenient shorthand, \"syntactic sugar,\" can specify transposeArgs alternate way: Simply input transpose(args...) unnamed argument pitch function. example, can get exact result typing kern(c('C', 'D', 'E'), transpose(= 'M9')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"transposing-by-interval","dir":"Reference","previous_headings":"","what":"Transposing by interval","title":"12-tone equal-temperament cent representation — cents","text":"calling transpose() directly, argument can anything coercable tonalInterval, output transposed amount. real = FALSE, tonal transposition (within Key) performed. details transposition behavior, check transpose() docs.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"transposing-by-key","dir":"Reference","previous_headings":"","what":"Transposing by key","title":"12-tone equal-temperament cent representation — cents","text":"Another way transposing specifying input (\"\") key output (\"\") key. default, Key argument passed transpose , nothing actually happens. Thus, specify either key key, transposition happen /key Key. course, specify transposition happen keys specify. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function. specify key, Key field passed transpose key, result, pitches input transposed whatever keys target () key! real relative arguments give special control key-wise transposition works, check transpose() docs details!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"in-place-parsing","dir":"Reference","previous_headings":"","what":"In-place parsing","title":"12-tone equal-temperament cent representation — cents","text":"humdrum data, character strings often encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find using appropriate known regular expressions. example, pitch('4.ee-[') returns Eb5. However, pitch functions (like pitch() kern()) option keep \"extra\" information return result \"place\"---.e., embedded right found input string. controlled inPlace argument, FALSE default. , pitch('4.ee-[', inPlace = TRUE) return 4.Eb5[---keeping \"4.\" \"[\". (obviously works input string, numeric!) Note inPlace = TRUE force functions like semits, normally return numeric values, return character strings input character string.Advanced Deparsing Options Though pitch functions (listed top) outputs different pitch representation, share lot common \"deparsing\" functionality. basic arguments like generic simple work pitch function. using \"advanced\" deparsing arguments, can tweak deparsing done, generate even output representations! means controlling bin second step pipeline: Input representation |> Parsing |> Intermediate (tonalInterval) representation |> Transformation  |> Deparsing (DEPARSING ARGS GO ) |> Output representation Note arguments similar identical parallel parsing arguments. following \"advanced\" deparsing arguments available (read details ): Steps step.labels step.signed Species (accidentals qualities) qualities specifier.maximum Accidentals natural, flat, sharp, doubleflat, doublesharp Qualities perfect, major, minor, augment, diminish Implicit vs Explicit Species implicitSpecies absoluteSpecies explicitNaturals cautionary memory, memoryWindows Octave octave.integer , , octave.offset octave.round octave.relative, octave.absolute String parsing parts sep. \"advanced\" arguments can used directly pitch function: example, kern(x, qualities = TRUE). humdrumR pitch functions associated default deparsing arguments. example, use kern(), flat set (default) \"-\". However, wanted print **kern-like pitch data, except different flat symbol, like \"_\", modify deparser: kern('Eb5', flat = \"_\"). overrides default value **kern, output \"ee_\" instead \"ee-\".","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"steps","dir":"Reference","previous_headings":"","what":"Steps","title":"12-tone equal-temperament cent representation — cents","text":"representations \"tonal\" pitch information include representation diatonic steps. can control deparser writes diatonic steps using step.labels argument. step.labels argument must atomic vector unique values, length positive multiple seven. Examples step.labels arguments currently used humdrumR pitch functions include: step.labels = c('', 'B', 'C', 'D', 'E', 'F', 'G') step.labels = c('', 'II', 'III', 'IV', 'V', 'VI', 'VII') step.labels = c('d', 'r', 'm', 'f', 's', 'l', 't') step.labels NULL, steps assumed printed integers, including negative integers representing downward steps. also step.signed (logical, length == 1) argument: step.signed = TRUE, lowercase versions step.labels interpreted negative (downward) steps uppercase versions step.labels interpreted positive (upwards) steps. option used, example, default kern() helmholtz() parsers.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"species","dir":"Reference","previous_headings":"","what":"Species","title":"12-tone equal-temperament cent representation — cents","text":"tonal pitch representations, \"specific\" versions tonal pitches---tonal \"species\"---indicated \"specifiers\": either accidentals qualities. qualities (logical, length == 1) argument indicates whether accidentals used (qualities = FALSE) qualities (qualities = TRUE). specifiers can repeated number times, like \"triple sharps\" \"doubly augmented\"; specifier.maximum (integer, length == 1) argument sets maximum limit number specifiers write. example, force triple sharps (\"###\") double sharps (\"##\") deparse just \"#\", specifying specifier.maximum = 1L.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"accidentals","dir":"Reference","previous_headings":"","what":"Accidentals","title":"12-tone equal-temperament cent representation — cents","text":"qualities = FALSE deparser print accidentals three types: naturals, flats, sharps. natural, flat, /sharp (character, length == 1) arguments can used indicate accidentals printed output. example, set kern('Eb5', flat = 'flat') get output \"eeflat\". Examples accidental argument combinations currently used humdrumR pitch functions include: (flat = \"b\", sharp = \"#\") ->  pitch() (flat = \"-\", sharp = \"#\") ->  kern() (flat = \"es\", sharp = \"\") -> lilypond() (flat = \"-\", sharp = \"+\") -> degree() doubleflat, doublesharp (character, length == 1) arguments NULL default, can set special symbol wanted represent two sharps flats. example, modify pitch() use special double sharp symbol: pitch(\"f##\", doublesharp = \"x\") output \"Fx4\". printing naturals controlled natural argument. However, default, humdrumR deparsers printing naturals. can force naturals print setting explicitNaturals (logical, length == 1) argument TRUE. exact behavior explicitNaturals depends implicitSpecies, absoluteSpecies, Key argument (details ).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"qualities","dir":"Reference","previous_headings":"","what":"Qualities","title":"12-tone equal-temperament cent representation — cents","text":"qualities = TRUE deparser print qualities, five types: perfect, minor, major, augmented, diminished. perfect, major, minor, diminish, /augment (character, length == 1) arguments can used indicate qualities printed output. (Note: talking interval/degree qualities , chord qualities!) example, can write interval(c(\"g-\", \"f#\"), augment = 'aug', diminish = 'dim') output c(\"+dim5\", \"+aug4\"). Examples quality argument combinations currently used humdrumR pitch functions include: parse(major = \"M\", minor = \"m\", perfect = \"P\", diminish = \"d\", augment = \"\") parse(diminish = \"o\", augment = \"+\")","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"implicit-vs-explicit-species","dir":"Reference","previous_headings":"","what":"Implicit vs Explicit Species","title":"12-tone equal-temperament cent representation — cents","text":"musical data, specifiers (e.g., accidentals qualities) explicitly indicated; instead, must infer species pitch context---like key signature!.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"from-the-key","dir":"Reference","previous_headings":"","what":"From the Key","title":"12-tone equal-temperament cent representation — cents","text":"important argument implicitSpecies (logical, length == 1): implicitSpecies = TRUE, species input without explicit species indicated interpreted using Key. example, kern('C', Key = ':', parse(implicitSpecies = TRUE)) parsed \"C#\" C sharp major. kern('C', Key = ':', parse(implicitSpecies = TRUE)) parsed \"C\" C natural minor. kern('C', Key = '-:', parse(implicitSpecies = TRUE)) parsed \"C-\" C flat -flat minor. default, input already specifiers, interpreted absolutely---overriding \"implicit\" Key---, even implicitSpecies = TRUE. Thus, major: kern(\"C#\", Key = ':', parse(implicitSpecies = TRUE)) parsed \"C#\". \"#\" unnecessary. kern(\"Cn\", Key = ':', parse(implicitSpecies = TRUE)) parsed \"C\". \"n\" overrides Key. kern(\"C#\", Key = ':', parse(implicitSpecies = TRUE)) parsed \"C#\". \"#\" overrides Key. However! can also change behavior setting absoluteSpecies (logical, length == 1) argument FALSE. , specifiers input interpreted \"top \" key accidental: kern(\"C#\", Key = ':', parse(implicitSpecies = TRUE, absoluteSpecies = FALSE)) parsed \"C##\". \"#\" input added \"#\" Key, resulting double sharp! unusual behavior, absolute pitch representations like **kern. However, use scale chord degrees, absoluteSpecies = FALSE might appropriate. example, reading figured bass key E minor, \"b7\" figure E bass interpreted double flat (diminished) 7th (Db E)! data encoded, use absoluteSpecies = FALSE.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"memory","dir":"Reference","previous_headings":"","what":"Memory","title":"12-tone equal-temperament cent representation — cents","text":"musical data, assume accidental note \"stays effect\" scale step next bar, different accidental replaces . Fortunately, humdrumR parser (tonalInterval()) also knows parse data encoded \"memory\" way. memory = TRUE, accidental (quality) input note \"remembered\" previous appearances scale step. example, kern(c(\"D#\", \"E\", \"D\", \"E\", \"Dn\", \"C\", \"D\"), parse(memory = TRUE)) parsed c(\"D#\", \"E\", \"D#\", \"E\", \"D\", \"C\", \"D\") want \"memory\" last specific time windows (like bars), can also specify memoryWindows argument. memoryWindows must atomic vector length input (x argument). unique value within memoryWindows vector treated \"window\" within memory operates. common use case pass Bar field humdrumR dataset memoryWindows! memory memoryWindows argument work whatever values implicitSpecies absoluteSpecies specified! Though examples use accidentals, arguments effect parsing qualities (qualities = TRUE).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"octave","dir":"Reference","previous_headings":"","what":"Octave","title":"12-tone equal-temperament cent representation — cents","text":"final piece information encoded () pitch representations indication \"compound pitch\"--- incorporating octave information. humdrumR octaves always defined terms scale steps: two notes scale degree/letter name always octave. mainly comes regards Cb B#: Cb4 semitone ; B#3 enharmonically middle-C.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"integer-octaves","dir":"Reference","previous_headings":"","what":"Integer Octaves","title":"12-tone equal-temperament cent representation — cents","text":"simplest way octave information can encoded integer value, Scientific Pitch. need parse integer-encoded octaves, set octave.integer (logical, length == 1) argument TRUE. default, humdrumR considers \"central\" octave (octave == 0) octave , equivalently, unison. However, different octave used central octave, can specify octave.offset (integer, length == 1) argument. illustrate, default Scientific Pitch parser used arguments: kern('C5', parse(octave.integer = TRUE, octave.offset = 4) Returns \"cc\" (octave middle C).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"non-integer-octave-markers","dir":"Reference","previous_headings":"","what":"Non-integer Octave Markers","title":"12-tone equal-temperament cent representation — cents","text":"octave.integer = FALSE, humdrumR parser instead looks three possible symbols indicate octave information. symbols controlled using , , (character, length == 1) arguments. symbol, symbol, interpreted \"central\" octave; repeating strings symbols indicate increasing positive () negative () octaves. example, lilypond notation, , represents lower octaves, ' (single apostrophe) represents upper octaves. default lilypond() parser uses arguments: pitch(c(\"c\", \"c\", \"c'\"), parse(octave.integer = FALSE, = \"'\", = \",\", octave.offset = 1)) Returns c(\"C2\", \"C3\", \"C4\"). (Note lilypond makes octave  central octave, using octave.offset = 1.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"octave-rounding-","dir":"Reference","previous_headings":"","what":"Octave \"Rounding\"","title":"12-tone equal-temperament cent representation — cents","text":"situations, pitch data might interpret \"boundaries\" octaves little differently. absolute pitch representations (e.g., kern(), pitch()), \"boundary\" one octave next B (degree 7) C (degree 1). However, example, working data representing intervals, might think \"octave\" spanning range -P4 (G) +P4 (f). case, \"octave boundary\" centered around unison (), rather starting middle-C/unison. data represented way, use octave.round argument; octave.round must rounding function, either round, floor, ceiling, trunc, expand. functions indicate interpret simple pitches \"rounding\" nearest C/unison. default behavior pitch representations octave.round = floor: scale step rounded downwards nearest C. B associated C 7 steps . , hand, octave.round = round, scale-steps \"rounded\" closest C, B associated closer C . Indeed, octave.round = round gets us -P4 <-> +P4 behavior mentioned earlier! working parsing intervals, octave.round option allows control \"simple part\" (less octave) compound interval represented. example, might think ascending major 12th ascending octave plus ascending perfect 5th: ** +P8 + P5**. encode interval two ascending octaves minus perfect fourth: + P15 - P4. following table illustrates different octave.round arguments \"partition\" compound intervals simple parts octaves: Notice , octave.floor used, simple intervals represented ascending. parsing \"absolute\" pitch representations, octave.round option allows control octave notes associated . following table illustrates:","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"absolute-or-relative-contour-octave","dir":"Reference","previous_headings":"","what":"Absolute or Relative (contour) Octave","title":"12-tone equal-temperament cent representation — cents","text":"notation encoding schemes, \"octave\" note interpreted relative previous note, rather absolute reference. prominent system Lilypond's relative octave entry style. style often used combination scale degree representations---RS200 corpus. example, data set might say Re Mi vSo La Ti , \"v\" indicating jump . activate relative-octave parsing, set octave.relative = TRUE---alternatively, can use octave.absolute = FALSE, equivalent. relative-octave data, assume octave indications indicate shift relative previous note. usually used combination octave markers like \"^\" () \"v\" (). Different combinations octave.round allow us parse different behaviors: octave.round = round, marker (marker) indicates note pitch closest previous pitch. Octave markers indicate alterations assumption. always, based scale steps, semitones! fourth \"closer\" fifth, regardless quality: C F# ascending C Gb descending! ascending diminished 5th written C ^Gb---= ^. octave.round = floor, marker (marker) indicates note octave previous pitch. Octave markers indicate alterations assumption. setting, going C B always requires mark.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"string-parsing","dir":"Reference","previous_headings":"","what":"String Parsing","title":"12-tone equal-temperament cent representation — cents","text":"addition three types musical parsing considerations reviewed (steps, species, octaves), also general string-parsing issues can consider/control.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/cents.html","id":"parts-and-order","dir":"Reference","previous_headings":"","what":"Parts and Order","title":"12-tone equal-temperament cent representation — cents","text":"far () discussed various ways tonal pitch information (step, species, octave) can encoded, humdrumR parser can modified handle different options. However, two general parsing issues/options consider: information encoded, order? parts argument can specifyied indicate . parts argument must character vector length 1--3. characters must partial match either \"step\", \"species\", \"octave\". presense strings parts vector indicate information parsed. order strings indicates order pieces pitch information encoded input strings. illustrate, imagine input data identical standard interval representation---e.g., M2 P5---except quality appears step---e.g., 2M 5P. call interval(c(\"2M\", \"5P\"), parse(parts = c(\"step\", \"species\"))) sure enough get correct parse! One final string-parsing argument sep, indicates character string separating pitch information components: common case comma space. example, use parse command like : kern(\"E flat 5\", parse(flat = \"flat\", sep = \" \")).","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/chordTransformer.html","id":null,"dir":"Reference","previous_headings":"","what":"Parsing and deparsing chord information. — chordTransformer","title":"Parsing and deparsing chord information. — chordTransformer","text":"functions used work chord information.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/chordTransformer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parsing and deparsing chord information. — chordTransformer","text":"","code":"figuredBass(   x,   ...,   Key = NULL,   Exclusive = NULL,   parseArgs = list(),   transposeArgs = list(),   figurationArgs = list(),   inPlace = FALSE,   memoize = TRUE,   deparse = TRUE )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/chordTransformer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parsing and deparsing chord information. — chordTransformer","text":"xxx Tertian sets can read/wrote various ways.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/collapseHumdrum.html","id":null,"dir":"Reference","previous_headings":"","what":"HumdrumR data ","title":"HumdrumR data ","text":"functions used change \"shape\" data stored humdrum tables (held within humdrumRclass objects course).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/collapseHumdrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HumdrumR data ","text":"","code":"collapseHumdrum(   humdrumR,   by,   collapseField = \"Token\",   dataTypes = \"Dd\",   removeNull = list(),   collapseAtomic = TRUE,   sep = \" \" )  collapseStops(   humdrumR,   collapseField = \"Token\",   collapseAtomic = TRUE,   sep = \" \" )  collapsePaths(   humdrumR,   collapseField = \"Token\",   collapseAtomic = TRUE,   sep = \" \" )  collapseRecords(   humdrumR,   collapseField = \"Token\",   dataTypes = \"GLIMDd\",   collapseAtomic = TRUE,   sep = \" \" )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/collapseHumdrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HumdrumR data ","text":"humdrumR humdrumRclass data object. (see humdrum table documentation Fields section explanation.). collapseAtomic logical. collapseAtomic == TRUE, stop collapsed single string collapseAtomic == FALSE, stop collapsed list tokens. sep character. collapseAtomic == TRUE, collapsed tokens separated string. pad logical. path/column padding tokens included?","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/collapseHumdrum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HumdrumR data ","text":"collapseXXX family allows collapse user fields across groups another field.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Tonal scale degree representation (absolute) — degree","title":"Tonal scale degree representation (absolute) — degree","text":"humdrum **degree **deg interpretations represent Western \"scale degrees\" two slightly different formats. **degree representation, octave pitch represented \"absolutely,\" standard octave scheme scientific pitch. **deg representation, octave pitch indicated relative previous pitch--- \"^\" indicates pitch higher previous pitch \"v\" indicates pitch lower previous pitch.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tonal scale degree representation (absolute) — degree","text":"","code":"degree(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE )  deg(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/degree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tonal scale degree representation (absolute) — degree","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). generic (logical, length == 1) generic = TRUE \"specific\" pitch information (accidentals qualites) discarded. simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. transposeArgs (list) transposeArgs can list arguments passed special call transpose. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/degree.html","id":"basic-pitch-arguments","dir":"Reference","previous_headings":"","what":"Basic pitch arguments","title":"Tonal scale degree representation (absolute) — degree","text":"pitch function standard arguments control details output. important generic simple arguments, allow control type pitch information returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/degree.html","id":"generic-vs-specific","dir":"Reference","previous_headings":"","what":"Generic vs Specific","title":"Tonal scale degree representation (absolute) — degree","text":"generic = TRUE, specific pitch information (accidentals qualities) omitted output. alternative way controlling functionality, can use specific argument, specific == !generic. case atonal functions, \"generic\" version pitch output: example, semits('c#', generic = TRUE) return 0, \"generic\" version C# C, corresponds 0. However, note generic version pitch follows key, semits('c#', generic = TRUE, Key = ':') return 1!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/degree.html","id":"simple-vs-compound","dir":"Reference","previous_headings":"","what":"Simple vs Compound","title":"Tonal scale degree representation (absolute) — degree","text":"simple = TRUE, compound pitch information (octave contour) omitted output. alternative way controlling functionality, can use compound argument ,compound == !simple. actually one way might want divide compound intervals simple octave parts. example, might like call output -M2 (descending major 2nd) +m7 (ascending minor 7th octave ). functionality can controlled octave.round argument: see pitch deparsing documentation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/degree.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"Tonal scale degree representation (absolute) — degree","text":"Key argument must diatonicSet, something can parsed one. Key argument passed parser, deparser, transpose---unless alternate Key passed transposeArgs parseArgs. Various deparsing options use Key argument; example, use implicitSpecies (see advanced parsing section) dependent Key. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function---means, cases, need explicitly anything Key argument! (want happen, need explicitly specify Key argument, Key = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/degree.html","id":"parse-arguments","dir":"Reference","previous_headings":"","what":"Parse arguments","title":"Tonal scale degree representation (absolute) — degree","text":"parseArgs argument must list() (named) arguments passed input parser. example, input representation uses \"X\" represent double sharps, specify kern('CX5', parseArgs = list(doublesharp = 'X')) get correct result (\"cc##\"). convenient shorthand, \"syntactic sugar,\" can specify parseArgs alternate way: Simply input parse(args...) unnamed argument pitch function. example, can get exact result typing kern('CX5', parse(doublesharp = 'X')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/degree.html","id":"transpose-arguments","dir":"Reference","previous_headings":"","what":"Transpose arguments","title":"Tonal scale degree representation (absolute) — degree","text":"transposeArgs argument must list() (named) arguments passed internal call transpose(), allowing us easily transpose pitch information. example, type kern(c('C', 'D', 'E'), transposeArgs = list(= 'M9')) can get output c('d', 'e', 'f#'). possible transpose args : (tonalInterval, length == 1 | length == (x)) (diatonicSet, length == 1 | length == (x))  (diatonicSet, length == 1 | length == (x)) real (logical, length == 1) transposition real tonal? relative (logical, length == 1) key-wise transposition based relative parallel keys? convenient shorthand, \"syntactic sugar,\" can specify transposeArgs alternate way: Simply input transpose(args...) unnamed argument pitch function. example, can get exact result typing kern(c('C', 'D', 'E'), transpose(= 'M9')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/degree.html","id":"transposing-by-interval","dir":"Reference","previous_headings":"","what":"Transposing by interval","title":"Tonal scale degree representation (absolute) — degree","text":"calling transpose() directly, argument can anything coercable tonalInterval, output transposed amount. real = FALSE, tonal transposition (within Key) performed. details transposition behavior, check transpose() docs.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/degree.html","id":"transposing-by-key","dir":"Reference","previous_headings":"","what":"Transposing by key","title":"Tonal scale degree representation (absolute) — degree","text":"Another way transposing specifying input (\"\") key output (\"\") key. default, Key argument passed transpose , nothing actually happens. Thus, specify either key key, transposition happen /key Key. course, specify transposition happen keys specify. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function. specify key, Key field passed transpose key, result, pitches input transposed whatever keys target () key! real relative arguments give special control key-wise transposition works, check transpose() docs details!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/degree.html","id":"in-place-parsing","dir":"Reference","previous_headings":"","what":"In-place parsing","title":"Tonal scale degree representation (absolute) — degree","text":"humdrum data, character strings often encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find using appropriate known regular expressions. example, pitch('4.ee-[') returns Eb5. However, pitch functions (like pitch() kern()) option keep \"extra\" information return result \"place\"---.e., embedded right found input string. controlled inPlace argument, FALSE default. , pitch('4.ee-[', inPlace = TRUE) return 4.Eb5[---keeping \"4.\" \"[\". (obviously works input string, numeric!) Note inPlace = TRUE force functions like semits, normally return numeric values, return character strings input character string.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/delta.html","id":null,"dir":"Reference","previous_headings":"","what":"Lagged differences — delta","title":"Lagged differences — delta","text":"Calculate sequential differences values numeric vectors.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/delta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lagged differences — delta","text":"","code":"delta(x, lag, skip, init, right, ...)  # S3 method for default delta(   x,   lag = 1,   skip = is.na,   init = as(NA, class(x)),   right = FALSE,   boundaries = list(),   ... )  # S3 method for matrix delta(x, margin = 2L, ...)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/delta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lagged differences — delta","text":"x (numeric vector.) NULL values returned NULL. lag (Non-zero integer.) lag use. Results look like: x[] - x[- lag]. skip (function.) must function can applied x returns logical vector length. TRUE values skipped calculations. default, skip function .na, NA values input (x argument) skipped. skipped values returned output vector. init (Atomic value class x, length(init) <= lag.) NA values beginning (end right == TRUE) filled values summing. right (single logical value) init padding \"right\" (end vector)? default, right == FALSE init padding beginning output. boundaries (vector length x, list vectors) Differences calculated across groups indicated boundaries vector(s).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/delta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lagged differences — delta","text":"delta similar base-R diff(). However, delta favored humdrumR use : output always length  input. achieved padding beginning end output with1 NA values (options). boundaries argument, automatically used humdrumR () commands constrain differences within files/spines/paths humdrum data. boundaries approach (details ) generally faster applying commands within groupby groups. (can) automatically skip NA () values. applied matrix, delta applied separately column, unless margin set 1 (rows) , higher-dimensional array, higher value.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/delta.html","id":"initial-padding-values","dir":"Reference","previous_headings":"","what":"Initial/padding values","title":"Lagged differences — delta","text":"lagged pair numbers vector summed/subtracted. leaves abs(lag) numbers end nothing pair . example, lag == 1, indices getting subtracted look like : \\(x_1 - x_?\\) \\(x_2 - x_1\\) \\(x_3 - x_2\\) \\(x_4 - x_3\\) \\(x_5 - x_4\\) lag == 3: \\(x_1 - x_?\\) \\(x_2 - x_?\\) \\(x_3 - x_?\\) \\(x_4 - x_1\\) \\(x_5 - x_2\\) init argument (\"initial\") value, values, pair first lag values. default, init NA, since n + NA n - NA , NA, output vector padded NA values. lag == 3 : \\(x_1 - NA\\) \\(x_2 - NA\\) \\(x_3 - NA\\) \\(x_4 - x_1\\) \\(x_5 - x_2\\) However, init argument can 1 abs(lag) numeric values. result, lag==3 : \\(x_1 - init_1\\) \\(x_2 - init_2\\) \\(x_3 - init_3\\) \\(x_4 - x_1\\) \\(x_5 - x_2\\) right == TRUE, init values placed end, like: \\(x_4 - x_1\\) \\(x_5 - x_2\\) \\(init[1] - x_3\\) \\(init[2] - x_4\\) \\(init[3] - x_5\\) init argument functions similarly init argument Reduce().","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/delta.html","id":"negative-lag","dir":"Reference","previous_headings":"","what":"Negative lag","title":"Lagged differences — delta","text":"lag negative, differences simply reversed, resulting numbers equivalent positive lag, * -1. \\(x_1 - NA\\) \\(x_2 - x_1\\) \\(x_3 - x_2\\) \\(x_4 - x_3\\) \\(x_5 - x_5\\) \\(NA - x_1\\) \\(x_1 - x_2\\) \\(x_2 - x_3\\) \\(x_3 - x_4\\) \\(x_4 - x_5\\)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/delta.html","id":"boundaries","dir":"Reference","previous_headings":"","what":"Boundaries","title":"Lagged differences — delta","text":"many cases want perform lagged calculations vector, across certain boundaries. example, vector includes data multiple pieces, want calculate melodic intervals pieces, within pieces. boundaries argument indicates one, , grouping vectors, break x (input) argument groups. boundaries vectors given, change vector indicates boundary. Value pairs cross groups treated beginning. Basically, using boundaries essentially identical using tapply(x, boundaries, laggedFunction, ...), except generally faster number groups large. common use case humdrum data, looking \"melodies\" within spines. , want boundaries = list(File, Spine, Path ). fact, humdrumR () calls automatically feed three fields boundaries arguments certain functions: mint, delta, sigma, lag, ditto. use delta call (), automatically calculate delta \"melodic\" way, within spine path file. However, wanted, instance, calculate differences across spines (like harmonic intervals) manually set boundaries = list(File, Record).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/delta.html","id":"invertability","dir":"Reference","previous_headings":"","what":"Invertability","title":"Lagged differences — delta","text":"sigma delta functions inverses , meaning right arguments set, sigma(delta(x)) == x delta(sigma(x)) == x. words, two functions \"reverse\" . key init argument needs set 0, arguments (lag, skip, boundaries, etc.) need match. actually,  sigma(delta(x, init = 0, ...)) == x delta(sigma(x), init = 0)) == x. take differences values (delta(x)), resulting differences tell us fully reconstruct original unless know \"start\" (constant offset). example, delta(c(5, 7, 5, 6)) == c(NA, 2, -2, 1) know input goes 2, back 2, 1, starting value (first 5) lost. call sigma , get: sigma(c(NA, 2, -2, 1)) == c(0, 2,0, 1) get right contour, offset constant 5. call delta(x, init = 0) necessary constant (first value) kept beginning vector delta(c(5, 7, 5, 6), init = 0) == c(5, 2, -2, 1) sigma gets want, full invertability: sigma(delta(c(5, 7, 5, 6), init = 0)) == c(5, 7, 5, 6) Alternatively, specify necessary constant init argument sigma: sigma(delta(c(5, 7, 5, 6)), init = 5) == c(5, 7, 5, 6) init arguments two functions complementary. Currently, right argument delta complement sigma, invertability holds true right = FALSE (default).","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/diatonicSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tonal (diatonic) sets — diatonicSet","title":"Tonal (diatonic) sets — diatonicSet","text":"diatonicSet one humdrumR's types tonal data, representing Western diatonic keys. part, users need interact diatonicSets directly---rather, diatonicSets work behind scene numerous humdrumR pitch functions. See keyRepresentations keyTransformations documentation details usage functionality Tonality humdrumR vignette detailed explanation theory specifics diatonicSets.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/diatonicSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tonal (diatonic) sets — diatonicSet","text":"","code":"dset(root = 0L, signature = root, alterations = 0L)  is.diatonicSet(x)  is.diatonicSet(x)  order.diatonicSet(   x,   ...,   parallel = TRUE,   na.last = TRUE,   decreasing = FALSE,   method = c(\"auto\", \"shell\", \"radix\") )  # S4 method for diatonicSet,diatonicSet ==(e1, e2)  # S4 method for diatonicSet,diatonicSet Compare(e1, e2)  # S3 method for diatonicSet diatonicSet(x, ...)  # S3 method for logical diatonicSet(x, ...)  # S3 method for numeric diatonicSet(x)  # S3 method for integer diatonicSet(x)  # S3 method for character diatonicSet(x, Exclusive = NULL, str, Key = NULL, ..., multiDispatch = FALSE)  # S4 method for tertianSet as.character(x)  # S4 method for tertianSet,tertianSet ==(e1, e2)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/diatonicSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tonal (diatonic) sets — diatonicSet","text":"diatonicSet S4 subclass humdrumR's virtual class struct, inherits lot useful \"vector-like\" behaviors/functionality. constructor function dset can used create diatonicSets directly. three arguments corespond three slots: root, mode, alteration. inputs coerced match length. root argument attempt coerce character strings tonalIntervals, use LO5th value root. default, .character method, thus (via struct) show method, diatonicSets call key(). Thus, return diatonicSet command line (call print one one), see key interpretation representation printed.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/diatonicSet.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Tonal (diatonic) sets — diatonicSet","text":"Root integers representing root key line--fifths Signature integers representing signature (number accidentals) key. Alteration integers representing alterations diatonic set key represented two integers, Root Signature. Root simply tonic note key circle fifths. Signature value circle fifths, indicating diatonic mode. can think Signature value indicating number accidentals, negative numbers flats positive numbers sharps. can also think signature indicating much \"natural key\" (C major) slid line--fifths. traditional diatonic modes Western music occur wherever Signature - Tonic range -5:1: Signature - Tonic = +1 => Lydian Signature - Tonic = +0 => Major (Ionian) Signature - Tonic = -1 => Mixolydian Signature - Tonic = -2 => Dorian Signature - Tonic = -3 => Minor (Aeolian) Signature - Tonic = -5 => Locrian Signature - Tonic = -4 => Phyrgian Note can make diatonicSets Root outside Key. unusual, may result sets predict.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/diatonicSet.html","id":"alterations","dir":"Reference","previous_headings":"","what":"Alterations","title":"Tonal (diatonic) sets — diatonicSet","text":"Alteration slots (also integer) can used represent various \"altered\" scales. integer values interpreted seven-trit balanced ternary string. (\"trits\" ternary equivalent binary \"bits.\") Balanced ternary allows three digits, 0 (unaltered degree), 1 (sharpened degree), -1 (flattened degree). seven trits correspond seven scale degrees line--fifth indicated signature---.e., ordered lowest hightest line--fifths, relative root. (instance, Signature == 0, degrees c(-1, 0, 1, 2, 3, 4, 5).) ternary arrangement maps powers three scale degree, Alteration integer: ± 1: raise flatten 7th scale degree. ± 3: raise flatten 3rd scale degree. ± 9: raise flatten 6th scale degree. ± 27: raise flatten 2nd scale degree. ± 81: raise flatten 5th scale degree. ± 243: raise flatten 1st scale degree. ± 749: raise flatten 4th scale degree. example, consider Alteration == 26: balanced ternary representation, decimal integer 26 represented 1 0 0 1 0 -1 0. (words 1 \"27s  place\" -1 \"ones place\"---.e., 27 - 1). represents raised 2nd (27) lowered 7th (-1). Alteration integer allows us concisely represent 2,187 possible combinations raised lowered diatonic scale degrees! However, combined Signature slot, redundancy scale representation. example, melodic minor scale can represented major scale (Signature - Root == 0) lowered third degree (Alteration == -3) minor scale (Signature - Root == -3) raised 6ths 7ths (Alteration == 10). However, though two representations result set line--fifths, might consider conceptually different contexts, consider redundancy acceptable. Another case encoding redundancy Alteration - 1 (flatten 7th) exactly equivalent Signature - 1. Similarly, Alteration + 749 (raise 4th) exactly equivalent Signature + 1. Double-flat double-sharp degrees encodable diatonicSet. However, combination Signature slot, sets double-flat/sharps (like doubly-diminished 7ths) can encoded.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/diatonicSet.html","id":"arithmatic","dir":"Reference","previous_headings":"","what":"Arithmatic","title":"Tonal (diatonic) sets — diatonicSet","text":"Arithmetic diatonicSets defined. However, number useful arithmetic operations diatonicSets data types defined: XXXX Elaborate XXXX Need implement special logic adding Alterations! (Taking account Signature addition.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/diatonicSet.html","id":"relational-operators","dir":"Reference","previous_headings":"","what":"Relational Operators","title":"Tonal (diatonic) sets — diatonicSet","text":"diatonicSets can compared using standard relational operations ==, !=. Two diatonicSets equal (according ==) slots (Root, Signature, Alteration) exactly identical. Ordinal comparisons (e.g., >, <=) diatonicSets Signature .","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/diatonicSet.html","id":"coercion","dir":"Reference","previous_headings":"","what":"Coercion","title":"Tonal (diatonic) sets — diatonicSet","text":"humdrumR knows coerce several base-R atomic types diatonicSets. can done using function---e.g., (3, \"diatonicSet\")---intuitively using function diatonicSet(). Coercision methods defined integer: interpreted root major key numeric: rounded nearest integer intepreted root major key character: interpreted using humdrumRs regular expression dispatch system, explained fully .","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/ditto.html","id":null,"dir":"Reference","previous_headings":"","what":"Propagate data points to ","title":"Propagate data points to ","text":"ditto function allow \"fill\" null values vector non-null values earlier/later vector. default, \"forward,\" behavior fills null value previous (lower index) non-null value, . reverse argument can used cause \"backward\" filling, next (higher index) non-null value used.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/ditto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Propagate data points to ","text":"","code":"ditto(x, ...)  # S3 method for default ditto(   x,   nonnull = function(x) !is.na(x) & x != \".\",   reverse = FALSE,   boundaries = list() )  # S3 method for data.frame ditto(x, ...)  # S3 method for matrix ditto(x, margin = 2, ...)  # S3 method for humdrumR ditto(x, field = activeFields(x)[1], ..., newField = paste0(field, \"_ditto\"))"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/ditto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Propagate data points to ","text":"x input argument. vector (including list), array, data.frame nonnull Either logical vector (length(x) == length(nonnull)), numeric vector positive indices, function , applied x returns appropriate logical/numeric vector. reverse (logical & length == 1) reverse == TRUE, \"non-null\" values coped overwrite null values earlier (lower indices) vector. boundaries vector list vectors, length x. segment x delineated boundaries vector(s) treated separately. margin vector giving subscripts function applied . E.g., matrix 1 indicates rows, 2 indicates columns, c(1, 2) indicates rows columns. X named dimnames, can character vector selecting dimension names. field field (partially matched) humdrumR dataset dittoed? newField (character length == 1) name new (dittoed) field.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/ditto.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Propagate data points to ","text":"values considered \"non-null\" can controlled using nonnull argument. nonnull argument can either logical vector length input (x) argument, numeric vector positive indices, function , applied x returns appropriate logical/numeric vector. values x nonnull == TRUE copied forward/backwards replace adjacent vales nonnull == FALSE. default, nonnull function \\(x) !.na(x) & x != '.', means NA values string \".\" \"null\", overwritten adjacent values. ditto methods defined data.frames arrays (including matrices). data.frame method simply applies ditto column data.frame separately. arrays, ditto can applied across columns (margin == 2), rows (margin == 1), dimensions. ditto method humdrumR object applies ditto spine-path within file corpus. field argument indicates field apply ditto . result dittoing saved new field---newField argument can used control name new field.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/ditto.html","id":"boundaries","dir":"Reference","previous_headings":"","what":"Boundaries","title":"Propagate data points to ","text":"many cases want perform lagged calculations vector, across certain boundaries. example, vector includes data multiple pieces, want calculate melodic intervals pieces, within pieces. boundaries argument indicates one, , grouping vectors, break x (input) argument groups. boundaries vectors given, change vector indicates boundary. Value pairs cross groups treated beginning. Basically, using boundaries essentially identical using tapply(x, boundaries, laggedFunction, ...), except generally faster number groups large. common use case humdrum data, looking \"melodies\" within spines. , want boundaries = list(File, Spine, Path ). fact, humdrumR () calls automatically feed three fields boundaries arguments certain functions: mint, delta, sigma, lag, ditto. use delta call (), automatically calculate delta \"melodic\" way, within spine path file. However, wanted, instance, calculate differences across spines (like harmonic intervals) manually set boundaries = list(File, Record).","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand numbers outwards from zero — expand","title":"Expand numbers outwards from zero — expand","text":"Expand complement base R rounding functions, particularly trunc.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand numbers outwards from zero — expand","text":"","code":"expand(x)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/expand.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expand numbers outwards from zero — expand","text":"four base R functions---round, ceiling, floor, trunc---follow different logic round real numbers ingegers: round: round nearest integer either direction. floor: round downward towards negative infinity. Negative numbers rounded \"negative\" numbers. ceiling: round upward towards infinity. Negative numbers rounded \"less negative\" numbers. trunc: round \"inward\" towards zero. Negative numbers rounded \"less negative\" numbers, positive numbers still rounded downwards \"less positive\" numbers. Just ceiling compliments floor, humdrumR function expand acts compliment trunc: expand rounds \"outward\" away zero. Negative numbers rounded \"negative\" numbers positive numbers rounded \"positive\" numbers. table explains better words:","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/extractTandem.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tandem interpretation information from humdrum data. — extractTandem","title":"Get tandem interpretation information from humdrum data. — extractTandem","text":"ExtractTandem extracts tandem interpretations raw Tandem spine humdrumR object.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/extractTandem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tandem interpretation information from humdrum data. — extractTandem","text":"","code":"extractTandem(Tandem, regex)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/extractTandem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get tandem interpretation information from humdrum data. — extractTandem","text":"Tandem always Tandem field humdrumR object! regex (character, length == 1). single regular expression match tandem intrepretations. include * beginning---* marker tandem interpretations already removed Tandem field.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/extractTandem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get tandem interpretation information from humdrum data. — extractTandem","text":"Every humdrumR object field called Tandem vector strings accumulates tandem interpretations Spine. record, previous tandems ocured spine listed (comma separated), recent appearing first. example, consider file: Tandem field two spines look like : Notice \"C:\" erased appearance \"G:\"---naive parser \"know\" \"C:\" \"G:\" related. earlier tandem (\"C:\") just pushed back onto stack. worry, humdrumR data parser recognize many common tandem interpretations (like *C: *G:) automatically parse present---case, put Key field automatically. However, Tandem field retained case data contains novel tandem intepretations humdrumR recognize.","code":"**kern **kern *C:    *C: *Ibass *Isoprn 2G     4g .      4f 2C     2e *G:    *G: 2D     2f# 2G     2g *-     *- \"\" \"C:\"                 \"C:\" \"Ibass,C:\"           \"Isoprn,C:\" \"Ibass,C:\"           \"Isoprn,C:\" \"Ibass,C:\"           \"Isoprn,C:\" \"Ibass,C:\"           \"Isoprn,C:\" \"G:,Ibass,C:\"        \"G:,Isoprn,C:\" \"G:,Ibass,C:\"        \"G:,Isoprn,C:\" \"G:,Ibass,C:\"        \"G:,Isoprn,C:\" \"G:,Ibass,C:\"        \"G:,Isoprn,C:\""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/extractTandem.html","id":"extracttandem","dir":"Reference","previous_headings":"","what":"extractTandem","title":"Get tandem interpretation information from humdrum data. — extractTandem","text":"data contain novel/unknown tandem interpretations, can use extractTandem function pull Tandem field. first argument exctractTandem must Tandem field humdrumR object. second argument (regex) regular expression matched tandem interpretations. token Tandem, recent match () retained. example, wanted manually extract key information Tandem field (humdrumR automatically ), call extractTandem(Tandem, \"[-Ga-g][#-]*:\").","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/fillThru.html","id":null,"dir":"Reference","previous_headings":"","what":"Propogate data points to ","title":"Propogate data points to ","text":"fillThru function allow \"fill\" null values vector non-null values earlier/later vector. default, \"foward,\" behavior fills null value previous (lower index) non-null value, . reverse argument can used cause \"backeward\" filling, next (higher index) non-null value used.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/fillThru.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Propogate data points to ","text":"","code":"fillThru(x, nonnull = function(x) !is.na(x) & x != \".\", reverse = FALSE)  fillForward(...)  fillBackwards(...)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/fillThru.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Propogate data points to ","text":"values considered \"non-null\" can controlled using nonnull argument. nonnull argument can either logical vector length input (x) argument, numeric vector positive indices, function , applied x returns appropriate logical/numeric vector.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/filterHumdrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter humdrum data — filterHumdrum","title":"Filter humdrum data — filterHumdrum","text":"filterHumdrum command used filter humdrumR corpus Indexing humdrumR corpus (using [] [[]] operators) uses calls filterHumdrum!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/filterHumdrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter humdrum data — filterHumdrum","text":"","code":"filterHumdrum(humdrumR, ...)  removeEmptyFiles(humdrumR, fillfromTypes = \"D\")  removeEmptySpines(humdrumR, fillfromTypes = \"D\")  removeEmptyRecords(humdrumR, fillfromTypes = \"D\")  humdata[] # returns unchanged  humdata[x:y]  humdata['regex']  humdata[~expression]  humdata[[x:y]]  humdata[[ , x:y]]  humdata[['regex']]  humdata[[x:y, l:m]]"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/filterHumdrum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter humdrum data — filterHumdrum","text":"filterHumdrum used similar manner withinHumdrum, taking number \"expressions\" (functions) arguments. (fact, expressions/function arguments passed directly internal call withinHumdrum.) difference expressions/functions fed filterHumdrum must predicate expressions return logical (TRUE/FALSE) vector. returned vector must also length input data (number rows humdrum table). (can use dofill~ expression want \"expand\" shorter outputs filtering pusposes.) filterHumdrum updates humdrum table's Filter field using logical (|) existing Filter field negation predicate: Filter | !Predicate. HumdrumR functions (mostly) ignore data points Filter == TRUE: print filtered humdrumR see filtered data points turned null data (.), calls withinHumdrum ignore filtered data. default, filterHumdrum completely removes files corpus data records filtered . However, can stop specifying removeEmptyFiles argumet FALSE. want remove empty files, spines, records, call removeEmptyFiles, removeEmptySpines, removeEmptyRecords.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/filterHumdrum.html","id":"indexing","dir":"Reference","previous_headings":"","what":"Indexing","title":"Filter humdrum data — filterHumdrum","text":"R, basic indexing operators, [] [[]], used select subsets data. many R data types (instance, base R lists) [single brackets] used \"shallower\" extraction [[double brackets]] used \"deeper\" extraction. HumdrumR corpus indexing follows basic pattern: [single brackets] used index humdrumR objects piece [[double brackets]] used index within pieces. (Accidentally writing [] need [[]] common error, watch !) Whether, indexing piece within, humdrumR objects can use three types indexing arguments: numeric (ordinal integers) character string (regular expressions) formula (arbitrary expressions) last option (formula) powerful option, indeed, first two options (numeric character indexing) just convenient shorthands indexing can accomplished using formula method.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/filterHumdrum.html","id":"numeric-indexing-","dir":"Reference","previous_headings":"","what":"Numeric indexing:","title":"Filter humdrum data — filterHumdrum","text":"Indexing humdrumR corpora [single brackets] accept one numeric argument. argument used pick pieces within humdrumR object ordinally. Thus, humdata[1:10] select first ten pieces data humdata[42] select 42nd piece. Indexing humdrumR objects [[double brackets]] accept one two numeric arguments, j, either can used isolation combination. (j used isolation, must placed comma, humdata[[ , j ]].) used index data records (.e., based humtable Record field) ordinally. Thus, humdata[[1:20]] indexes first twenty records file corpus, humdata[[42]] extracts 42nd record file. j used index spines  (.e., based Spine field) ordinally. Thus, humdata[[ , 3:4]] returns third fourth spines file corpus. indexing humdrumR corpora numbers, numeric (double) inputs converted integers. Note numeric humdrumR indexing entirely ordinal, meaning pieces/data records/spines matched based value respective fields, rather order among existing values. Thus, [single-bracket] indexing $i_th$ piece corpus taken, regardless FileN field associated piece. example, return 12th piece original humdata object, second piece. beacuse first call [] returns 11th 20th pieces, second call returns second piece still present (12th). Similarly, return third spine original data. normal R indexing, negative numbers can used, causing corresponding elements removed instead retained. Thus, humdata[-3:-5] remove third, fourth, fifth pieces data humdata[[ , -3:-5]] remove third, fourth, fifth spines piece. Positive negative indices mixed single argument. cases, indices outside range (value 0) ignored. E.g., corpus twenty files call corpus[21], 21st piece, 21 \"range\". input indices 0 error result. input indices range empty humdrumR object returned. instance, humdata[[401:500, ]] return empty humdrumR object pieces 400 data records.","code":"humsubset <- humdata[11:20] humsubset[2] humsubset2 <- humdata[[ , 2:4]] humsubset2[[ , 2]]"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/filterHumdrum.html","id":"character-indexing-","dir":"Reference","previous_headings":"","what":"Character indexing:","title":"Filter humdrum data — filterHumdrum","text":"Indexing humdrumR objects [single brackets] accept one vector character strings. strings treated regular expressions (regexes). tokens humdrumR object's Active fields searched matches regular expressions input. piece contains match regular expressions retained---pieces filtered . Note ([single-bracket] indexing) entire piece retained, even one match. matches occur pieces, empty humdrumR object returned. Indexing humdrumR objects [[double brackets]] accept one two vectors character strings, j, either can used isolation combination. (j used isolation, must placed comma, humdata[[ , j]].) strings treated regular expressions (regexes). tokens humdrumR object's Active fields searched matches regular expressions input. record contains least one token matching regex retained. Similarly, spine contains least one token matching regex j retained. j used together, matching spines (j) indexed first, tokens matching regular expression(s) must found matching spines. third argument, k, can also used, j arguments missing. order work, need put two commas mark \"missing\" j arguments: e.g., humdata[[ , , '[Ee]-']]. case k, matching tokens retained, regardless spine record number(s).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/filterHumdrum.html","id":"formula-indexing-","dir":"Reference","previous_headings":"","what":"Formula indexing:","title":"Filter humdrum data — filterHumdrum","text":"Indexing humdrumR objects formulae powerful, flexible indexing option. Either [single] [[double]] brackets accept (single) formula. formula fed directly arguments filterHumdrum---, music evaluate logical vector length input. case [single-bracket] indexing, one formula accepted, every piece evalues least one TRUE retained. instance, humdata[~Spine > 4] return pieces contain five () spines. [single-bracket] formula indexing especially useful indexing meta-data properties like reference records: instance, humdata[~COM == \"Paul McCartney\"] return pieces !!!COM: Paul McCartney reference record. case [[double-bracket]] indexing, one two formulas accepted, arguments j, either can used isolation combination. (j used isolation, must placed comma, humdata[[ , j]].) case formulae, record evaluates least one TRUE value retained. case j, spine evaluates least one TRUE value retained. piece contains matches dropped entirely. [[double-bracket]] formula indexing, third argument, k may used absence j. order work, need put two commas mark \"missing\" j arguments: e.g., humdata[[ , , ~formula]]. case k tokens evaluate TRUE retained, regardless piece/spine/record. Pieces, spines, records TRUE values simply dropped. Using k argument exactly \"plain\" call filterHumdrum.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/foldExclusive.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"foldExclusive() special version foldHumdrum(), \"folds\" spines based exclusive interpretations. instance, can \"fold\" **silbe spines corpus onto respective **kern spines.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/foldExclusive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"foldExclusive(humdrumR, fold, onto, fromField = \"Token\")"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/foldExclusive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"fold (character) target exclusive interpretation(s) \"fold\" spines new fields. Must specified without ** prefix: \"kern\" \"**kern\". onto (character, whole number) target exclusive interpretation (must one) \"fold\" data moved.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/foldExclusive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"","text":"fold onto arguments (character, length == 1) must match exclusive interpretations humdrumR object input. Within file, mismatches number matching onto fold spines handled \"parallel,\" just like foldHumdrum(). Multi-matching spines matched left--right. matching exclusive interpetation pairs found, unchanged humdrumR object returned warning.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/foldGraceNotes.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"\"Fold\" grace notes neighbos","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/foldGraceNotes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"foldGraceNotes(humdrumR)"},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/foldHumdrum.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"Many humdrum datasets encode data across multiple spines, spine-paths, stops. default, humdrumR parses separate spine, spine-path, stop individual data points, taking one row humdrum table. want treat data multiple spines/paths/stops different aspects data easiest reshape data information different humdrumR fields rather separate spines/paths/stops. \"fold\" data one structural location \"top\" data using foldHumdrum.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/foldHumdrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"foldHumdrum(   humdrumR,   fold,   onto,   what = \"Spine\",   File = NULL,   fromField = \"Token\",   fillFromField = FALSE,   newFieldNames = NULL )  foldPaths(humdrumR, fromField = \"Token\", fillFromField = TRUE)  foldStops(humdrumR, fromField = \"Token\", fillFromField = FALSE)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/foldHumdrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"humdrumR humdrumR data object. fold (numeric, whole number) target structure (spine, path, etc.) \"fold\" data another structural position field(s). onto (numeric, whole number) target structure (spine, path, etc.) \"fold\" data moved. (character, length == 1) structural field folded across. Valid options \"Spine\", \"Path\", \"Stop\", \"Record\",\"NData\". File (NULL numeric, length == length(onto), whole number) Used specify specific folds different files corpus (see \"File-Specific Folding\" section, ). fromField (character, length == 1) string (partially) matching name data field humdrumR-object input. field field \"folded\" new field. fillFromField (logical, length == 1) folding field smaller field, content fromField copied NA sections? newFieldNames (character) Names use new fields created folding.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/foldHumdrum.html","id":"from-where-to-where","dir":"Reference","previous_headings":"","what":"From where to where","title":"","text":"numeric fold onto arguments specify fold /. fold indicates Spine/Path/Stop fold , \"\" Spine/Path/Stop indicated onto. example, specify foldHumdrum(mydata, fold = 2, onto = 1, = 'Spine') spine 2 folded \"top \" spine 1. fold onto targets may overlap. fold onto arguments can vectors length, interpreted parallel: example, combination fold = 1:2 onto = 3:4 map first spine third spine (1 -> 3) second spine 4th spine (2 -> 4). onto targets duplicated, fold spines folded onto multiple new fields: example, combination fold = 1:2 onto = c(3, 3) map first spine second spine two new fields third spine. fold target duplicated, fold spines can copied onto multiple onto spines: example, combination fold = 1 onto = 2:3 map contents first spine onto second third spine, duplicating spine-1 data. lengths fold onto automatically matched, arguments like fold = 1:2 onto = 3 equivalent fold = 1:2, onto = c(3, 3). makes easy things like \"copy four spines onto spine 1\": just write fold = 2:4, onto = 1. specify structural field want fold across, use argument (character, length == 1). default value \"Spine\"; common fold options \"Path\", \"Stop\", though might want use convenient foldPaths() foldStops() functions directly (details ). (may also fold across \"Record\" \"NData\"), advanced/tricky!)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/foldHumdrum.html","id":"which-fields","dir":"Reference","previous_headings":"","what":"Which fields","title":"","text":"fromField (character, length == 1) controls field fold spine/path/stop folded new field. fromField argument defaults (first) active field, must match (partially match) field humdrumR argument data set. cases, fold data smaller onto data---instance, spine paths often exist part spine, less data path full spine. cases, can helpful set fillFromField == TRUE, causes missing parts fold filled data field. foldPaths default. resulting new fields automatically named appropriate Results fields. newFieldNames argument (character) can used control output names: one new field created fold. specify many newFieldNames, later names ignored. specify newFieldNames, later names given result names, consistent default behavior.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/foldHumdrum.html","id":"file-specific-folding","dir":"Reference","previous_headings":"","what":"File-Specific Folding","title":"","text":"default, \"fold\" carried file input corpus (humdrumR argument). need specify different folds different files, specify File argument (numeric, whole number). every file corpus want apply folds , must specify fold onto arguments parallel vectors File argument (even reduendant files). example, specify combinations, File one: first spine mapped second spine third spine mapped fourth spine File two: first spine mapped second spine fourth spine mapped third spine files corpus included, affected !","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/foldHumdrum.html","id":"predefined-folds","dir":"Reference","previous_headings":"","what":"Predefined folds","title":"","text":"convenient foldStops() foldPaths() functions automatically fold stops/paths dataset onto first stop/path, creating new fields named, e.g., Path1, Path2, etc. Another extremely useful function foldExclusive(), automatically folds spines based exclusive interpretation.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate pitches to frequency (Hz) — freq","title":"Translate pitches to frequency (Hz) — freq","text":"Translate pitches frequency (Hz)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate pitches to frequency (Hz) — freq","text":"","code":"freq(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE,   tonalHarmonic = 2^(19/12),   frequency.reference = 440,   frequence.reference.note = \"a\" )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate pitches to frequency (Hz) — freq","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). generic (logical, length == 1) generic = TRUE \"specific\" pitch information (accidentals qualites) discarded. simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. transposeArgs (list) transposeArgs can list arguments passed special call transpose. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ). tonalHarmonic (numeric, length == 1) frequency \"tonal harmonic\" (perfect 10th) tuned ? default, value 2^(19/12), 12-tone equal-temperament10th. Pythagorean tuning, set tonalHarmonic = 3. frequency.reference (numeric, length == 1) reference frequency---default 440 (Hz). frequency.reference.note (parsable pitch representation, length == 1) note reference.frequency tuned ? Default \"\"---middle-C.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/freq.html","id":"basic-pitch-arguments","dir":"Reference","previous_headings":"","what":"Basic pitch arguments","title":"Translate pitches to frequency (Hz) — freq","text":"pitch function standard arguments control details output. important generic simple arguments, allow control type pitch information returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/freq.html","id":"generic-vs-specific","dir":"Reference","previous_headings":"","what":"Generic vs Specific","title":"Translate pitches to frequency (Hz) — freq","text":"generic = TRUE, specific pitch information (accidentals qualities) omitted output. alternative way controlling functionality, can use specific argument, specific == !generic. case atonal functions, \"generic\" version pitch output: example, semits('c#', generic = TRUE) return 0, \"generic\" version C# C, corresponds 0. However, note generic version pitch follows key, semits('c#', generic = TRUE, Key = ':') return 1!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/freq.html","id":"simple-vs-compound","dir":"Reference","previous_headings":"","what":"Simple vs Compound","title":"Translate pitches to frequency (Hz) — freq","text":"simple = TRUE, compound pitch information (octave contour) omitted output. alternative way controlling functionality, can use compound argument ,compound == !simple. actually one way might want divide compound intervals simple octave parts. example, might like call output -M2 (descending major 2nd) +m7 (ascending minor 7th octave ). functionality can controlled octave.round argument: see pitch deparsing documentation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/freq.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"Translate pitches to frequency (Hz) — freq","text":"Key argument must diatonicSet, something can parsed one. Key argument passed parser, deparser, transpose---unless alternate Key passed transposeArgs parseArgs. Various deparsing options use Key argument; example, use implicitSpecies (see advanced parsing section) dependent Key. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function---means, cases, need explicitly anything Key argument! (want happen, need explicitly specify Key argument, Key = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/freq.html","id":"parse-arguments","dir":"Reference","previous_headings":"","what":"Parse arguments","title":"Translate pitches to frequency (Hz) — freq","text":"parseArgs argument must list() (named) arguments passed input parser. example, input representation uses \"X\" represent double sharps, specify kern('CX5', parseArgs = list(doublesharp = 'X')) get correct result (\"cc##\"). convenient shorthand, \"syntactic sugar,\" can specify parseArgs alternate way: Simply input parse(args...) unnamed argument pitch function. example, can get exact result typing kern('CX5', parse(doublesharp = 'X')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/freq.html","id":"transpose-arguments","dir":"Reference","previous_headings":"","what":"Transpose arguments","title":"Translate pitches to frequency (Hz) — freq","text":"transposeArgs argument must list() (named) arguments passed internal call transpose(), allowing us easily transpose pitch information. example, type kern(c('C', 'D', 'E'), transposeArgs = list(= 'M9')) can get output c('d', 'e', 'f#'). possible transpose args : (tonalInterval, length == 1 | length == (x)) (diatonicSet, length == 1 | length == (x))  (diatonicSet, length == 1 | length == (x)) real (logical, length == 1) transposition real tonal? relative (logical, length == 1) key-wise transposition based relative parallel keys? convenient shorthand, \"syntactic sugar,\" can specify transposeArgs alternate way: Simply input transpose(args...) unnamed argument pitch function. example, can get exact result typing kern(c('C', 'D', 'E'), transpose(= 'M9')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/freq.html","id":"transposing-by-interval","dir":"Reference","previous_headings":"","what":"Transposing by interval","title":"Translate pitches to frequency (Hz) — freq","text":"calling transpose() directly, argument can anything coercable tonalInterval, output transposed amount. real = FALSE, tonal transposition (within Key) performed. details transposition behavior, check transpose() docs.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/freq.html","id":"transposing-by-key","dir":"Reference","previous_headings":"","what":"Transposing by key","title":"Translate pitches to frequency (Hz) — freq","text":"Another way transposing specifying input (\"\") key output (\"\") key. default, Key argument passed transpose , nothing actually happens. Thus, specify either key key, transposition happen /key Key. course, specify transposition happen keys specify. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function. specify key, Key field passed transpose key, result, pitches input transposed whatever keys target () key! real relative arguments give special control key-wise transposition works, check transpose() docs details!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/freq.html","id":"in-place-parsing","dir":"Reference","previous_headings":"","what":"In-place parsing","title":"Translate pitches to frequency (Hz) — freq","text":"humdrum data, character strings often encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find using appropriate known regular expressions. example, pitch('4.ee-[') returns Eb5. However, pitch functions (like pitch() kern()) option keep \"extra\" information return result \"place\"---.e., embedded right found input string. controlled inPlace argument, FALSE default. , pitch('4.ee-[', inPlace = TRUE) return 4.Eb5[---keeping \"4.\" \"[\". (obviously works input string, numeric!) Note inPlace = TRUE force functions like semits, normally return numeric values, return character strings input character string.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/getFields.html","id":null,"dir":"Reference","previous_headings":"","what":"------------------------------------------->             NEEDS DOCUMENTATION             <-------------------------------------------\nGet named — getFields","title":"------------------------------------------->             NEEDS DOCUMENTATION             <-------------------------------------------\nGet named — getFields","text":"------------------------------------------->             NEEDS DOCUMENTATION             <------------------------------------------- Get named","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/getFields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"------------------------------------------->             NEEDS DOCUMENTATION             <-------------------------------------------\nGet named — getFields","text":"","code":"getFields(humdrumR, fieldnames = NULL, dataTypes = \"D\")"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/getTandem.html","id":null,"dir":"Reference","previous_headings":"","what":"Get tandem interpretation information from humdrum data. — getTandem","title":"Get tandem interpretation information from humdrum data. — getTandem","text":"Every humdrumRclass object field called Tandem vector strings accumulates tandem interpretations Spine. function (getTandem) extracts tandem interpretations field, based matching regular expression. obligatory '*' need included regex, added automatically. Thus, want find tandem interpretations match '*clef..', just write regex = 'clef..'.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/getTandem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get tandem interpretation information from humdrum data. — getTandem","text":"","code":"getTandem(tandem, regex)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/helmholtz.html","id":null,"dir":"Reference","previous_headings":"","what":"Helmholtz pitch representation — helmholtz","title":"Helmholtz pitch representation — helmholtz","text":"Helmholtz notation","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/helmholtz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helmholtz pitch representation — helmholtz","text":"","code":"helmholtz(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/helmholtz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helmholtz pitch representation — helmholtz","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). generic (logical, length == 1) generic = TRUE \"specific\" pitch information (accidentals qualites) discarded. simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. transposeArgs (list) transposeArgs can list arguments passed special call transpose. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/helmholtz.html","id":"basic-pitch-arguments","dir":"Reference","previous_headings":"","what":"Basic pitch arguments","title":"Helmholtz pitch representation — helmholtz","text":"pitch function standard arguments control details output. important generic simple arguments, allow control type pitch information returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/helmholtz.html","id":"generic-vs-specific","dir":"Reference","previous_headings":"","what":"Generic vs Specific","title":"Helmholtz pitch representation — helmholtz","text":"generic = TRUE, specific pitch information (accidentals qualities) omitted output. alternative way controlling functionality, can use specific argument, specific == !generic. case atonal functions, \"generic\" version pitch output: example, semits('c#', generic = TRUE) return 0, \"generic\" version C# C, corresponds 0. However, note generic version pitch follows key, semits('c#', generic = TRUE, Key = ':') return 1!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/helmholtz.html","id":"simple-vs-compound","dir":"Reference","previous_headings":"","what":"Simple vs Compound","title":"Helmholtz pitch representation — helmholtz","text":"simple = TRUE, compound pitch information (octave contour) omitted output. alternative way controlling functionality, can use compound argument ,compound == !simple. actually one way might want divide compound intervals simple octave parts. example, might like call output -M2 (descending major 2nd) +m7 (ascending minor 7th octave ). functionality can controlled octave.round argument: see pitch deparsing documentation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/helmholtz.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"Helmholtz pitch representation — helmholtz","text":"Key argument must diatonicSet, something can parsed one. Key argument passed parser, deparser, transpose---unless alternate Key passed transposeArgs parseArgs. Various deparsing options use Key argument; example, use implicitSpecies (see advanced parsing section) dependent Key. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function---means, cases, need explicitly anything Key argument! (want happen, need explicitly specify Key argument, Key = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/helmholtz.html","id":"parse-arguments","dir":"Reference","previous_headings":"","what":"Parse arguments","title":"Helmholtz pitch representation — helmholtz","text":"parseArgs argument must list() (named) arguments passed input parser. example, input representation uses \"X\" represent double sharps, specify kern('CX5', parseArgs = list(doublesharp = 'X')) get correct result (\"cc##\"). convenient shorthand, \"syntactic sugar,\" can specify parseArgs alternate way: Simply input parse(args...) unnamed argument pitch function. example, can get exact result typing kern('CX5', parse(doublesharp = 'X')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/helmholtz.html","id":"transpose-arguments","dir":"Reference","previous_headings":"","what":"Transpose arguments","title":"Helmholtz pitch representation — helmholtz","text":"transposeArgs argument must list() (named) arguments passed internal call transpose(), allowing us easily transpose pitch information. example, type kern(c('C', 'D', 'E'), transposeArgs = list(= 'M9')) can get output c('d', 'e', 'f#'). possible transpose args : (tonalInterval, length == 1 | length == (x)) (diatonicSet, length == 1 | length == (x))  (diatonicSet, length == 1 | length == (x)) real (logical, length == 1) transposition real tonal? relative (logical, length == 1) key-wise transposition based relative parallel keys? convenient shorthand, \"syntactic sugar,\" can specify transposeArgs alternate way: Simply input transpose(args...) unnamed argument pitch function. example, can get exact result typing kern(c('C', 'D', 'E'), transpose(= 'M9')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/helmholtz.html","id":"transposing-by-interval","dir":"Reference","previous_headings":"","what":"Transposing by interval","title":"Helmholtz pitch representation — helmholtz","text":"calling transpose() directly, argument can anything coercable tonalInterval, output transposed amount. real = FALSE, tonal transposition (within Key) performed. details transposition behavior, check transpose() docs.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/helmholtz.html","id":"transposing-by-key","dir":"Reference","previous_headings":"","what":"Transposing by key","title":"Helmholtz pitch representation — helmholtz","text":"Another way transposing specifying input (\"\") key output (\"\") key. default, Key argument passed transpose , nothing actually happens. Thus, specify either key key, transposition happen /key Key. course, specify transposition happen keys specify. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function. specify key, Key field passed transpose key, result, pitches input transposed whatever keys target () key! real relative arguments give special control key-wise transposition works, check transpose() docs details!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/helmholtz.html","id":"in-place-parsing","dir":"Reference","previous_headings":"","what":"In-place parsing","title":"Helmholtz pitch representation — helmholtz","text":"humdrum data, character strings often encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find using appropriate known regular expressions. example, pitch('4.ee-[') returns Eb5. However, pitch functions (like pitch() kern()) option keep \"extra\" information return result \"place\"---.e., embedded right found input string. controlled inPlace argument, FALSE default. , pitch('4.ee-[', inPlace = TRUE) return 4.Eb5[---keeping \"4.\" \"[\". (obviously works input string, numeric!) Note inPlace = TRUE force functions like semits, normally return numeric values, return character strings input character string.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humActive.html","id":null,"dir":"Reference","previous_headings":"","what":"The ","title":"The ","text":"\"Active\" expression used default value lot humdrumR code. one, data printed show calls, .e., whenever return humdrumR object terminal. expression within call ()Humdrum . automatically replaced Active expression.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humActive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The ","text":"","code":"evalActive(humdrumR, dataTypes = \"D\")  activeAtomic(humdrumR, dataTypes = \"D\", sep = \", \", nullChar = FALSE)  getActive(humdrumR)  setActive(humdrumR, expr)  setActiveFields(humdrumR, fieldnames)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humActive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The ","text":"humdrumR humdrumRclass data object. dataTypes dataTypes humdrum records include. Legal values 'G', 'L', '', 'M', 'D', 'd',  combination single string (e.g., \"LIM\"). (see humdrum table documentation Fields section explanation.).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humActive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The ","text":"active expression can changed commands setActive $ operator. handy way quickly look different fields data. Active expression often just name field: instance, default value Token. However, can actually complex expression evaluates within humdrum table. instance, Active expression : paste0(Token, \" \", Record), automatically print Token record number pasted .","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humActive.html","id":"null-data","dir":"Reference","previous_headings":"","what":"Null data","title":"The ","text":"HumdrumR identifies \"null data\" based active field. Anywhere current active field evaluates \".\" NA considered Null data, assigned type \"d\" internal humdrum table. work, often data tokens null one field, another field. example, load **kern data, token like \"4r\" (quarter-note rest) token NA call pitch, NA call recip (rhythm). Now, change active field Pitch Rhythm see different numbers (non-null) data tokens: ntokens(kerndata$Pitch) vs ntokens(kerndata$Rhythm) return different numbers! (different number rest tokens.) Similarly, apply functions/expressions data (using withinHumdrum example), result depend active field : , get different numbers ! (Assuming rests data.) case even though -expression actually using Pitch Rhythm fields! Pitch active field rest tokens null-data ignored!","code":"kerndata <- readHumdrum(...)  within(kerndata$Token,        Pitch  <- pitch(.),        Rhythm <- recip(.)) -> kerndata with(kerndata$Pitch, length(.)) with(kerndata$Rhythm, length(.))"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humAssignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Assigning new fields — humAssignment","title":"Assigning new fields — humAssignment","text":"R objects often ways assigning new values part object using indexing operators. HumdrumR objects objects different, allow us insert new fields !","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humAssignment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assigning new fields — humAssignment","text":"new field can inserted humdrumR object two ways: field can copied one humdrumR object another internal humdrum tables exact number data tokens (.e., rows). might seem obvious, mechanism useful can used rename existing fields within humdrumR object (explained ). vector list vectors can inserted new fields humdrumR object. Fields can assigned using two syntaxes: \"fieldname\" can whatever want , course!","code":"humdata['fieldname'] <- x # or humdata[c('fieldname1', 'fieldname2')] <- x humdata$fieldname <- x"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humAssignment.html","id":"humdrumr-gt-humdrumr-assignment-","dir":"Reference","previous_headings":"","what":"humdrumR -> humdrumR assignment:","title":"Assigning new fields — humAssignment","text":"Assigning field one humdrumR object another works like : (Recall two objects must exact numbers data tokens.) name(s) given indexing expression left side assignment (.e., humdata[c('name1', 'name2')] humdata$name) used new field names. fields extracted right side assignment little trickier: fields right-side humdrumR object named $ResultN$ ($N$ integer) copied descending order named fields left side. $ResultN$ fields right side, fields used current Active formula (right side) copied instead. system might seem odd first, useful combination withinHumdrum function. withinHumdrum creates new fields, calls $Result1 ... Result2 ... ResultN$. Since output withinHumdrum always input except new \"Result\" fields, Byou can use humdrumR <- humdrumR assignment immediately assign result fields meaningful names original object. makes sense example: Calls within.humdrumR()  keep producing new result fields. one result fields, can assign multiple fields using []<- syntax: #' IMPORTANT NOTE!: \"ResultN\" fields humdrumR object assign assign field names simply dropped. nice, often might proceed serious resultd steps, want last one (two). want keep result fields either re-assign (.e., keep \"ResultN\" names) assign names using ->[c(\"name1\", \"name2\", \"name3\", ...)] syntax.","code":"humdata <- within(humdata, Semits <- semits(Token))"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humAssignment.html","id":"humdrumr-gt-vector-assignment-","dir":"Reference","previous_headings":"","what":"humdrumR -> vector assignment:","title":"Assigning new fields — humAssignment","text":"can assign vectors lists vectors straight humdrumR object. vectors must length number data tokens target object. provide multiple vectors assign (list data.frame vectors) must provide number fieldnames using ->[c('name1', 'name2', ...)] syntax. can use ntokens command determine right length vectors need!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humCensus.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate records and tokens in a humdrumR corpus — humCensus","title":"Tabulate records and tokens in a humdrumR corpus — humCensus","text":"census one humdrumR's summary functions, used tabulate raw size humdrumR corpus. census takes humdrumR object returns humCensus table. dataType argument controls types records tabulate: legal values 'G', 'L', '', 'M', 'D', 'd' combination (e.g., \"LIM\"). default \"D\".","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humCensus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate records and tokens in a humdrumR corpus — humCensus","text":"","code":"census(humdrumR, dataTypes = \"GLIMDd\", by = \"Filename\", removeEmpty = FALSE)  census(humdata)[i]  # S3 method for humCensus print(censusTable, showEach = TRUE, screenWidth = options(\"width\")$width - 10L)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humCensus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate records and tokens in a humdrumR corpus — humCensus","text":"humdrumR humdrumR object dataTypes character string length 1. character string length 1. Must field humdrumR object.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humCensus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tabulate records and tokens in a humdrumR corpus — humCensus","text":"humCensus table five columns information: Records total number records. Tokens total number tokens. (unique) number unique tokens Characters total numder characters. includes humdrum control characters like * !!. (per token) simply Characters / Tokens, indicating mean length token. humCensus table one row file corpus. Rows labeled file's corresponding number (humTable's File field) name (Filename field). addition, humCensus object printed, totals across files printed well---(unique) (per token) across files calculated across files well, summed.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humCensus.html","id":"indexing","dir":"Reference","previous_headings":"","what":"Indexing","title":"Tabulate records and tokens in a humdrumR corpus — humCensus","text":"Rows humCensus object can selected single argument : e.g., censusTable[]. numeric, corresponding rows selected ordinally (File number). character string, string mached regular expression file names. formula, right-hand side formula evaluated within table---evaluates logical vector, files selected accordingly. instance, censusTable[~Tokens > 100] select files 100 tokens. ('(unique)' '(per token)' columns must referred names enclosed \\``---example, censusTable~\\verb(unique)\\ > 100` return files 100 unique tokens. drop argument also available. TRUE, plain data.table::data.table() returned.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humCoercion.html","id":null,"dir":"Reference","previous_headings":"","what":"humdrumR Coercion. — humCoercion","title":"humdrumR Coercion. — humCoercion","text":"Many users may wish work humdrum data without using [humdrumR:humdrumR][humdrumR] API, instead using basic R data types. purpose, humdrumRclass data objects can coerced basic R data types.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humCoercion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"humdrumR Coercion. — humCoercion","text":"","code":"# S4 method for humdrumR as.vector(x, mode = \"any\")  as.lines(   humdrumR,   dataTypes = \"GLIMDd\",   fieldname = NULL,   alignColumns = FALSE,   padPaths = FALSE,   padder = \".\" )  # S3 method for humdrumR as.matrix(x, dataTypes = \"Dd\", alignColumns = TRUE, padder = NA)  # S4 method for humdrumR as.data.frame(x, dataTypes = \"Dd\", alignColumns = TRUE, padder = NA)  # S4 method for humdrumR as.data.frame(x, dataTypes = \"Dd\", alignColumns = TRUE, padder = NA)  as.matrices(humdrumR, dataTypes = \"Dd\", alignColumns = TRUE, padder = NA)  as.data.frames(humdrumR, dataTypes = \"Dd\", alignColumns = TRUE, padder = NA)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humCoercion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"humdrumR Coercion. — humCoercion","text":"mode mode argument '', can single character string naming atomic mode---output coerced mode (possible). dataTypes types humdrum records include. Legal values 'G', 'L', '', 'M', 'D', 'd' combination (e.g., \"LIM\"). (see humdrum table documentation Fields section explanation.). padder atomic value length one. par.files pad.paths true, padder argument used fill desired gaps. pad.files logical (default TRUE). pieces humdrumRclass corpus fewer [humdrumR:humTable][spines/columns] maximum, padded padder argument (par.files == TRUE) error occur (pad.files == FALSE)? Note \"padded\" points represented original humdrum data. pad.paths logical spine path splits ('*^') occur humdrumR data, padded padder argument (par.files == TRUE) error occur (pad.paths == FALSE)? Note \"padded\" points represented original humdrum data. field(s) field argument NULL, can instead character string matching humdrumRclass object's fields. , fields extracted instead Active expression. calls .vector .data.frame, one field can extracted. However, calls .matrix, multiple fields can extraced---fields returned third matrix dimension, field forming one rectangular slice.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humCoercion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"humdrumR Coercion. — humCoercion","text":".vector(humdata) evaluates humdrumRclass object's Active expression, (attempts) force result vector mode. method essentially wrapper evalActive. .matrix(humdata also evaluates humdrumRclass object's Active expression, wraps matrix dimensions c([humdrumR:humSize][nrow(humdata), ncol(humdata)]). Note \"[humdrumR:humTable][Columns]\" humdrum data necesarily spines. .data.frame(humdata) first calls .matrix converts matrix data.frame. .data.table(humdata) first calls .matrix converts matrix data.table::data.table(). .matrices, .data.frames, .data.tables call .matrix/.data.frame/.data.table individual file humdrumRclass corpus, returning list matices/data.frames/data.tables.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Spines vs Paths vs Columns — humColumns","title":"Spines vs Paths vs Columns — humColumns","text":"humdrum syntax, data placed \"spines,\" \"columns\" spreadsheet. \"column\" refers tab-delineated group values. \"Spines\" can single column, may (time) split multiple columns, can turn split , using \"*^\" interpretation token. reverse can happen well, two columns merging single column, using \"v\" token. means , humdrum data first glance looks like simple two-dimensional table, actually flexible tree structure. spines split merge, total number columns can change piece, creating \"ragged\" edge. Another similar issue corpus humdrum files may varying numbers spines/columns, pieces. (\"Global\" comment/reference records also special case, always single value, even interspersed multi-column local records.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humColumns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spines vs Paths vs Columns — humColumns","text":"humdrumR, spines, columns, spine paths work like . First , actually assume slightly strict version humdrum syntax: assume spines appear beginning file (headed exlusive interpretations like \"**kern\") can never merge . Thus, humdrum file read humdrumR must end fewer columns starts. Spine merges (\"*v\") can happen within spine paths originally split spine. extra-strict specification spine paths humdrum syntax , fortunately, something informally followed humdrum datasets. strict spine-path definition makes everything work fairly simply: Within piece, spines appear beginning piece \"true\" spines rest piece, numbered left right, starting 1L. local token, value Spine field integer indicating \"true\" spines belongs ---global tokens NA value Spine field, considerd belong spine. spine path splits (\"*^\" main spines form subspines, call Paths. Every spine's paths numbered, right left, starting 0L. spine splits 0Ls Path field.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humColumns.html","id":"columns","dir":"Reference","previous_headings":"","what":"Columns","title":"Spines vs Paths vs Columns — humColumns","text":"useful sometimes turn humdrum data true two dimensional structure, ragged edges. (always requires removing global records.) order , maintaining sensible relationship spine spine paths, imagine humdrum data padded complete, non-ragged 2d table. instance, given file pad like: example, Spine, Path, Column values shown data. can see Column used indicate \"padded\" position data token.","code":"**kern  **kern A       E *^      * A       C       E G       B       D *v      *v      * A       C         *-      *- **kern   _P       **kern A        _P       E *^       _P       * A        C        E G        B        D *v       *v       * A        _P       C         *-       _P       *-  ########################################## 1        1        2        Spine 0        1        0        Path 1        2        3        Column"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humFormulae.html","id":null,"dir":"Reference","previous_headings":"","what":"------------------------------------------->             NEEDS DOCUMENTATION             <-------------------------------------------\nStandard humdrumR formulae. — humFormulae","title":"------------------------------------------->             NEEDS DOCUMENTATION             <-------------------------------------------\nStandard humdrumR formulae. — humFormulae","text":"humdrumR predefines ()humdrum command combinations, R formulae lists formulae.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humFormulae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"------------------------------------------->             NEEDS DOCUMENTATION             <-------------------------------------------\nStandard humdrumR formulae. — humFormulae","text":"","code":"ditto"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humFormulae.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"------------------------------------------->             NEEDS DOCUMENTATION             <-------------------------------------------\nStandard humdrumR formulae. — humFormulae","text":"object class list length 3.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humFormulae.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"------------------------------------------->             NEEDS DOCUMENTATION             <-------------------------------------------\nStandard humdrumR formulae. — humFormulae","text":"ditto calls fillThru() across pieces/spines/paths, replicating classic humdrum toolkit ditto command.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humInterpretations.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize humdrum corpus interpretations. — humInterpretations","title":"Summarize humdrum corpus interpretations. — humInterpretations","text":"interpretations one humdrumR's summary functions, used summarize interpretations pieces humdrumR corpus, including exclusive (**) tandem (*) interpretations. returns humInterpretations argument prints informative table terminal.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humInterpretations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize humdrum corpus interpretations. — humInterpretations","text":"","code":"interpretations(humdrumR)  # S3 method for humInterpretations print(interps, showEach = TRUE, screenWidth = options(\"width\")$width - 10L)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humInterpretations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize humdrum corpus interpretations. — humInterpretations","text":"humdrumR humdrumR data object.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humInterpretations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize humdrum corpus interpretations. — humInterpretations","text":"row output table represents single piece corus. first column ((n)) indicates unique \"exclusive pattern\" associated piece---exclusive patterns tallied bottom. remaining columns indicate many interpretation (indicated column name) appear piece. tandem interpretations, counts returned format Total.Unique.Spines: Total: total instances interpretation, across spines. Unique: number unique versions interpretation. Spines: number spines interpretation appears . example, consider following file: file, several tandem key interpretations, humdrumR call Key. tabulation interpretations return Key column value 6.3.2 file: 6 six key interpretations total. 3 three unique keys: *C:, *e: *G:. 2 key interpretations occur two spines.","code":"**kern   **kern   **silbe    *C:      *C:         *      c        e        La      d        f        la      e        g        la    *e:      *e:         *     f#       d#        la      g        e         _      a        b         _    *G:      *G:         *     f#        a       doo      g        b       wop     *-       *-        *-"},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humMerge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two (or more) humdrumR datasets — humMerge","title":"Merge two (or more) humdrumR datasets — humMerge","text":"------------------------------------------->             NEEDS DOCUMENTATION             <-------------------------------------------","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humMerge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two (or more) humdrumR datasets — humMerge","text":"","code":"mergeHumdrum(...)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humMeter.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for analyzing rhythm and meter. — humMeter","title":"Tools for analyzing rhythm and meter. — humMeter","text":"humdrumR includes number useful functions working rhythms meter.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humMeter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tools for analyzing rhythm and meter. — humMeter","text":"rhythmDecompose() decomposes series rhythms terms desired pulses. rhythmOffset() Calculates cummulative offset durations starting point.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humMetric.html","id":null,"dir":"Reference","previous_headings":"","what":"Meter class — humMetric","title":"Meter class — humMetric","text":"Meter class","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humPipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Piping humdrumR data — humPipe","title":"Piping humdrumR data — humPipe","text":"infix operators make possible use [humdrumR:--Humdrum][()Humdrum] functions piping style, similar | (pipe) unix-style terminals, |>  pipe operator. R package magrittr.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humPipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Piping humdrumR data — humPipe","text":"","code":"humdrumR %hum>% formula  humdrumR %hum<% formula  humdrumR %humT% formula  e1 %s>% e2  list %hums>% formula  list %hums<% formula  list %humsT% formula  list %hums[]% formula"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humPipe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Piping humdrumR data — humPipe","text":"key function [withinHumdrum][withinHumdrum] always returns new [humdrumR][humdrumR] data object. Thus, can always send output [withinHumdrum][withinHumdrum] back new call [withinHumdrum][withinHumdrum]. exactly %hum>% : left-hand side, input [humdrumR][humdrumR] object, right-hand side suitable arguments [withinHumdrum][withinHumdrum] (.e., formula, function, list formulae, functions, named arguments). can chain call another call %hum>% [withinHumdrum][withinHumdrum] arguments. %hum<% acts way %hum>% except calls [withHumdrum][withinHumdrum]. Since [withHumdrum][withinHumdrum] return [humdrumR][humdrumR], output piped (using %hum>% %hum<%). Thus, \\%hum<\\% used last step pipe---want extract last step pipe data's [humdrumR:humtable][Humdrum Table] normal vector list R data. ' \\%humT\\% creates \"T\" pipe, applying desired expression keeping result---unaltered humdrumR input object returned. works simply replacing ~ doplot~ call [withinHumdrum][withinHumdrum]. purpose option, want apply expressions side effects, instance, plotting. %hum[]% similar %hum>% except apply formulae right-hand side using [humdrumR][filterHumdrum]. Thus, can used filter/index [humdrumR][humdrumR] data object fly.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humPipe.html","id":"plural-pipes","dir":"Reference","previous_headings":"","what":"Plural pipes","title":"Piping humdrumR data — humPipe","text":"R often apply function list data. \"Plural pipes\" expand idea piping: take list data pipe element list expression/function. plural pipe versions singular pipe operator. Just add \"s\" make plural: |> (singular) : %s>% (plural); %hum>% (singular) : %hums>% (plural); %hum<% (singular) : %hums<% (plural); %humT% (singular) : %humsT% (plural); %hum[]% (singular) : %hums[]% (plural); Note: %s>% expansion \\> pipe operator, makes use clever meta-programming---guarantee always behave way might like!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humPipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Piping humdrumR data — humPipe","text":"","code":"humdata <- readHumdrum('path*.krn') #> Finding and reading files... #> \tREpath-pattern 'path*.krn' matches 0 text files in 1 directory. #> Zero files read from disk. #> No files to validate.  humdata %hum>% ~table(.) #> humdrumR error in: #> \ttryCatch(withCallingHandlers({ #>   NULL #>   saveRDS(do.call(do.call, c(readRDS( #>     \"/home/nat/.tmp/Rtmpdij6pd/callr-fun-3daf19237390\"), list(envir = .GlobalEnv, #>     quote = TRUE)), envir = .GlobalEnv, quote = TRUE), file = \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\") #>   flush(stdout()) #>   flush(stderr()) #>   NULL #>   invisible() #> }, error = function(e) { #>   { #>     callr_data <- as.environment(\"tools:callr\")$`__callr_data__` #>     err <- callr_data$err #>     assign(\".Traceback\", .traceback(4), envir = callr_data) #>     dump.frames(\"__callr_dump__\") #>     assign(\".Last.dump\", .GlobalEnv$`__callr_dump__`, envir = callr_data) #>     rm(\"__callr_dump__\", envir = .GlobalEnv) #>     e$call <- deparse(conditionCall(e), nlines = 6) #>     e2 <- err$new_error(conditionMessage(e), call. = conditionCall(e)) #>     class(e2) <- c(\"callr_remote_error\", class(e2)) #>     e2$error <- e #>     calls <- sys.calls() #>     dcframe <- which(vapply(calls, function(x) length(x) >= 1 && identical(x[[ #>       1]], quote(do.call)), logical(1)))[1] #>     if (!is.na(dcframe)) e2$`_ignore` <- list(c(1, dcframe + 1L)) #>     e2$`_pid` <- Sys.getpid() #>     e2$`_timestamp` <- Sys.time() #>     if (inherits(e, \"rlib_error_2_0\")) e2$parent <- e$parent #>     e2 <- err$add_trace_back(e2, embed = FALSE) #>     saveRDS(list(\"error\", e2), file = paste0( #>       \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\", \".error\")) #>   } #> }, interrupt = function(e) { #>   { #>     callr_data <- as.environment(\"tools:callr\")$`__callr_data__` #>     err <- callr_data$err #>     assign(\".Traceback\", .traceback(4), envir = callr_data) #>     dump.frames(\"__callr_dump__\") #>     assign(\".Last.dump\", .GlobalEnv$`__callr_dump__`, envir = callr_data) #>     rm(\"__callr_dump__\", envir = .GlobalEnv) #>     e$call <- deparse(conditionCall(e), nlines = 6) #>     e2 <- err$new_error(conditionMessage(e), call. = conditionCall(e)) #>     class(e2) <- c(\"callr_remote_error\", class(e2)) #>     e2$error <- e #>     calls <- sys.calls() #>     dcframe <- which(vapply(calls, function(x) length(x) >= 1 && identical(x[[ #>       1]], quote(do.call)), logical(1)))[1] #>     if (!is.na(dcframe)) e2$`_ignore` <- list(c(1, dcframe + 1L)) #>     e2$`_pid` <- Sys.getpid() #>     e2$`_timestamp` <- Sys.time() #>     if (inherits(e, \"rlib_error_2_0\")) e2$parent <- e$parent #>     e2 <- err$add_trace_back(e2, embed = FALSE) #>     saveRDS(list(\"error\", e2), file = paste0( #>       \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\", \".error\")) #>   } #> }, callr_message = function(e) { #>   try(signalCondition(e)) #> }), error = function(e) { #>   NULL #>   try(stop(e)) #> }, interrupt = function(e) { #>   NULL #>   e #> }) #> \t -> tryCatchList(expr, classes, parentenv, handlers) #> \t -> tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), names[nh], #> parentenv, handlers[[nh]]) #> \t -> doTryCatch(return(expr), name, parentenv, handler) #> \t -> tryCatchList(expr, names[-nh], parentenv, handlers[-nh]) #> \t -> tryCatchOne(expr, names, parentenv, handlers[[1L]]) #> \t -> doTryCatch(return(expr), name, parentenv, handler) #> \t -> withCallingHandlers({ #>   NULL #>   saveRDS(do.call(do.call, c(readRDS( #>     \"/home/nat/.tmp/Rtmpdij6pd/callr-fun-3daf19237390\"), list(envir = .GlobalEnv, #>     quote = TRUE)), envir = .GlobalEnv, quote = TRUE), file = \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\") #>   flush(stdout()) #>   flush(stderr()) #>   NULL #>   invisible() #> }, error = function(e) { #>   { #>     callr_data <- as.environment(\"tools:callr\")$`__callr_data__` #>     err <- callr_data$err #>     assign(\".Traceback\", .traceback(4), envir = callr_data) #>     dump.frames(\"__callr_dump__\") #>     assign(\".Last.dump\", .GlobalEnv$`__callr_dump__`, envir = callr_data) #>     rm(\"__callr_dump__\", envir = .GlobalEnv) #>     e$call <- deparse(conditionCall(e), nlines = 6) #>     e2 <- err$new_error(conditionMessage(e), call. = conditionCall(e)) #>     class(e2) <- c(\"callr_remote_error\", class(e2)) #>     e2$error <- e #>     calls <- sys.calls() #>     dcframe <- which(vapply(calls, function(x) length(x) >= 1 && identical(x[[ #>       1]], quote(do.call)), logical(1)))[1] #>     if (!is.na(dcframe)) e2$`_ignore` <- list(c(1, dcframe + 1L)) #>     e2$`_pid` <- Sys.getpid() #>     e2$`_timestamp` <- Sys.time() #>     if (inherits(e, \"rlib_error_2_0\")) e2$parent <- e$parent #>     e2 <- err$add_trace_back(e2, embed = FALSE) #>     saveRDS(list(\"error\", e2), file = paste0( #>       \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\", \".error\")) #>   } #> }, interrupt = function(e) { #>   { #>     callr_data <- as.environment(\"tools:callr\")$`__callr_data__` #>     err <- callr_data$err #>     assign(\".Traceback\", .traceback(4), envir = callr_data) #>     dump.frames(\"__callr_dump__\") #>     assign(\".Last.dump\", .GlobalEnv$`__callr_dump__`, envir = callr_data) #>     rm(\"__callr_dump__\", envir = .GlobalEnv) #>     e$call <- deparse(conditionCall(e), nlines = 6) #>     e2 <- err$new_error(conditionMessage(e), call. = conditionCall(e)) #>     class(e2) <- c(\"callr_remote_error\", class(e2)) #>     e2$error <- e #>     calls <- sys.calls() #>     dcframe <- which(vapply(calls, function(x) length(x) >= 1 && identical(x[[ #>       1]], quote(do.call)), logical(1)))[1] #>     if (!is.na(dcframe)) e2$`_ignore` <- list(c(1, dcframe + 1L)) #>     e2$`_pid` <- Sys.getpid() #>     e2$`_timestamp` <- Sys.time() #>     if (inherits(e, \"rlib_error_2_0\")) e2$parent <- e$parent #>     e2 <- err$add_trace_back(e2, embed = FALSE) #>     saveRDS(list(\"error\", e2), file = paste0( #>       \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\", \".error\")) #>   } #> }, callr_message = function(e) { #>   try(signalCondition(e)) #> }) #> \t -> saveRDS(do.call(do.call, c(readRDS( #>   \"/home/nat/.tmp/Rtmpdij6pd/callr-fun-3daf19237390\"), list(envir = .GlobalEnv, #>   quote = TRUE)), envir = .GlobalEnv, quote = TRUE), file = \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\") #> \t -> do.call(do.call, c(readRDS(\"/home/nat/.tmp/Rtmpdij6pd/callr-fun-3daf19237390\"), #> list(envir = .GlobalEnv, quote = TRUE)), envir = .GlobalEnv, quote = TRUE) #> \t -> <function(what, args, quote = FALSE, envir = parent.frame()) { #>   if (!is.list(args)) stop(\"second argument must be a list\") #>   if (quote) args <- lapply(args, enquote) #>   .Internal(do.call(what, args, envir)) #> }>(base::quote(<function(..., crayon_enabled, crayon_colors, pkgdown_internet) { #>   options(crayon.enabled = crayon_enabled, crayon.colors = crayon_colors, #>     pkgdown.internet = pkgdown_internet) #>   pkgdown::build_site(...) #> }>), base::quote(<list: pkg = <pkgdown>, examples = TRUE, run_dont_run = FALSE, #>   seed = 1014, lazy = FALSE, ...>), envir = base::quote(<environment>), quote = base::quote( #>   TRUE)) #> \t -> <function(..., crayon_enabled, crayon_colors, pkgdown_internet) { #>   options(crayon.enabled = crayon_enabled, crayon.colors = crayon_colors, #>     pkgdown.internet = pkgdown_internet) #>   pkgdown::build_site(...) #> }>(pkg = base::quote(<pkgdown>), examples = base::quote(TRUE), run_dont_run = base::quote( #>   FALSE), seed = base::quote(1014), lazy = base::quote(FALSE), override = base::quote( #>   <list: >), install = base::quote(FALSE), preview = base::quote(FALSE), #> new_process = base::quote(FALSE), devel = base::quote(FALSE), crayon_enabled = base::quote( #>   TRUE), crayon_colors = base::quote(256L), pkgdown_internet = base::quote(TRUE)) #> \t -> pkgdown::build_site(...) #> \t -> build_site_local(pkg = pkg, examples = examples, run_dont_run = run_dont_run, #>   seed = seed, lazy = lazy, override = override, preview = preview, devel = devel) #> \t -> build_reference(pkg, lazy = lazy, examples = examples, run_dont_run = run_dont_run, #>   seed = seed, override = override, preview = FALSE, devel = devel) #> \t -> purrr::map(topics, build_reference_topic, pkg = pkg, lazy = lazy, examples_env = examples_env, #>   run_dont_run = run_dont_run) #> \t -> .f(.x[[i]], ...) #> \t -> withCallingHandlers(data_reference_topic(topic, pkg, examples_env = examples_env, #>   run_dont_run = run_dont_run), error = function(err) { #>   msg <- c(paste0(\"Failed to parse Rd in \", topic$file_in), i = err$message) #>   abort(msg, parent = err) #> }) #> \t -> data_reference_topic(topic, pkg, examples_env = examples_env, run_dont_run = run_dont_run) #> \t -> run_examples(tags$tag_examples[[1]], env = if (is.null(examples_env) #> ) NULL else new.env(parent = examples_env), topic = tools::file_path_sans_ext( #>   topic$file_in), run_dont_run = run_dont_run) #> \t -> highlight_examples(code, topic, env = env) #> \t -> downlit::evaluate_and_highlight(code, fig_save = fig_save_topic, env = child_env( #>   env), output_handler = evaluate::new_output_handler(value = pkgdown_print)) #> \t -> evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #> \t -> evaluate_call(expr, parsed$src[[i]], envir = envir, enclos = enclos, debug = debug, #> last = i == length(out), use_try = stop_on_error != 2L, keep_warning = keep_warning, #> keep_message = keep_message, output_handler = output_handler, include_timing = include_timing) #> \t -> timing_fn(handle(ev <- withCallingHandlers(withVisible(eval(expr, envir, enclos)), #> warning = wHandler, error = eHandler, message = mHandler))) #> \t -> handle(ev <- withCallingHandlers(withVisible(eval(expr, envir, enclos)), #> warning = wHandler, error = eHandler, message = mHandler)) #> \t -> try(f, silent = TRUE) #> \t -> tryCatch(expr, error = function(e) { #>   call <- conditionCall(e) #>   if (!is.null(call)) { #>     if (identical(call[[1L]], quote(doTryCatch))) call <- sys.call(-4L) #>     dcall <- deparse(call, nlines = 1L) #>     prefix <- paste(\"Error in\", dcall, \": \") #>     LONG <- 75L #>     sm <- strsplit(conditionMessage(e), \"\\n\")[[1L]] #>     w <- 14L + nchar(dcall, type = \"w\") + nchar(sm[1L], type = \"w\") #>     if (is.na(w)) w <- 14L + nchar(dcall, type = \"b\") + nchar(sm[1L], type = \"b\") #>     if (w > LONG) prefix <- paste0(prefix, \"\\n  \") #>   } else prefix <- \"Error : \" #>   msg <- paste0(prefix, conditionMessage(e), \"\\n\") #>   .Internal(seterrmessage(msg[1L])) #>   if (!silent && isTRUE(getOption(\"show.error.messages\"))) { #>     cat(msg, file = outFile) #>     .Internal(printDeferredWarnings()) #>   } #>   invisible(structure(msg, class = \"try-error\", condition = e)) #> }) #> \t -> tryCatchList(expr, classes, parentenv, handlers) #> \t -> tryCatchOne(expr, names, parentenv, handlers[[1L]]) #> \t -> doTryCatch(return(expr), name, parentenv, handler) #> \t -> withCallingHandlers(withVisible(eval(expr, envir, enclos)), warning = wHandler, #> error = eHandler, message = mHandler) #> \t -> withVisible(eval(expr, envir, enclos)) #> \t -> eval(expr, envir, enclos) #> \t -> eval(expr, envir, enclos) #> \t -> humdata %hum>% (~ table(.)) #> \t #> Error: In the call `%hum>%`(humdrumR = _), the argument humdrumR must be a humdrumR object.  humdata %hum>%      c(by~Spine, do ~ table(.)) %hum>%      c(mfcol ~ c(2,2), doplot~barplot(.)) #> humdrumR error in: #> \ttryCatch(withCallingHandlers({ #>   NULL #>   saveRDS(do.call(do.call, c(readRDS( #>     \"/home/nat/.tmp/Rtmpdij6pd/callr-fun-3daf19237390\"), list(envir = .GlobalEnv, #>     quote = TRUE)), envir = .GlobalEnv, quote = TRUE), file = \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\") #>   flush(stdout()) #>   flush(stderr()) #>   NULL #>   invisible() #> }, error = function(e) { #>   { #>     callr_data <- as.environment(\"tools:callr\")$`__callr_data__` #>     err <- callr_data$err #>     assign(\".Traceback\", .traceback(4), envir = callr_data) #>     dump.frames(\"__callr_dump__\") #>     assign(\".Last.dump\", .GlobalEnv$`__callr_dump__`, envir = callr_data) #>     rm(\"__callr_dump__\", envir = .GlobalEnv) #>     e$call <- deparse(conditionCall(e), nlines = 6) #>     e2 <- err$new_error(conditionMessage(e), call. = conditionCall(e)) #>     class(e2) <- c(\"callr_remote_error\", class(e2)) #>     e2$error <- e #>     calls <- sys.calls() #>     dcframe <- which(vapply(calls, function(x) length(x) >= 1 && identical(x[[ #>       1]], quote(do.call)), logical(1)))[1] #>     if (!is.na(dcframe)) e2$`_ignore` <- list(c(1, dcframe + 1L)) #>     e2$`_pid` <- Sys.getpid() #>     e2$`_timestamp` <- Sys.time() #>     if (inherits(e, \"rlib_error_2_0\")) e2$parent <- e$parent #>     e2 <- err$add_trace_back(e2, embed = FALSE) #>     saveRDS(list(\"error\", e2), file = paste0( #>       \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\", \".error\")) #>   } #> }, interrupt = function(e) { #>   { #>     callr_data <- as.environment(\"tools:callr\")$`__callr_data__` #>     err <- callr_data$err #>     assign(\".Traceback\", .traceback(4), envir = callr_data) #>     dump.frames(\"__callr_dump__\") #>     assign(\".Last.dump\", .GlobalEnv$`__callr_dump__`, envir = callr_data) #>     rm(\"__callr_dump__\", envir = .GlobalEnv) #>     e$call <- deparse(conditionCall(e), nlines = 6) #>     e2 <- err$new_error(conditionMessage(e), call. = conditionCall(e)) #>     class(e2) <- c(\"callr_remote_error\", class(e2)) #>     e2$error <- e #>     calls <- sys.calls() #>     dcframe <- which(vapply(calls, function(x) length(x) >= 1 && identical(x[[ #>       1]], quote(do.call)), logical(1)))[1] #>     if (!is.na(dcframe)) e2$`_ignore` <- list(c(1, dcframe + 1L)) #>     e2$`_pid` <- Sys.getpid() #>     e2$`_timestamp` <- Sys.time() #>     if (inherits(e, \"rlib_error_2_0\")) e2$parent <- e$parent #>     e2 <- err$add_trace_back(e2, embed = FALSE) #>     saveRDS(list(\"error\", e2), file = paste0( #>       \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\", \".error\")) #>   } #> }, callr_message = function(e) { #>   try(signalCondition(e)) #> }), error = function(e) { #>   NULL #>   try(stop(e)) #> }, interrupt = function(e) { #>   NULL #>   e #> }) #> \t -> tryCatchList(expr, classes, parentenv, handlers) #> \t -> tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), names[nh], #> parentenv, handlers[[nh]]) #> \t -> doTryCatch(return(expr), name, parentenv, handler) #> \t -> tryCatchList(expr, names[-nh], parentenv, handlers[-nh]) #> \t -> tryCatchOne(expr, names, parentenv, handlers[[1L]]) #> \t -> doTryCatch(return(expr), name, parentenv, handler) #> \t -> withCallingHandlers({ #>   NULL #>   saveRDS(do.call(do.call, c(readRDS( #>     \"/home/nat/.tmp/Rtmpdij6pd/callr-fun-3daf19237390\"), list(envir = .GlobalEnv, #>     quote = TRUE)), envir = .GlobalEnv, quote = TRUE), file = \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\") #>   flush(stdout()) #>   flush(stderr()) #>   NULL #>   invisible() #> }, error = function(e) { #>   { #>     callr_data <- as.environment(\"tools:callr\")$`__callr_data__` #>     err <- callr_data$err #>     assign(\".Traceback\", .traceback(4), envir = callr_data) #>     dump.frames(\"__callr_dump__\") #>     assign(\".Last.dump\", .GlobalEnv$`__callr_dump__`, envir = callr_data) #>     rm(\"__callr_dump__\", envir = .GlobalEnv) #>     e$call <- deparse(conditionCall(e), nlines = 6) #>     e2 <- err$new_error(conditionMessage(e), call. = conditionCall(e)) #>     class(e2) <- c(\"callr_remote_error\", class(e2)) #>     e2$error <- e #>     calls <- sys.calls() #>     dcframe <- which(vapply(calls, function(x) length(x) >= 1 && identical(x[[ #>       1]], quote(do.call)), logical(1)))[1] #>     if (!is.na(dcframe)) e2$`_ignore` <- list(c(1, dcframe + 1L)) #>     e2$`_pid` <- Sys.getpid() #>     e2$`_timestamp` <- Sys.time() #>     if (inherits(e, \"rlib_error_2_0\")) e2$parent <- e$parent #>     e2 <- err$add_trace_back(e2, embed = FALSE) #>     saveRDS(list(\"error\", e2), file = paste0( #>       \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\", \".error\")) #>   } #> }, interrupt = function(e) { #>   { #>     callr_data <- as.environment(\"tools:callr\")$`__callr_data__` #>     err <- callr_data$err #>     assign(\".Traceback\", .traceback(4), envir = callr_data) #>     dump.frames(\"__callr_dump__\") #>     assign(\".Last.dump\", .GlobalEnv$`__callr_dump__`, envir = callr_data) #>     rm(\"__callr_dump__\", envir = .GlobalEnv) #>     e$call <- deparse(conditionCall(e), nlines = 6) #>     e2 <- err$new_error(conditionMessage(e), call. = conditionCall(e)) #>     class(e2) <- c(\"callr_remote_error\", class(e2)) #>     e2$error <- e #>     calls <- sys.calls() #>     dcframe <- which(vapply(calls, function(x) length(x) >= 1 && identical(x[[ #>       1]], quote(do.call)), logical(1)))[1] #>     if (!is.na(dcframe)) e2$`_ignore` <- list(c(1, dcframe + 1L)) #>     e2$`_pid` <- Sys.getpid() #>     e2$`_timestamp` <- Sys.time() #>     if (inherits(e, \"rlib_error_2_0\")) e2$parent <- e$parent #>     e2 <- err$add_trace_back(e2, embed = FALSE) #>     saveRDS(list(\"error\", e2), file = paste0( #>       \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\", \".error\")) #>   } #> }, callr_message = function(e) { #>   try(signalCondition(e)) #> }) #> \t -> saveRDS(do.call(do.call, c(readRDS( #>   \"/home/nat/.tmp/Rtmpdij6pd/callr-fun-3daf19237390\"), list(envir = .GlobalEnv, #>   quote = TRUE)), envir = .GlobalEnv, quote = TRUE), file = \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\") #> \t -> do.call(do.call, c(readRDS(\"/home/nat/.tmp/Rtmpdij6pd/callr-fun-3daf19237390\"), #> list(envir = .GlobalEnv, quote = TRUE)), envir = .GlobalEnv, quote = TRUE) #> \t -> <function(what, args, quote = FALSE, envir = parent.frame()) { #>   if (!is.list(args)) stop(\"second argument must be a list\") #>   if (quote) args <- lapply(args, enquote) #>   .Internal(do.call(what, args, envir)) #> }>(base::quote(<function(..., crayon_enabled, crayon_colors, pkgdown_internet) { #>   options(crayon.enabled = crayon_enabled, crayon.colors = crayon_colors, #>     pkgdown.internet = pkgdown_internet) #>   pkgdown::build_site(...) #> }>), base::quote(<list: pkg = <pkgdown>, examples = TRUE, run_dont_run = FALSE, #>   seed = 1014, lazy = FALSE, ...>), envir = base::quote(<environment>), quote = base::quote( #>   TRUE)) #> \t -> <function(..., crayon_enabled, crayon_colors, pkgdown_internet) { #>   options(crayon.enabled = crayon_enabled, crayon.colors = crayon_colors, #>     pkgdown.internet = pkgdown_internet) #>   pkgdown::build_site(...) #> }>(pkg = base::quote(<pkgdown>), examples = base::quote(TRUE), run_dont_run = base::quote( #>   FALSE), seed = base::quote(1014), lazy = base::quote(FALSE), override = base::quote( #>   <list: >), install = base::quote(FALSE), preview = base::quote(FALSE), #> new_process = base::quote(FALSE), devel = base::quote(FALSE), crayon_enabled = base::quote( #>   TRUE), crayon_colors = base::quote(256L), pkgdown_internet = base::quote(TRUE)) #> \t -> pkgdown::build_site(...) #> \t -> build_site_local(pkg = pkg, examples = examples, run_dont_run = run_dont_run, #>   seed = seed, lazy = lazy, override = override, preview = preview, devel = devel) #> \t -> build_reference(pkg, lazy = lazy, examples = examples, run_dont_run = run_dont_run, #>   seed = seed, override = override, preview = FALSE, devel = devel) #> \t -> purrr::map(topics, build_reference_topic, pkg = pkg, lazy = lazy, examples_env = examples_env, #>   run_dont_run = run_dont_run) #> \t -> .f(.x[[i]], ...) #> \t -> withCallingHandlers(data_reference_topic(topic, pkg, examples_env = examples_env, #>   run_dont_run = run_dont_run), error = function(err) { #>   msg <- c(paste0(\"Failed to parse Rd in \", topic$file_in), i = err$message) #>   abort(msg, parent = err) #> }) #> \t -> data_reference_topic(topic, pkg, examples_env = examples_env, run_dont_run = run_dont_run) #> \t -> run_examples(tags$tag_examples[[1]], env = if (is.null(examples_env) #> ) NULL else new.env(parent = examples_env), topic = tools::file_path_sans_ext( #>   topic$file_in), run_dont_run = run_dont_run) #> \t -> highlight_examples(code, topic, env = env) #> \t -> downlit::evaluate_and_highlight(code, fig_save = fig_save_topic, env = child_env( #>   env), output_handler = evaluate::new_output_handler(value = pkgdown_print)) #> \t -> evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #> \t -> evaluate_call(expr, parsed$src[[i]], envir = envir, enclos = enclos, debug = debug, #> last = i == length(out), use_try = stop_on_error != 2L, keep_warning = keep_warning, #> keep_message = keep_message, output_handler = output_handler, include_timing = include_timing) #> \t -> timing_fn(handle(ev <- withCallingHandlers(withVisible(eval(expr, envir, enclos)), #> warning = wHandler, error = eHandler, message = mHandler))) #> \t -> handle(ev <- withCallingHandlers(withVisible(eval(expr, envir, enclos)), #> warning = wHandler, error = eHandler, message = mHandler)) #> \t -> try(f, silent = TRUE) #> \t -> tryCatch(expr, error = function(e) { #>   call <- conditionCall(e) #>   if (!is.null(call)) { #>     if (identical(call[[1L]], quote(doTryCatch))) call <- sys.call(-4L) #>     dcall <- deparse(call, nlines = 1L) #>     prefix <- paste(\"Error in\", dcall, \": \") #>     LONG <- 75L #>     sm <- strsplit(conditionMessage(e), \"\\n\")[[1L]] #>     w <- 14L + nchar(dcall, type = \"w\") + nchar(sm[1L], type = \"w\") #>     if (is.na(w)) w <- 14L + nchar(dcall, type = \"b\") + nchar(sm[1L], type = \"b\") #>     if (w > LONG) prefix <- paste0(prefix, \"\\n  \") #>   } else prefix <- \"Error : \" #>   msg <- paste0(prefix, conditionMessage(e), \"\\n\") #>   .Internal(seterrmessage(msg[1L])) #>   if (!silent && isTRUE(getOption(\"show.error.messages\"))) { #>     cat(msg, file = outFile) #>     .Internal(printDeferredWarnings()) #>   } #>   invisible(structure(msg, class = \"try-error\", condition = e)) #> }) #> \t -> tryCatchList(expr, classes, parentenv, handlers) #> \t -> tryCatchOne(expr, names, parentenv, handlers[[1L]]) #> \t -> doTryCatch(return(expr), name, parentenv, handler) #> \t -> withCallingHandlers(withVisible(eval(expr, envir, enclos)), warning = wHandler, #> error = eHandler, message = mHandler) #> \t -> withVisible(eval(expr, envir, enclos)) #> \t -> eval(expr, envir, enclos) #> \t -> eval(expr, envir, enclos) #> \t -> humdata %hum>% c(by ~ Spine, do ~ table(.)) %hum>% c(mfcol ~ c(2, 2), doplot ~ #>   barplot(.)) #> \t -> is.humdrumR((x)) #> \t -> humdata %hum>% c(by ~ Spine, do ~ table(.)) #> \t #> Error: In the call `%hum>%`(humdrumR = _), the argument humdrumR must be a humdrumR object.       humdata %hum>%      c(by ~ Spine, do ~ table(.)) %hum<%      (do ~ sort(.))     #> humdrumR error in: #> \ttryCatch(withCallingHandlers({ #>   NULL #>   saveRDS(do.call(do.call, c(readRDS( #>     \"/home/nat/.tmp/Rtmpdij6pd/callr-fun-3daf19237390\"), list(envir = .GlobalEnv, #>     quote = TRUE)), envir = .GlobalEnv, quote = TRUE), file = \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\") #>   flush(stdout()) #>   flush(stderr()) #>   NULL #>   invisible() #> }, error = function(e) { #>   { #>     callr_data <- as.environment(\"tools:callr\")$`__callr_data__` #>     err <- callr_data$err #>     assign(\".Traceback\", .traceback(4), envir = callr_data) #>     dump.frames(\"__callr_dump__\") #>     assign(\".Last.dump\", .GlobalEnv$`__callr_dump__`, envir = callr_data) #>     rm(\"__callr_dump__\", envir = .GlobalEnv) #>     e$call <- deparse(conditionCall(e), nlines = 6) #>     e2 <- err$new_error(conditionMessage(e), call. = conditionCall(e)) #>     class(e2) <- c(\"callr_remote_error\", class(e2)) #>     e2$error <- e #>     calls <- sys.calls() #>     dcframe <- which(vapply(calls, function(x) length(x) >= 1 && identical(x[[ #>       1]], quote(do.call)), logical(1)))[1] #>     if (!is.na(dcframe)) e2$`_ignore` <- list(c(1, dcframe + 1L)) #>     e2$`_pid` <- Sys.getpid() #>     e2$`_timestamp` <- Sys.time() #>     if (inherits(e, \"rlib_error_2_0\")) e2$parent <- e$parent #>     e2 <- err$add_trace_back(e2, embed = FALSE) #>     saveRDS(list(\"error\", e2), file = paste0( #>       \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\", \".error\")) #>   } #> }, interrupt = function(e) { #>   { #>     callr_data <- as.environment(\"tools:callr\")$`__callr_data__` #>     err <- callr_data$err #>     assign(\".Traceback\", .traceback(4), envir = callr_data) #>     dump.frames(\"__callr_dump__\") #>     assign(\".Last.dump\", .GlobalEnv$`__callr_dump__`, envir = callr_data) #>     rm(\"__callr_dump__\", envir = .GlobalEnv) #>     e$call <- deparse(conditionCall(e), nlines = 6) #>     e2 <- err$new_error(conditionMessage(e), call. = conditionCall(e)) #>     class(e2) <- c(\"callr_remote_error\", class(e2)) #>     e2$error <- e #>     calls <- sys.calls() #>     dcframe <- which(vapply(calls, function(x) length(x) >= 1 && identical(x[[ #>       1]], quote(do.call)), logical(1)))[1] #>     if (!is.na(dcframe)) e2$`_ignore` <- list(c(1, dcframe + 1L)) #>     e2$`_pid` <- Sys.getpid() #>     e2$`_timestamp` <- Sys.time() #>     if (inherits(e, \"rlib_error_2_0\")) e2$parent <- e$parent #>     e2 <- err$add_trace_back(e2, embed = FALSE) #>     saveRDS(list(\"error\", e2), file = paste0( #>       \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\", \".error\")) #>   } #> }, callr_message = function(e) { #>   try(signalCondition(e)) #> }), error = function(e) { #>   NULL #>   try(stop(e)) #> }, interrupt = function(e) { #>   NULL #>   e #> }) #> \t -> tryCatchList(expr, classes, parentenv, handlers) #> \t -> tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), names[nh], #> parentenv, handlers[[nh]]) #> \t -> doTryCatch(return(expr), name, parentenv, handler) #> \t -> tryCatchList(expr, names[-nh], parentenv, handlers[-nh]) #> \t -> tryCatchOne(expr, names, parentenv, handlers[[1L]]) #> \t -> doTryCatch(return(expr), name, parentenv, handler) #> \t -> withCallingHandlers({ #>   NULL #>   saveRDS(do.call(do.call, c(readRDS( #>     \"/home/nat/.tmp/Rtmpdij6pd/callr-fun-3daf19237390\"), list(envir = .GlobalEnv, #>     quote = TRUE)), envir = .GlobalEnv, quote = TRUE), file = \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\") #>   flush(stdout()) #>   flush(stderr()) #>   NULL #>   invisible() #> }, error = function(e) { #>   { #>     callr_data <- as.environment(\"tools:callr\")$`__callr_data__` #>     err <- callr_data$err #>     assign(\".Traceback\", .traceback(4), envir = callr_data) #>     dump.frames(\"__callr_dump__\") #>     assign(\".Last.dump\", .GlobalEnv$`__callr_dump__`, envir = callr_data) #>     rm(\"__callr_dump__\", envir = .GlobalEnv) #>     e$call <- deparse(conditionCall(e), nlines = 6) #>     e2 <- err$new_error(conditionMessage(e), call. = conditionCall(e)) #>     class(e2) <- c(\"callr_remote_error\", class(e2)) #>     e2$error <- e #>     calls <- sys.calls() #>     dcframe <- which(vapply(calls, function(x) length(x) >= 1 && identical(x[[ #>       1]], quote(do.call)), logical(1)))[1] #>     if (!is.na(dcframe)) e2$`_ignore` <- list(c(1, dcframe + 1L)) #>     e2$`_pid` <- Sys.getpid() #>     e2$`_timestamp` <- Sys.time() #>     if (inherits(e, \"rlib_error_2_0\")) e2$parent <- e$parent #>     e2 <- err$add_trace_back(e2, embed = FALSE) #>     saveRDS(list(\"error\", e2), file = paste0( #>       \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\", \".error\")) #>   } #> }, interrupt = function(e) { #>   { #>     callr_data <- as.environment(\"tools:callr\")$`__callr_data__` #>     err <- callr_data$err #>     assign(\".Traceback\", .traceback(4), envir = callr_data) #>     dump.frames(\"__callr_dump__\") #>     assign(\".Last.dump\", .GlobalEnv$`__callr_dump__`, envir = callr_data) #>     rm(\"__callr_dump__\", envir = .GlobalEnv) #>     e$call <- deparse(conditionCall(e), nlines = 6) #>     e2 <- err$new_error(conditionMessage(e), call. = conditionCall(e)) #>     class(e2) <- c(\"callr_remote_error\", class(e2)) #>     e2$error <- e #>     calls <- sys.calls() #>     dcframe <- which(vapply(calls, function(x) length(x) >= 1 && identical(x[[ #>       1]], quote(do.call)), logical(1)))[1] #>     if (!is.na(dcframe)) e2$`_ignore` <- list(c(1, dcframe + 1L)) #>     e2$`_pid` <- Sys.getpid() #>     e2$`_timestamp` <- Sys.time() #>     if (inherits(e, \"rlib_error_2_0\")) e2$parent <- e$parent #>     e2 <- err$add_trace_back(e2, embed = FALSE) #>     saveRDS(list(\"error\", e2), file = paste0( #>       \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\", \".error\")) #>   } #> }, callr_message = function(e) { #>   try(signalCondition(e)) #> }) #> \t -> saveRDS(do.call(do.call, c(readRDS( #>   \"/home/nat/.tmp/Rtmpdij6pd/callr-fun-3daf19237390\"), list(envir = .GlobalEnv, #>   quote = TRUE)), envir = .GlobalEnv, quote = TRUE), file = \"/home/nat/.tmp/Rtmpdij6pd/callr-res-3daf16c3946c9\") #> \t -> do.call(do.call, c(readRDS(\"/home/nat/.tmp/Rtmpdij6pd/callr-fun-3daf19237390\"), #> list(envir = .GlobalEnv, quote = TRUE)), envir = .GlobalEnv, quote = TRUE) #> \t -> <function(what, args, quote = FALSE, envir = parent.frame()) { #>   if (!is.list(args)) stop(\"second argument must be a list\") #>   if (quote) args <- lapply(args, enquote) #>   .Internal(do.call(what, args, envir)) #> }>(base::quote(<function(..., crayon_enabled, crayon_colors, pkgdown_internet) { #>   options(crayon.enabled = crayon_enabled, crayon.colors = crayon_colors, #>     pkgdown.internet = pkgdown_internet) #>   pkgdown::build_site(...) #> }>), base::quote(<list: pkg = <pkgdown>, examples = TRUE, run_dont_run = FALSE, #>   seed = 1014, lazy = FALSE, ...>), envir = base::quote(<environment>), quote = base::quote( #>   TRUE)) #> \t -> <function(..., crayon_enabled, crayon_colors, pkgdown_internet) { #>   options(crayon.enabled = crayon_enabled, crayon.colors = crayon_colors, #>     pkgdown.internet = pkgdown_internet) #>   pkgdown::build_site(...) #> }>(pkg = base::quote(<pkgdown>), examples = base::quote(TRUE), run_dont_run = base::quote( #>   FALSE), seed = base::quote(1014), lazy = base::quote(FALSE), override = base::quote( #>   <list: >), install = base::quote(FALSE), preview = base::quote(FALSE), #> new_process = base::quote(FALSE), devel = base::quote(FALSE), crayon_enabled = base::quote( #>   TRUE), crayon_colors = base::quote(256L), pkgdown_internet = base::quote(TRUE)) #> \t -> pkgdown::build_site(...) #> \t -> build_site_local(pkg = pkg, examples = examples, run_dont_run = run_dont_run, #>   seed = seed, lazy = lazy, override = override, preview = preview, devel = devel) #> \t -> build_reference(pkg, lazy = lazy, examples = examples, run_dont_run = run_dont_run, #>   seed = seed, override = override, preview = FALSE, devel = devel) #> \t -> purrr::map(topics, build_reference_topic, pkg = pkg, lazy = lazy, examples_env = examples_env, #>   run_dont_run = run_dont_run) #> \t -> .f(.x[[i]], ...) #> \t -> withCallingHandlers(data_reference_topic(topic, pkg, examples_env = examples_env, #>   run_dont_run = run_dont_run), error = function(err) { #>   msg <- c(paste0(\"Failed to parse Rd in \", topic$file_in), i = err$message) #>   abort(msg, parent = err) #> }) #> \t -> data_reference_topic(topic, pkg, examples_env = examples_env, run_dont_run = run_dont_run) #> \t -> run_examples(tags$tag_examples[[1]], env = if (is.null(examples_env) #> ) NULL else new.env(parent = examples_env), topic = tools::file_path_sans_ext( #>   topic$file_in), run_dont_run = run_dont_run) #> \t -> highlight_examples(code, topic, env = env) #> \t -> downlit::evaluate_and_highlight(code, fig_save = fig_save_topic, env = child_env( #>   env), output_handler = evaluate::new_output_handler(value = pkgdown_print)) #> \t -> evaluate::evaluate(code, child_env(env), new_device = TRUE, output_handler = output_handler) #> \t -> evaluate_call(expr, parsed$src[[i]], envir = envir, enclos = enclos, debug = debug, #> last = i == length(out), use_try = stop_on_error != 2L, keep_warning = keep_warning, #> keep_message = keep_message, output_handler = output_handler, include_timing = include_timing) #> \t -> timing_fn(handle(ev <- withCallingHandlers(withVisible(eval(expr, envir, enclos)), #> warning = wHandler, error = eHandler, message = mHandler))) #> \t -> handle(ev <- withCallingHandlers(withVisible(eval(expr, envir, enclos)), #> warning = wHandler, error = eHandler, message = mHandler)) #> \t -> try(f, silent = TRUE) #> \t -> tryCatch(expr, error = function(e) { #>   call <- conditionCall(e) #>   if (!is.null(call)) { #>     if (identical(call[[1L]], quote(doTryCatch))) call <- sys.call(-4L) #>     dcall <- deparse(call, nlines = 1L) #>     prefix <- paste(\"Error in\", dcall, \": \") #>     LONG <- 75L #>     sm <- strsplit(conditionMessage(e), \"\\n\")[[1L]] #>     w <- 14L + nchar(dcall, type = \"w\") + nchar(sm[1L], type = \"w\") #>     if (is.na(w)) w <- 14L + nchar(dcall, type = \"b\") + nchar(sm[1L], type = \"b\") #>     if (w > LONG) prefix <- paste0(prefix, \"\\n  \") #>   } else prefix <- \"Error : \" #>   msg <- paste0(prefix, conditionMessage(e), \"\\n\") #>   .Internal(seterrmessage(msg[1L])) #>   if (!silent && isTRUE(getOption(\"show.error.messages\"))) { #>     cat(msg, file = outFile) #>     .Internal(printDeferredWarnings()) #>   } #>   invisible(structure(msg, class = \"try-error\", condition = e)) #> }) #> \t -> tryCatchList(expr, classes, parentenv, handlers) #> \t -> tryCatchOne(expr, names, parentenv, handlers[[1L]]) #> \t -> doTryCatch(return(expr), name, parentenv, handler) #> \t -> withCallingHandlers(withVisible(eval(expr, envir, enclos)), warning = wHandler, #> error = eHandler, message = mHandler) #> \t -> withVisible(eval(expr, envir, enclos)) #> \t -> eval(expr, envir, enclos) #> \t -> eval(expr, envir, enclos) #> \t -> humdata %hum>% c(by ~ Spine, do ~ table(.)) %hum<% (do ~ sort(.)) #> \t -> is.humdrumR((x)) #> \t -> humdata %hum>% c(by ~ Spine, do ~ table(.)) #> \t #> Error: In the call `%hum>%`(humdrumR = _), the argument humdrumR must be a humdrumR object."},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humReference.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize reference records in a humdrumR corpus — humReference","title":"Summarize reference records in a humdrumR corpus — humReference","text":"reference one humdrumR's summary functions, used tabulate reference records present humdrumR corpus. reference takes humdrumR object returns humReference table. Alternatively, reference can take character string, check known reference codes print information matching codes. instance, reference('OTL') returns description standard humdrum !!!OTL reference record (original title metadata).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humReference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize reference records in a humdrumR corpus — humReference","text":"","code":"reference(x)  reference('OTL')  reference(humdata)  # S3 method for humReference [(refTable, i, j, drop = FALSE)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humReference.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize reference records in a humdrumR corpus — humReference","text":"humReference table one column reference code appears humdrumR corpus. Since reference records can long (much print one screen), humdrum files can multiple type reference code (instance multiple composers annotated \"!!!COM\"), default, humReference prints number type reference record appear file. However, one type reference code present humReference table, complete reference records code printed file. Likewise, one file present table, file's complete reference records printed. Thus, want see actualy reference records, try indexing humReference table one column row (see ). humReference table one row file corpus. Rows labeled file's corresponding number (humTable's File field) name (Filename field). addition, humReference object printed, three different summary totals printed reference code: indicates many files corpus least one example code . Sum indicates total number reference code appear corpus, including multiple appearances one file (like multiple \"!!!COM\" records). Finally, Unique tabulates number unique tokens reference code---corpus hase two unique composers (encoded \"!!!COM\"), Unique total 2.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humReference.html","id":"indexing","dir":"Reference","previous_headings":"","what":"Indexing","title":"Summarize reference records in a humdrumR corpus — humReference","text":"humReference tables can indexed much like base R [data.frames][base::data.frame()],  two arguments: (rows) andj(columns). Ifiorjarenumeric, select rows columns respectively, ordinally. iis acharacter, matched regular expression filenames corpus. jis acharacter`, partially matched column names. drop argument also available. TRUE, plain [data.table][data.table::data.table()] returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humSize.html","id":null,"dir":"Reference","previous_headings":"","what":"humdrumR size and shape — humSize","title":"humdrumR size and shape — humSize","text":"functions can used quickly get basic information size \"shape\" humdrumRclass corpus. details, use census function. HumdrumR objects can divided \"subcorpora.\" anySubcorpora namesSubcorpora functions tell us subcorpora , , called.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"humdrumR size and shape — humSize","text":"","code":"nrecords(humdrumR, dataTypes = \"D\")  ntokens(humdrumR, dataTypes = \"D\")  npieces(humdrumR)  anySubcorpora(humdrumR)  namesSubcorpora(humdrumR)  nfiles(humdrumR)  # S4 method for humdrumR length(x)  # S4 method for humdrumR nrow(x)  is.empty(humdrumR)  anyPaths(humdrumR)  anyStops(humdrumR)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humSize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"humdrumR size and shape — humSize","text":"common base R methods defined synonyms humdrumR-specific sizing functions: length(humdata) equivalent npieces(humdata); nrow(humdata) shortand nrecords(., dataTypes = 'LIMDd') (.e., local records ). ncol(humdata) returns maximum value Column field---maximum number tab-delineated columns humdrum files (irrespective Spines/Paths). results nrow ncol match dimensions matrices/data.frames produced calls .matrix/.data.frame. dim(humdata) returns c(nrow(humdata), ncol(humdata)), usual. .empty(humdata) asks ntokens(humdata, dataTypes = 'D') == 0L.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humSpines.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize spines in humdrum dataset. — humSpines","title":"Summarize spines in humdrum dataset. — humSpines","text":"spines one humdrumR's summary functions, used summarize spines spine paths pieces humdrumR corpus.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humSpines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize spines in humdrum dataset. — humSpines","text":"","code":"spines(humdrumR)  # S3 method for humSpines [(spines, i, j)  # S3 method for humSpines print(spineTable, showEach = TRUE)"},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize humdrumR corpora — humSummary","title":"Summarize humdrumR corpora — humSummary","text":"humdrumR includes number built functions creating quick summaries humdrumR corpora:","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize humdrumR corpora — humSummary","text":"","code":"# S4 method for humdrumR summary(object, ...)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humSummary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize humdrumR corpora — humSummary","text":"census Tabulates raw size humdrumR corpus. reference Tabulates reference records (metadata) file. spines Tabulates number spines spine paths files corpus. interpretations Tabulates types exclusive tandem interpretations corpus. sections Tabulates formal data (*>) corpus. function takes humdrumR object returns special class data.table. summary method humdrumR objects calls functions prints condensed version .","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Humdrum Tables — humTable","title":"Humdrum Tables — humTable","text":"humdrumR package, fundamental data structure called Humdrum Table. humdrum table encodes information collection one humdrum-syntax files single data.table (data.table \"enhanced\" version R's standard data.frame). Humdrum tables stored \"inside\" every humdrumRclass object work , various humdrumR functions allow study manipulate . want directly access humdrum table within humdrumRclass object, use getHumtab function. getHumtab extracts humdrum table humdrumRclass object.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Humdrum Tables — humTable","text":"","code":"getHumtab(humdrumR, dataTypes = c(\"G\", \"L\", \"I\", \"M\", \"D\", \"d\"))  getFields(humdrumR, fieldnames = NULL, dataTypes = \"D\")"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Humdrum Tables — humTable","text":"humdrumR humdrumR object. dataTypes character vector. Specifies types data tokens/records extract. See humTable documentation /humdrum syntax vignette clarification! dataTypes, values can : \"G\": global comments \"L\": local comments \"\": interpretations \"M\": barlines \"D\": non-null data \"d\": null data Multiple types can specified vector, smooshed single string: e.g., \"GLIMD\". fieldnames (character) vector names partially matched field names humdrum table. NULL (default), Token field returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Humdrum Tables — humTable","text":"humdrum table, row represents single \"token\" original humdrum data. Even multistops---tokens separated spaces---broken onto rows. Meanwhile, column humdrum table represents single piece information associated token, call field. Throughout documentation, keep mind \"token\" refers row humdrum table \"field\" refers column: Token = Row Field = Column","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humTable.html","id":"fields-","dir":"Reference","previous_headings":"","what":"Fields:","title":"Humdrum Tables — humTable","text":"five types fields humdrum table: Data fields Structure fields Interpretation fields Formal fields Reference fields first created call readHumdrum every humdrum table least nineteen fields: one data field (Token), two interpretation fields (Tandem Exclusive), three formal fields, fifteen structure fields. Additional interpretation reference fields may present depending content humdrum file(s), users can create additional data fields assigning object.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humTable.html","id":"data-fields-","dir":"Reference","previous_headings":"","what":"Data fields:","title":"Humdrum Tables — humTable","text":"Data fields used describe individual data points humdrum data (opposed groups points). Every humdrum table starts data field called Token, contains character strings representing original strings read humdrum files. Users can create many additional data fields like. Every call withinHumdrum generates one N new data fields named Result1, Result2, ..., ResultN. fields can renamed using $<- operator.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humTable.html","id":"structure-fields-","dir":"Reference","previous_headings":"","what":"Structure fields:","title":"Humdrum Tables — humTable","text":"Every humdrum table starts fifteen Structure fields, describe data token \"located\" original humdrum data: file, spine, record, etc. See vignette humdrum syntax fully understand terms . File info: Filename :: character unique name humdrum file. may include appended path one file name read different directories (see readHumdrum docs). Filepath :: character full file name (always includes full path). Label :: character label specified call readHumdrum, associated particular readHumdrum \"REpath-pattern.\" label specified, patterns just labeled \"_n\", \"n\" number pattern. (Labels can also created merging two humdrumR objects.) File :: integer unique number associated file (ordered alphabetically, starting 1). Piece :: integer number specifying number piece corpus. identical File field except one piece read file. Location info: Spine :: integer spine, numbered (left--right) starting 1. field NA wherever Global == TRUE. Path :: integer \"spine path.\" time *^ spine path split occurs humdrum data, right side split becomes new \"path.\" original path numbered 0 additional paths numbered integers right. (spine path splits, Path field zeros.) field always NA Global == TRUE. Read humdrum columns documentation thorough explanation spine paths. Column :: integer tab-delineated column humdrum file---irrespective Spine/Paths---, numbered starting 1. field always NA Global == TRUE. See explanation columns humdrumR. Record :: integer record (.e., line) number original file. NData :: integer data record enumeration file, starting 1. Stop :: integer token multistop token, numbered starting 1. files multistops, Stop field 1s. field always NA Global == TRUE. Global :: logical token come global record (opposed local record)? Global == TRUE, Spine, Column, Stop fields always NA. Token info: Type :: character type record ? \"D\" = non-null data \"d\" = null data \"\" = interpretation \"M\" = measure/barline \"L\" = local comment \"G\" = global comment. \"P\" = null \"non-tokens\" (see humdrumR columns documentation explanation.) Null :: logical active data field null? See detailed discussion , section documentation called \"Null Data.\" Filter :: logical record/token filtered ?","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humTable.html","id":"interpretation-fields-","dir":"Reference","previous_headings":"","what":"Interpretation fields:","title":"Humdrum Tables — humTable","text":"Interpretation fields describe interpretation metadata humdrum file(s). Humdrum interpretations tokens \"carry forward\" data points , unless cancelled subsequent interpretation. (See humdrum syntax vignette detailed explanation.) humdrum data must exclusive interpretation humdrum tables always Exclusive (:: character) field indicating exclusive interpretation associated token/row active field. Humdrum data may, may , include additional tandem interpretations. universal rule parsing tandem intepretations impossible, ) tandem interpretations can \"overwrite\" B) users can create tandem interpretations. best can cases identify tandem interpretations appeared previously spine (counting recent first). previous interpretations encoded single character string Tandem field (see extractTandem() docs details). working non-standard interpretations, users can parse Tandem field using extractTandem() function. tandem interpretations occur file, Tandem field full empty strings (\"\"). Fortunately, many tandem interpretations widely used standardized, interpretations known humdrumR. Recognized interpretations (*clefG4 *k[b-]) automatically parsed fields call readHumdrum(). See readHumdrum() documentation details.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humTable.html","id":"formal-fields-","dir":"Reference","previous_headings":"","what":"Formal fields:","title":"Humdrum Tables — humTable","text":"Formal fields indicate musical sections, time windows within piece, including formal designations (\"verse\", \"chorus\", etc.) measures/bars. Humdrum data may may include formal metadata fields, indicated token \"*>\". Classified formal marks put fields matching name. Unclassified formal marks placed field called Formal default. Nested formal categories appended underscore number level descent: Formal_1, Formal_2, ..., Formal_N. part section given name lower hierarchical level, field simply empty (\"\") point. Humdrum data may, may , also include barlines (tokens beginning \"=\"). Humdrum tables always include three formal fields related barlines: Bar :: integer many barline records (single double) passed token? \"=\" tokens occur file, Bar zeros. Note field independent whether barlines labeled numbers humdrum file! DoubleBar :: integer many double-barline records passed token? \"==\" tokens occur file, DoubleBar zeros. BarLabel :: character characters occur barline-token initial \"=\" \"==\". include \"-\" common \"implied barline token \"=-\", repeat tokens (like \"=:||\"), also explicit bar numbers. Note Bar field always enumerate every bar record, measure-number labels humdrum data (appear BarLabel field) may weird things like skipping numbers, repeating numbers, suffixes (e.g., \"19a\"). barline tokens appear file, BarLabel empty strings (\"\").","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humTable.html","id":"reference-fields-","dir":"Reference","previous_headings":"","what":"Reference fields:","title":"Humdrum Tables — humTable","text":"Reference fields describe Reference Records humdrum data. Every reference record (records beginning \"!!!\") humdrum file corpus read readHumdrum parsed field named reference code: \"XXX\" \"!!!XXX\". Reference tokens identical throughout humdrum piece. reference code appears one file another, field NA file code. reference records appear files read readHumdrum, reference fields created. Examples common reference records \"!!!COM:\" (composer) \"!!!OTL:\" (original title). humdrum data records end COM OTL fields humdrum table.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humTable.html","id":"null-data-","dir":"Reference","previous_headings":"","what":"Null Data:","title":"Humdrum Tables — humTable","text":"humdrum syntax, requirement every spine-path contains data every record. Rather, spines often padded null tokens. cases, entire records may padded null tokens. type humdrum record uses different null token: Intepretation: * Comment: ! Barline: = Data: . Null tokens humdrum table identified logical Null field. Null field set humdrum table created (readHumdrum) updated everytime new active field set. Null set TRUE wherever, either active field character data token single \".\", \"!\", \"=\", \"*\"; active field NA (including NA_character_). parallel Null field, null data tokens (\".\") identified record type: \"d\". updates/changes Null field also propogated Type field---.e., setting Type == d wherever data record Null. important/useful withinHumdrum routines , default, applied \"D\" data, ignoring \"d\". Whenever print export humdrumRclass object, null data active field (.e., Null == TRUE) print \".\". Thus, working numeric data, NA values, NA values print \".\".","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humTable.html","id":"reshaping-","dir":"Reference","previous_headings":"","what":"Reshaping:","title":"Humdrum Tables — humTable","text":"Breaking complex syntax humdrum data \"flat\" structure humdrum table, every single token one line data.table, makes humdrum data easier analyze. course, thanks structure fields, can easily regroup reform original humdrum data use structure data (like spines) analyses. However, cases, might want work humdrum data different structure \"shape.\" HumdrumR several options \"collapsing\" tokens within humdrum tables, \"folding\" different parts data new fields, otherwise reshaping humdrum data basic R data structures might prefer.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humValidation.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate humdrum files — humValidation","title":"Validate humdrum files — humValidation","text":"function checks files violations humdrum syntax.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humValidation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate humdrum files — humValidation","text":"","code":"validateHumdrum(   ...,   contains = NULL,   recursive = FALSE,   errorReport.path = NULL )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humValidation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate humdrum files — humValidation","text":"recursive logical. TRUE, final part search pattern (.e., file search) searched recursively sub directories. errorReport.path character. directory path , NULL, error report written file 'humdrumR_syntaxErrorReport_date.txt'. addition, files errors written directory ('errorMarkup' appended names), errors annotated inline. patterns character vector. Search pattern(s) identifying files (see [readHumdrum][readHumdrum]). files list character strings, representing record file.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humWindows.html","id":null,"dir":"Reference","previous_headings":"","what":"Create arbitrary ","title":"Create arbitrary ","text":"Create arbitrary \"windows\" across vectors.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humWindows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create arbitrary ","text":"","code":"windows(   x,   open,   close = ~Next(open) - 1L,   start = 1,   end = length(x),   nest = FALSE,   depth = NULL,   boundaries = NULL,   min_length = 1L,   max_length = Inf )  nested(x, open, close, depth = 1L)  hop(along, pattern = 1, start = 1L, end = length(along))  windowApply(   x,   func = c,   windows,   ...,   passOutside = FALSE,   reference = x,   rebuild = TRUE,   leftEdge = TRUE )  applyNgram(   n = 2,   vecs,   f = c,   by = NULL,   pad = TRUE,   fill = NA,   splat = !is.null(by),   ... )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumDispatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression method dispatch and function application — humdrumDispatch","title":"Regular expression method dispatch and function application — humdrumDispatch","text":"humdrumR regular-expression method dispatch system simple system making new functions can smartly applied variety character strings. Humdrum dispatch works like normal R method dispatch, instead dispatching specific methods based class (integer, character, etc.) dispatches based regular expressions. addition, exclusive interpretations can used guide dispatch.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumDispatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression method dispatch and function application — humdrumDispatch","text":"","code":"humdrumDispatch(   x,   dispatchDF,   Exclusive = NULL,   funcName = NULL,   regexApply = TRUE,   multiDispatch = FALSE,   ...,   outputClass = \"character\" )  exclusiveDispatch(   x,   dispatchDF,   Exclusive,   regexApply = TRUE,   outputClass = \"character\",   inPlace = FALSE,   ... )  makeDispatchDF(...)  makeHumdrumDispatcher(   ...,   funcName = \"humdrum-dispatch\",   outputClass = \"character\",   args = alist() )  # S3 method for humdrumDispatch print(x)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumDispatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regular expression method dispatch and function application — humdrumDispatch","text":"dispatchDF data.frame describes function called regex input. (See details). Exclusive Defaults NULL. NULL, regexes used dispatch. multiDispatch logical, length 1. FALSE (default) \"best\" regex/exclusive match dispatched Exclusive segment. TRUE, differenet functions can dispatched within input vector. ... Arguments pass dispatch functions. outputClass Character string: default output class function return. Generally, make sense, dispatched functions return type, explicitly indicate outputClass argument. Dispatch functions also vectorized. str input character string, dispatch called.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumDispatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regular expression method dispatch and function application — humdrumDispatch","text":"Many humdrumR functions fact, humdrum-dispatch functions: example, tonalInterval.character(). call tonalInterval('ee-'), function recognize input string token  **kern representation, call appropriate parser. instead call tonalInterval(''), function recognize input string token **solfa representation, call appropriate parser .","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumDispatch.html","id":"dispatchdf","dir":"Reference","previous_headings":"","what":"dispatchDF","title":"Regular expression method dispatch and function application — humdrumDispatch","text":"dispatchDF must data.table::data.table() created using makeDispatchDF function. makeDispatchDF takes one arguments, list three components (ordered, nameed): character vector exclusive interpretations. (Specify \"\" want exclusive dispatch). regular expression (character string) function can generate regular expression, accepts ... arguments time dispatch. function dispatch.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumDispatch.html","id":"makehumdrumdispatcher","dir":"Reference","previous_headings":"","what":"makeHumdrumDispatcher","title":"Regular expression method dispatch and function application — humdrumDispatch","text":"makeHumdrumDispatcher function creates new function automatically performs humdrum-dispatch. number important humdrumR functions created makeHumdrumDispatcher: tonalInterval.character diatonicSet.character tertianSet.character rhythmInterval.character","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumDispatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regular expression method dispatch and function application — humdrumDispatch","text":"","code":"u <- c('A', 'B', 'CD', 'E', 'F', 'gh', 'L', 'KX') l <- c('a', 'b', 'cd', 'e', 'f', 'gh', 'l', 'kx')  lowercasefunc <- \\(x) 5L - nchar(x)  humdrumDispatch(l, outputClass = 'integer',                 makeDispatchDF(list('any', '[a-z]+',  lowercasefunc),                                list('any', '[A-Z]+',  nchar))) #> [1] 4 4 3 4 4 3 4 3 #> attr(,\"dispatch\") #> attr(,\"dispatch\")$Original #> [1] \"a\"  \"b\"  \"cd\" \"e\"  \"f\"  \"gh\" \"l\"  \"kx\" #>  #> attr(,\"dispatch\")$Regexes #>   [a-z]+  #> \"[a-z]+\"  #>  #> attr(,\"dispatch\")$Segments #> [1] 1 #>  #> attr(,\"dispatch\")$Exclusives #> [1] \"any\" #>   # lowercasefunc will be called on l, nchar on u"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumPitch.html","id":null,"dir":"Reference","previous_headings":"","what":"humdrumR and pitch — humdrumPitch","title":"humdrumR and pitch — humdrumPitch","text":"humdrumR includes number intertwined data structures, associated functions, representing manipulating musical pitch information.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumPitch.html","id":"tonality","dir":"Reference","previous_headings":"","what":"Tonality","title":"humdrumR and pitch — humdrumPitch","text":"four data types extensively used humdrumR encode/process tonal musical information: integers --- used encode \"line--fifths\" tonal information tonalInterval --- embeds line--fifth tonal integers alongside octave cent information encode tonal pitch representations (solfege, intervals, letternames, etc.) diatonicSet --- combines line--fifth tonal integer representations represent diatonic tonality, including alterations basic diatonic scale(s). tertianSet --- extension diatonicSet used encode  tertian diatonic harmonies. detailed explanation theory specifics humdrumR's treatment tonality, see Tonality humdrumR vignette.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumPitch.html","id":"atonality","dir":"Reference","previous_headings":"","what":"Atonality","title":"humdrumR and pitch — humdrumPitch","text":"SECTION INCOMPLETE addition, xxx data types used encode non-tonal (atonal) pitch information. integers --- used encode semitones (well MIDI numbers). xxx --- sets? xxx --- 12-tone rows?","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumR.html","id":null,"dir":"Reference","previous_headings":"","what":"humdrumR — humdrumR","title":"humdrumR — humdrumR","text":"humdrumR toolkit analysis data encoded humdrum syntax. humdrum syntax incredibly flexible, powerful, scheme encoding musical data. Tens thousands musical scores (musical data) encoded humdrum syntax, many available online repositories KernScores.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"humdrumR — humdrumR","text":"humdrumR intended modernized replacement original humdrum toolkit, levaraging power R give us enprecedented power manipulate analyze humdrum data using concise, expressive syntax.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumR.html","id":"package-design","dir":"Reference","previous_headings":"","what":"Package design","title":"humdrumR — humdrumR","text":"package humdrumR XXX main components: represent humdrum data R, humdrumR S4 class, core component humdrum table. create humdrumR data, sophisticated humdrum data parser: readHumdrum. humdrumR data can also written back humdrum-syntax text files using writeHumdrum. filter \"index\" humdrumR data, subset.humdrumR() function, can also called variety short hands using R's standard indexing operators: [] [[]]. manipulate modify humdrumR data, within methods humdrumR objects. facilate development functions work humdrum tokens---simple character strings packed information---, useful API call regular-expression dispatch system. Several modules representing manipulating musical pitch information, including core tonalInterval class represent tonal pitch. module representing manipulating musical rhythm information, core rhythmInterval class represent rhythms.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumRclass.html","id":null,"dir":"Reference","previous_headings":"","what":"HumdrumR class — humdrumRclass","title":"HumdrumR class — humdrumRclass","text":"S4 class basic unit humdrumR package. humdrumR object represents data read one humdrum files. documentation refer collection files within humdrumRclass object \"corpus,\" file \"piece.\" However, though humdrum data usually encoded one \"piece\" per file, necessarily case: files might represent movements within piece, even just part score. Still, tend refer \"pieces.\" coding examples, name humdrumR objects \"humdata.\"","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumRclass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HumdrumR class — humdrumRclass","text":"","code":"is.humdrumR(x)  # S4 method for humdrumR $(x, name)  fields(   humdrumR,   fieldTypes = c(\"Data\", \"Structure\", \"Interpretation\", \"Formal\", \"Reference\") )  # S4 method for humdrumR,vector $(x, name) <- value  # S4 method for humdrumR,humdrumR $(x, name) <- value  # S4 method for humdrumR,character,ANY,vector [(x, i, j) <- value  # S4 method for humdrumR,character,ANY,humdrumR [(x, i, j) <- value"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumRclass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HumdrumR class — humdrumRclass","text":"imporant part humdrumR object humdrum tables holds within . essence, humdrumR object simply wrapper around humdrum tables, helps users visualize, index, summarize, manipulate table variety ways. Basic information size shape humdrumR data can obtained calls nrecords, npieces, length, ncol, etc.. detailed summary information can obtained humdrumR corpus summary functions. HumdrumR data can also coerced basic R data types using .matrix, .data.frame, etc.. number helpful functions also defined reshape humdrumR data. powerful features humdrumR tools gives Filter humdrum data, using filterHumdrum standard R indexing operators: [] [[]]. Apply functions arbitrary commands humdrum data using ()Humdrum routines.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumRclass.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"HumdrumR class — humdrumRclass","text":"Humtable list humdrum tables, fields containing data different types records (e.g., interpretations, data, barlines, comments). Files list two elements. first, \"Search\", contains single character representing pattern used call readHumdrum created humdrumR object. second, \"Names\", vector strings representing files matched pattern read humdrumR object. Fields list containing strings corresponding existing fields humdrumR object. fields divided five categories: \"Data\", \"Structure\", \"Interpretation\", \"Formal\", \"Reference\"---see humdrum table documentation. Active quosure expression extracts data field(s) humdrum table: \"active expression.\" LoadTime POSIXct value, indicating time readHumdrum called create humdrumR object. Patterns character vector original search patterns used match files system.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumRclass.html","id":"active-field","dir":"Reference","previous_headings":"","what":"Active field","title":"HumdrumR class — humdrumRclass","text":"Active slot humdrumR object contains expression refers fields internal humdrum table. Go dedicated active field documentation learn important slot!","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumRroot.html","id":null,"dir":"Reference","previous_headings":"","what":"humdrumR's root directory on your machine. — humdrumRroot","title":"humdrumR's root directory on your machine. — humdrumRroot","text":"humdrumRroot path humdrumR package install machine. installed humdrumR basic humdrum files stored well, subdirectories examples HumdrumData.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumRroot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"humdrumR's root directory on your machine. — humdrumRroot","text":"","code":"humdrumRroot"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/humdrumRroot.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"humdrumR's root directory on your machine. — humdrumRroot","text":"object class character length 1.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/indexHumdrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Indexing humdrumR objects — indexHumdrum","title":"Indexing humdrumR objects — indexHumdrum","text":"R's built-indexing operators, [] (single brakcets) [[]] (double brackets) can used shortcuts common calls subset.humdrumR().","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/indexHumdrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indexing humdrumR objects — indexHumdrum","text":"","code":"humdata[] # returns unchanged  humdata[x:y]  humdata['regex']  humdata[[x:y]]  humdata[[ , x:y]]  humdata[['regex']]  humdata[[ , 'regex']]  humdata[[x:y, l:m]]"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/indexHumdrum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Indexing humdrumR objects — indexHumdrum","text":"R, basic indexing operators, [] [[]], used select subsets data. many R data types (instance, base R lists) [single brackets] used \"shallower\" extraction [[double brackets]] used \"deeper\" extraction. HumdrumR corpus indexing follows basic pattern: [single brackets] used index humdrumR objects piece [[double brackets]] used index within pieces. (Accidentally writing [] need [[]] common error, watch !) Whether, indexing piece within, humdrumR objects can use two types indexing arguments: numeric (ordinal integers) character string (regular expressions) powerful/flexible indexing options, use subset directly.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/indexHumdrum.html","id":"numeric-indexing-","dir":"Reference","previous_headings":"","what":"Numeric indexing:","title":"Indexing humdrumR objects — indexHumdrum","text":"Indexing humdrumR corpora [single brackets] accept one numeric argument. argument used pick pieces within humdrumR object ordinally. Thus, humdata[1:10] select first ten pieces data humdata[42] select 42nd piece. Indexing humdrumR objects [[double brackets]] accept one two numeric arguments, j, either can used isolation combination. (j used isolation, must placed comma, humdata[[ , j ]].) used index data records (.e., based humtable Record field) ordinally. Thus, humdata[[1:20]] indexes first twenty records file corpus, humdata[[42]] extracts 42nd record file. j used index spines  (.e., based Spine field) ordinally. Thus, humdata[[ , 3:4]] returns third fourth spines file corpus. indexing humdrumR corpora numbers, numeric (double) inputs converted integers. Since subset always renumbers files/spines remain filtering/indexing, humdrumR indexing entirely ordinal. example, return 12th piece original humdata object. first call [] returns 11th 20th pieces, renumbered 1:10 second index call returns new 2nd index, 12th originally. Similarly, return third spine original data. normal R indexing, negative numbers can used, causing corresponding elements removed instead retained. Thus, humdata[-3:-5] remove third, fourth, fifth pieces data humdata[[ , -3:-5]] remove third, fourth, fifth spines piece. Positive negative indices mixed single argument. cases, indices outside range (value 0) ignored. E.g., corpus twenty files call corpus[21], 21st piece, 21 \"range\". input indices 0 error result. input indices range empty humdrumR object returned. instance, humdata[[401:500, ]] return empty humdrumR object pieces 400 data records.","code":"humsubset <- humdata[11:20] humsubset[2] humsubset2 <- humdata[[ , 2:4]] humsubset2[[ , 2]]"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/indexHumdrum.html","id":"character-indexing-","dir":"Reference","previous_headings":"","what":"Character indexing:","title":"Indexing humdrumR objects — indexHumdrum","text":"Indexing humdrumR objects [single brackets] accept one vector character strings. strings treated regular expressions (regexes). tokens humdrumR object's active field(s) searched matches regular expressions input. piece contains match regular expressions retained---pieces filtered . Note ([single-bracket] indexing) entire piece retained, even one match. matches occur pieces, empty humdrumR object returned. Indexing humdrumR objects [[double brackets]] accept one two vectors character strings, j, either can used isolation combination. (j used isolation, must placed comma, humdata[[ , j]].) strings treated regular expressions (regexes). tokens humdrumR object's active field(s) searched matches regular expressions input. record contains least one token matching regex retained. Similarly, spine contains least one token matching regex j retained. j used together, matching spines (j) indexed first, tokens matching regular expression(s) must found matching spines.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interpolateArguments.html","id":null,"dir":"Reference","previous_headings":"","what":"Change or insert values in an expression — interpolateArguments","title":"Change or insert values in an expression — interpolateArguments","text":"function can used modify arguments functions within existing expression (quosure/formula).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interpolateArguments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change or insert values in an expression — interpolateArguments","text":"","code":"interpolateArguments(quo, namedArgs)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interpolateArguments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change or insert values in an expression — interpolateArguments","text":"namedArgs list named arguments. Unnamed arguments simply ignored. expr unevaluated expression object.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interpolateArguments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change or insert values in an expression — interpolateArguments","text":"interpolateArguments inteprets named value namedArgs argument one two ways: named value list, interprets name list function call, inserts/swaps arguments list instances function call within expr. Named arguments inserted substituted already present expression. Unnamed argmuments simply added call. Examples: named valued namedArgs argument list, name/value pair substituted anywhere present expression. approach often conscise, arguments added expression way, substituted already present. Examples:","code":"myexpr <- quote(dnorm(x, mean = 5)) interpolateArguments(myexpr, list(dnorm = list(mean = 2, sd = 5, TRUE)))  # result is new expresson: dnorm(x, mean = 2, sd = 5, TRUE) myexpr <- quote(dnorm(x, mean = 5)) interpolateArguments(myexpr, mean = 2)  # result is new expression: dnorm(x, mean = 2) }"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interpolateArguments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change or insert values in an expression — interpolateArguments","text":"","code":"myexpr2 <- quote(A + b*x + rnorm(length(a), mean(Z), sd = 2))  interpolateArguments(myexpr2,                      list(sd = 10, mean = list(na.rm = TRUE))) #> Error in rlang::quo_get_expr(quo): `quo` must be a quosure                         # result is new expression:  # a + b*x + rnorm(length(a), mean(Z, na.rm = TRUE), sd = 10)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interpretations.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize humdrum corpus interpretations. — interpretations","title":"Summarize humdrum corpus interpretations. — interpretations","text":"interpretations one humdrumR's summary functions, used summarize interpretations pieces humdrumR corpus, including exclusive (**) tandem (*) interpretations. returns humInterpretations argument prints informative table terminal.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interpretations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize humdrum corpus interpretations. — interpretations","text":"","code":"interpretations(humdrumR)  # S3 method for humInterpretations print(interps, showEach = TRUE, screenWidth = options(\"width\")$width - 10L)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interpretations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize humdrum corpus interpretations. — interpretations","text":"humdrumR humdrumR data object.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interpretations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize humdrum corpus interpretations. — interpretations","text":"row output table represents single piece corus. first column ((n)) indicates unique \"exclusive pattern\" associated piece---exclusive patterns tallied bottom. remaining columns indicate many interpretation (indicated column name) appear piece. tandem interpretations, counts returned format Total.Unique.Spines: Total: total instances interpretation, across spines. Unique: number unique versions interpretation. Spines: number spines interpretation appears . example, consider following file: file, several tandem key interpretations, humdrumR call Key. tabulation interpretations return Key column value 6.3.2 file: 6 six key interpretations total. 3 three unique keys: *C:, *e: *G:. 2 key interpretations occur two spines.","code":"**kern   **kern   **silbe    *C:      *C:         *      c        e        La      d        f        la      e        g        la    *e:      *e:         *     f#       d#        la      g        e         _      a        b         _    *G:      *G:         *     f#        a       doo      g        b       wop     *-       *-        *-"},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tonal (pitch) interval representation — interval","title":"Tonal (pitch) interval representation — interval","text":"returns standard representations intervals Western music.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tonal (pitch) interval representation — interval","text":"","code":"interval(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tonal (pitch) interval representation — interval","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). generic (logical, length == 1) generic = TRUE \"specific\" pitch information (accidentals qualites) discarded. simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. transposeArgs (list) transposeArgs can list arguments passed special call transpose. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interval.html","id":"basic-pitch-arguments","dir":"Reference","previous_headings":"","what":"Basic pitch arguments","title":"Tonal (pitch) interval representation — interval","text":"pitch function standard arguments control details output. important generic simple arguments, allow control type pitch information returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interval.html","id":"generic-vs-specific","dir":"Reference","previous_headings":"","what":"Generic vs Specific","title":"Tonal (pitch) interval representation — interval","text":"generic = TRUE, specific pitch information (accidentals qualities) omitted output. alternative way controlling functionality, can use specific argument, specific == !generic. case atonal functions, \"generic\" version pitch output: example, semits('c#', generic = TRUE) return 0, \"generic\" version C# C, corresponds 0. However, note generic version pitch follows key, semits('c#', generic = TRUE, Key = ':') return 1!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interval.html","id":"simple-vs-compound","dir":"Reference","previous_headings":"","what":"Simple vs Compound","title":"Tonal (pitch) interval representation — interval","text":"simple = TRUE, compound pitch information (octave contour) omitted output. alternative way controlling functionality, can use compound argument ,compound == !simple. actually one way might want divide compound intervals simple octave parts. example, might like call output -M2 (descending major 2nd) +m7 (ascending minor 7th octave ). functionality can controlled octave.round argument: see pitch deparsing documentation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interval.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"Tonal (pitch) interval representation — interval","text":"Key argument must diatonicSet, something can parsed one. Key argument passed parser, deparser, transpose---unless alternate Key passed transposeArgs parseArgs. Various deparsing options use Key argument; example, use implicitSpecies (see advanced parsing section) dependent Key. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function---means, cases, need explicitly anything Key argument! (want happen, need explicitly specify Key argument, Key = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interval.html","id":"parse-arguments","dir":"Reference","previous_headings":"","what":"Parse arguments","title":"Tonal (pitch) interval representation — interval","text":"parseArgs argument must list() (named) arguments passed input parser. example, input representation uses \"X\" represent double sharps, specify kern('CX5', parseArgs = list(doublesharp = 'X')) get correct result (\"cc##\"). convenient shorthand, \"syntactic sugar,\" can specify parseArgs alternate way: Simply input parse(args...) unnamed argument pitch function. example, can get exact result typing kern('CX5', parse(doublesharp = 'X')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interval.html","id":"transpose-arguments","dir":"Reference","previous_headings":"","what":"Transpose arguments","title":"Tonal (pitch) interval representation — interval","text":"transposeArgs argument must list() (named) arguments passed internal call transpose(), allowing us easily transpose pitch information. example, type kern(c('C', 'D', 'E'), transposeArgs = list(= 'M9')) can get output c('d', 'e', 'f#'). possible transpose args : (tonalInterval, length == 1 | length == (x)) (diatonicSet, length == 1 | length == (x))  (diatonicSet, length == 1 | length == (x)) real (logical, length == 1) transposition real tonal? relative (logical, length == 1) key-wise transposition based relative parallel keys? convenient shorthand, \"syntactic sugar,\" can specify transposeArgs alternate way: Simply input transpose(args...) unnamed argument pitch function. example, can get exact result typing kern(c('C', 'D', 'E'), transpose(= 'M9')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interval.html","id":"transposing-by-interval","dir":"Reference","previous_headings":"","what":"Transposing by interval","title":"Tonal (pitch) interval representation — interval","text":"calling transpose() directly, argument can anything coercable tonalInterval, output transposed amount. real = FALSE, tonal transposition (within Key) performed. details transposition behavior, check transpose() docs.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interval.html","id":"transposing-by-key","dir":"Reference","previous_headings":"","what":"Transposing by key","title":"Tonal (pitch) interval representation — interval","text":"Another way transposing specifying input (\"\") key output (\"\") key. default, Key argument passed transpose , nothing actually happens. Thus, specify either key key, transposition happen /key Key. course, specify transposition happen keys specify. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function. specify key, Key field passed transpose key, result, pitches input transposed whatever keys target () key! real relative arguments give special control key-wise transposition works, check transpose() docs details!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/interval.html","id":"in-place-parsing","dir":"Reference","previous_headings":"","what":"In-place parsing","title":"Tonal (pitch) interval representation — interval","text":"humdrum data, character strings often encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find using appropriate known regular expressions. example, pitch('4.ee-[') returns Eb5. However, pitch functions (like pitch() kern()) option keep \"extra\" information return result \"place\"---.e., embedded right found input string. controlled inPlace argument, FALSE default. , pitch('4.ee-[', inPlace = TRUE) return 4.Eb5[---keeping \"4.\" \"[\". (obviously works input string, numeric!) Note inPlace = TRUE force functions like semits, normally return numeric values, return character strings input character string.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/intervalCalculus.html","id":null,"dir":"Reference","previous_headings":"","what":"Interval ","title":"Interval ","text":"Interval \"calculus\"","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/intervalCalculus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interval ","text":"","code":"sigma(x, skip, boundaries)  # S3 method for default sigma(x, skip = list(is.na), windows = list())  # S3 method for matrix sigma(x, ..., skip = list(is.na))  delta(x, skip, boundaries)  # S3 method for default delta(x, skip = list(is.na), windows = list(), firstNA = FALSE)  # S3 method for matrix delta(x, ..., skip = list(is.na))"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/invert.html","id":null,"dir":"Reference","previous_headings":"","what":"Invert or transpose tonal intervals. — invert","title":"Invert or transpose tonal intervals. — invert","text":"Invert transpose tonal intervals.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/invert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invert or transpose tonal intervals. — invert","text":"","code":"invert(tint, around, Key, ...)"},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/kern.html","id":null,"dir":"Reference","previous_headings":"","what":"Kern pitch representation — kern","title":"Kern pitch representation — kern","text":"Kern (**kern) common humdrum interpretation representing \"notes\" style traditional Western scores. However! humdrumR, kern function outputs pitch part **kern interpretation. **kern rhythms instead created using recip() function.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/kern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kern pitch representation — kern","text":"","code":"kern(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/kern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kern pitch representation — kern","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). generic (logical, length == 1) generic = TRUE \"specific\" pitch information (accidentals qualites) discarded. simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. transposeArgs (list) transposeArgs can list arguments passed special call transpose. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/kern.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kern pitch representation — kern","text":"pitch part **kern tokens breakdown tonal pitch information : Steps 1: \"C\" \"c\" 2: \"D\" \"d\" 3: \"E\" \"e\" 4: \"F\" \"f\" 5: \"G\" \"g\" 6: \"\" \"\" 7: \"B\" \"b\" Accidentals Flat: \"-\" Sharp: \"#\" Octave Octave indicated case step characters, well repetition step character. Uppercase letters used octaves ; lowercase letters middle-C octave higher.  octave, octave get one character , higher lower octaves repeating character. example, using C# step value, relative  octave: -3: \"CCC#\" -2: \"CC#\" -1: \"C#\" 0: \"c#\" +1: \"cc#\" +2: \"ccc#\" +3: \"cccc#\" Tokens ordered Step/Octave + Accidentals, separator. Like humdrumR pitch functions, ways kern parses deparses tokens can modified accomodate variations standard **kern pitch representation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/kern.html","id":"basic-pitch-arguments","dir":"Reference","previous_headings":"","what":"Basic pitch arguments","title":"Kern pitch representation — kern","text":"pitch function standard arguments control details output. important generic simple arguments, allow control type pitch information returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/kern.html","id":"generic-vs-specific","dir":"Reference","previous_headings":"","what":"Generic vs Specific","title":"Kern pitch representation — kern","text":"generic = TRUE, specific pitch information (accidentals qualities) omitted output. alternative way controlling functionality, can use specific argument, specific == !generic. case atonal functions, \"generic\" version pitch output: example, semits('c#', generic = TRUE) return 0, \"generic\" version C# C, corresponds 0. However, note generic version pitch follows key, semits('c#', generic = TRUE, Key = ':') return 1!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/kern.html","id":"simple-vs-compound","dir":"Reference","previous_headings":"","what":"Simple vs Compound","title":"Kern pitch representation — kern","text":"simple = TRUE, compound pitch information (octave contour) omitted output. alternative way controlling functionality, can use compound argument ,compound == !simple. actually one way might want divide compound intervals simple octave parts. example, might like call output -M2 (descending major 2nd) +m7 (ascending minor 7th octave ). functionality can controlled octave.round argument: see pitch deparsing documentation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/kern.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"Kern pitch representation — kern","text":"Key argument must diatonicSet, something can parsed one. Key argument passed parser, deparser, transpose---unless alternate Key passed transposeArgs parseArgs. Various deparsing options use Key argument; example, use implicitSpecies (see advanced parsing section) dependent Key. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function---means, cases, need explicitly anything Key argument! (want happen, need explicitly specify Key argument, Key = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/kern.html","id":"parse-arguments","dir":"Reference","previous_headings":"","what":"Parse arguments","title":"Kern pitch representation — kern","text":"parseArgs argument must list() (named) arguments passed input parser. example, input representation uses \"X\" represent double sharps, specify kern('CX5', parseArgs = list(doublesharp = 'X')) get correct result (\"cc##\"). convenient shorthand, \"syntactic sugar,\" can specify parseArgs alternate way: Simply input parse(args...) unnamed argument pitch function. example, can get exact result typing kern('CX5', parse(doublesharp = 'X')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/kern.html","id":"transpose-arguments","dir":"Reference","previous_headings":"","what":"Transpose arguments","title":"Kern pitch representation — kern","text":"transposeArgs argument must list() (named) arguments passed internal call transpose(), allowing us easily transpose pitch information. example, type kern(c('C', 'D', 'E'), transposeArgs = list(= 'M9')) can get output c('d', 'e', 'f#'). possible transpose args : (tonalInterval, length == 1 | length == (x)) (diatonicSet, length == 1 | length == (x))  (diatonicSet, length == 1 | length == (x)) real (logical, length == 1) transposition real tonal? relative (logical, length == 1) key-wise transposition based relative parallel keys? convenient shorthand, \"syntactic sugar,\" can specify transposeArgs alternate way: Simply input transpose(args...) unnamed argument pitch function. example, can get exact result typing kern(c('C', 'D', 'E'), transpose(= 'M9')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/kern.html","id":"transposing-by-interval","dir":"Reference","previous_headings":"","what":"Transposing by interval","title":"Kern pitch representation — kern","text":"calling transpose() directly, argument can anything coercable tonalInterval, output transposed amount. real = FALSE, tonal transposition (within Key) performed. details transposition behavior, check transpose() docs.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/kern.html","id":"transposing-by-key","dir":"Reference","previous_headings":"","what":"Transposing by key","title":"Kern pitch representation — kern","text":"Another way transposing specifying input (\"\") key output (\"\") key. default, Key argument passed transpose , nothing actually happens. Thus, specify either key key, transposition happen /key Key. course, specify transposition happen keys specify. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function. specify key, Key field passed transpose key, result, pitches input transposed whatever keys target () key! real relative arguments give special control key-wise transposition works, check transpose() docs details!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/kern.html","id":"in-place-parsing","dir":"Reference","previous_headings":"","what":"In-place parsing","title":"Kern pitch representation — kern","text":"humdrum data, character strings often encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find using appropriate known regular expressions. example, pitch('4.ee-[') returns Eb5. However, pitch functions (like pitch() kern()) option keep \"extra\" information return result \"place\"---.e., embedded right found input string. controlled inPlace argument, FALSE default. , pitch('4.ee-[', inPlace = TRUE) return 4.Eb5[---keeping \"4.\" \"[\". (obviously works input string, numeric!) Note inPlace = TRUE force functions like semits, normally return numeric values, return character strings input character string.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/keyTransformer.html","id":null,"dir":"Reference","previous_headings":"","what":"Parsing and deparsing key information — keyTransformer","title":"Parsing and deparsing key information — keyTransformer","text":"XXX","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/keyTransformer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parsing and deparsing key information — keyTransformer","text":"","code":"key(x, ..., Key = NULL, parseArgs = list(), memoize = TRUE, deparse = TRUE)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lag.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift data within a vector/matrix/data.frame — lag","title":"Shift data within a vector/matrix/data.frame — lag","text":"lag lead functions take input vectors, matrices, data.frames shifts data n indices. similiar data.table::shift function, additional options.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift data within a vector/matrix/data.frame — lag","text":"","code":"lag(x, n = 1, fill, wrap, boundaries, ...)  lead(x, n, ...)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift data within a vector/matrix/data.frame — lag","text":"x input argument. vector (including list), array, data.frame n amount lag/lead data. fill wrap = FALSE /windows = NULL, parts output padded fill argument. Defaults NA. wrap wrap = TRUE, data end (head tail) copied end output, \"wrapping\" data within data structure. boundaries vector list vectors, length x. segment x delineated boundaries vector(s) treated separately. margin Arrays data.frames can lagged lead multiple dimensions using margin argument.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lag.html","id":"boundaries","dir":"Reference","previous_headings":"","what":"Boundaries","title":"Shift data within a vector/matrix/data.frame — lag","text":"many cases want perform lagged calculations vector, across certain boundaries. example, vector includes data multiple pieces, want calculate melodic intervals pieces, within pieces. boundaries argument indicates one, , grouping vectors, break x (input) argument groups. boundaries vectors given, change vector indicates boundary. Value pairs cross groups treated beginning. Basically, using boundaries essentially identical using tapply(x, boundaries, laggedFunction, ...), except generally faster number groups large. common use case humdrum data, looking \"melodies\" within spines. , want boundaries = list(File, Spine, Path ). fact, humdrumR () calls automatically feed three fields boundaries arguments certain functions: mint, delta, sigma, lag, ditto. use delta call (), automatically calculate delta \"melodic\" way, within spine path file. However, wanted, instance, calculate differences across spines (like harmonic intervals) manually set boundaries = list(File, Record).","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lilypond.html","id":null,"dir":"Reference","previous_headings":"","what":"Lilypond pitch representation — lilypond","title":"Lilypond pitch representation — lilypond","text":"representation used represent (Western tonal) pitches Lilypond notation format. humdrumR, lilypond function relates pitch part Lilypond notation: Lilypond-like rhythms can creating using recip function.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lilypond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lilypond pitch representation — lilypond","text":"","code":"lilypond(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lilypond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lilypond pitch representation — lilypond","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). generic (logical, length == 1) generic = TRUE \"specific\" pitch information (accidentals qualites) discarded. simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. transposeArgs (list) transposeArgs can list arguments passed special call transpose. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lilypond.html","id":"basic-pitch-arguments","dir":"Reference","previous_headings":"","what":"Basic pitch arguments","title":"Lilypond pitch representation — lilypond","text":"pitch function standard arguments control details output. important generic simple arguments, allow control type pitch information returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lilypond.html","id":"generic-vs-specific","dir":"Reference","previous_headings":"","what":"Generic vs Specific","title":"Lilypond pitch representation — lilypond","text":"generic = TRUE, specific pitch information (accidentals qualities) omitted output. alternative way controlling functionality, can use specific argument, specific == !generic. case atonal functions, \"generic\" version pitch output: example, semits('c#', generic = TRUE) return 0, \"generic\" version C# C, corresponds 0. However, note generic version pitch follows key, semits('c#', generic = TRUE, Key = ':') return 1!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lilypond.html","id":"simple-vs-compound","dir":"Reference","previous_headings":"","what":"Simple vs Compound","title":"Lilypond pitch representation — lilypond","text":"simple = TRUE, compound pitch information (octave contour) omitted output. alternative way controlling functionality, can use compound argument ,compound == !simple. actually one way might want divide compound intervals simple octave parts. example, might like call output -M2 (descending major 2nd) +m7 (ascending minor 7th octave ). functionality can controlled octave.round argument: see pitch deparsing documentation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lilypond.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"Lilypond pitch representation — lilypond","text":"Key argument must diatonicSet, something can parsed one. Key argument passed parser, deparser, transpose---unless alternate Key passed transposeArgs parseArgs. Various deparsing options use Key argument; example, use implicitSpecies (see advanced parsing section) dependent Key. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function---means, cases, need explicitly anything Key argument! (want happen, need explicitly specify Key argument, Key = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lilypond.html","id":"parse-arguments","dir":"Reference","previous_headings":"","what":"Parse arguments","title":"Lilypond pitch representation — lilypond","text":"parseArgs argument must list() (named) arguments passed input parser. example, input representation uses \"X\" represent double sharps, specify kern('CX5', parseArgs = list(doublesharp = 'X')) get correct result (\"cc##\"). convenient shorthand, \"syntactic sugar,\" can specify parseArgs alternate way: Simply input parse(args...) unnamed argument pitch function. example, can get exact result typing kern('CX5', parse(doublesharp = 'X')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lilypond.html","id":"transpose-arguments","dir":"Reference","previous_headings":"","what":"Transpose arguments","title":"Lilypond pitch representation — lilypond","text":"transposeArgs argument must list() (named) arguments passed internal call transpose(), allowing us easily transpose pitch information. example, type kern(c('C', 'D', 'E'), transposeArgs = list(= 'M9')) can get output c('d', 'e', 'f#'). possible transpose args : (tonalInterval, length == 1 | length == (x)) (diatonicSet, length == 1 | length == (x))  (diatonicSet, length == 1 | length == (x)) real (logical, length == 1) transposition real tonal? relative (logical, length == 1) key-wise transposition based relative parallel keys? convenient shorthand, \"syntactic sugar,\" can specify transposeArgs alternate way: Simply input transpose(args...) unnamed argument pitch function. example, can get exact result typing kern(c('C', 'D', 'E'), transpose(= 'M9')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lilypond.html","id":"transposing-by-interval","dir":"Reference","previous_headings":"","what":"Transposing by interval","title":"Lilypond pitch representation — lilypond","text":"calling transpose() directly, argument can anything coercable tonalInterval, output transposed amount. real = FALSE, tonal transposition (within Key) performed. details transposition behavior, check transpose() docs.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lilypond.html","id":"transposing-by-key","dir":"Reference","previous_headings":"","what":"Transposing by key","title":"Lilypond pitch representation — lilypond","text":"Another way transposing specifying input (\"\") key output (\"\") key. default, Key argument passed transpose , nothing actually happens. Thus, specify either key key, transposition happen /key Key. course, specify transposition happen keys specify. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function. specify key, Key field passed transpose key, result, pitches input transposed whatever keys target () key! real relative arguments give special control key-wise transposition works, check transpose() docs details!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/lilypond.html","id":"in-place-parsing","dir":"Reference","previous_headings":"","what":"In-place parsing","title":"Lilypond pitch representation — lilypond","text":"humdrum data, character strings often encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find using appropriate known regular expressions. example, pitch('4.ee-[') returns Eb5. However, pitch functions (like pitch() kern()) option keep \"extra\" information return result \"place\"---.e., embedded right found input string. controlled inPlace argument, FALSE default. , pitch('4.ee-[', inPlace = TRUE) return 4.Eb5[---keeping \"4.\" \"[\". (obviously works input string, numeric!) Note inPlace = TRUE force functions like semits, normally return numeric values, return character strings input character string.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/measure.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure — measure","title":"Measure — measure","text":"Takes sequence rhythmic offsets regular irregular beat unit, counts many beats passed, offset attack nearest beat.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/measure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure — measure","text":"","code":"measure(   soi,   beat = rational(1L),   start = as(0, class(dur)),   phase = rational(0L),   Bar = NULL )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/meter.html","id":null,"dir":"Reference","previous_headings":"","what":"Meter class — meter","title":"Meter class — meter","text":"Takes sequence rhythmic offsets regular irregular beat unit, counts many beats passed, offset attack nearest beat.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/meter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meter class — meter","text":"","code":"measure(   soi,   beat = rational(1L),   start = as(0, class(dur)),   phase = rational(0L),   Bar = NULL )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/metric.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate metric positions from duration data. — metric","title":"Calculate metric positions from duration data. — metric","text":"Calculate metric positions duration data.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/metric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate metric positions from duration data. — metric","text":"","code":"metric(ioi, meter = duple(5), ..., remainderSubdivides = TRUE)"},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/octave.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract octave — octave","title":"Extract octave — octave","text":"Extract octave","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/octave.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract octave — octave","text":"","code":"octave(   x,   ...,   octave.relative = FALSE,   Key = NULL,   parseArgs = list(),   inPlace = FALSE )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/octave.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract octave — octave","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ).","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Representation of Atonal Pitch classes — pc","title":"Representation of Atonal Pitch classes — pc","text":"encoded humdrum **pc interpretation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation of Atonal Pitch classes — pc","text":"","code":"pc(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Representation of Atonal Pitch classes — pc","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). generic (logical, length == 1) generic = TRUE \"specific\" pitch information (accidentals qualites) discarded. simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. transposeArgs (list) transposeArgs can list arguments passed special call transpose. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ). ten (character, length == 1) shorthand-symbol \"10.\" Defaults \"\". NULL, \"10\" used shorthand. eleven (character, length == 1) shorthand-symbol \"11.\" Defaults \"B\". NULL, \"11\" used shorthand.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pc.html","id":"basic-pitch-arguments","dir":"Reference","previous_headings":"","what":"Basic pitch arguments","title":"Representation of Atonal Pitch classes — pc","text":"pitch function standard arguments control details output. important generic simple arguments, allow control type pitch information returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pc.html","id":"generic-vs-specific","dir":"Reference","previous_headings":"","what":"Generic vs Specific","title":"Representation of Atonal Pitch classes — pc","text":"generic = TRUE, specific pitch information (accidentals qualities) omitted output. alternative way controlling functionality, can use specific argument, specific == !generic. case atonal functions, \"generic\" version pitch output: example, semits('c#', generic = TRUE) return 0, \"generic\" version C# C, corresponds 0. However, note generic version pitch follows key, semits('c#', generic = TRUE, Key = ':') return 1!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pc.html","id":"simple-vs-compound","dir":"Reference","previous_headings":"","what":"Simple vs Compound","title":"Representation of Atonal Pitch classes — pc","text":"simple = TRUE, compound pitch information (octave contour) omitted output. alternative way controlling functionality, can use compound argument ,compound == !simple. actually one way might want divide compound intervals simple octave parts. example, might like call output -M2 (descending major 2nd) +m7 (ascending minor 7th octave ). functionality can controlled octave.round argument: see pitch deparsing documentation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pc.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"Representation of Atonal Pitch classes — pc","text":"Key argument must diatonicSet, something can parsed one. Key argument passed parser, deparser, transpose---unless alternate Key passed transposeArgs parseArgs. Various deparsing options use Key argument; example, use implicitSpecies (see advanced parsing section) dependent Key. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function---means, cases, need explicitly anything Key argument! (want happen, need explicitly specify Key argument, Key = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pc.html","id":"parse-arguments","dir":"Reference","previous_headings":"","what":"Parse arguments","title":"Representation of Atonal Pitch classes — pc","text":"parseArgs argument must list() (named) arguments passed input parser. example, input representation uses \"X\" represent double sharps, specify kern('CX5', parseArgs = list(doublesharp = 'X')) get correct result (\"cc##\"). convenient shorthand, \"syntactic sugar,\" can specify parseArgs alternate way: Simply input parse(args...) unnamed argument pitch function. example, can get exact result typing kern('CX5', parse(doublesharp = 'X')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pc.html","id":"transpose-arguments","dir":"Reference","previous_headings":"","what":"Transpose arguments","title":"Representation of Atonal Pitch classes — pc","text":"transposeArgs argument must list() (named) arguments passed internal call transpose(), allowing us easily transpose pitch information. example, type kern(c('C', 'D', 'E'), transposeArgs = list(= 'M9')) can get output c('d', 'e', 'f#'). possible transpose args : (tonalInterval, length == 1 | length == (x)) (diatonicSet, length == 1 | length == (x))  (diatonicSet, length == 1 | length == (x)) real (logical, length == 1) transposition real tonal? relative (logical, length == 1) key-wise transposition based relative parallel keys? convenient shorthand, \"syntactic sugar,\" can specify transposeArgs alternate way: Simply input transpose(args...) unnamed argument pitch function. example, can get exact result typing kern(c('C', 'D', 'E'), transpose(= 'M9')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pc.html","id":"transposing-by-interval","dir":"Reference","previous_headings":"","what":"Transposing by interval","title":"Representation of Atonal Pitch classes — pc","text":"calling transpose() directly, argument can anything coercable tonalInterval, output transposed amount. real = FALSE, tonal transposition (within Key) performed. details transposition behavior, check transpose() docs.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pc.html","id":"transposing-by-key","dir":"Reference","previous_headings":"","what":"Transposing by key","title":"Representation of Atonal Pitch classes — pc","text":"Another way transposing specifying input (\"\") key output (\"\") key. default, Key argument passed transpose , nothing actually happens. Thus, specify either key key, transposition happen /key Key. course, specify transposition happen keys specify. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function. specify key, Key field passed transpose key, result, pitches input transposed whatever keys target () key! real relative arguments give special control key-wise transposition works, check transpose() docs details!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pc.html","id":"in-place-parsing","dir":"Reference","previous_headings":"","what":"In-place parsing","title":"Representation of Atonal Pitch classes — pc","text":"humdrum data, character strings often encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find using appropriate known regular expressions. example, pitch('4.ee-[') returns Eb5. However, pitch functions (like pitch() kern()) option keep \"extra\" information return result \"place\"---.e., embedded right found input string. controlled inPlace argument, FALSE default. , pitch('4.ee-[', inPlace = TRUE) return 4.Eb5[---keeping \"4.\" \"[\". (obviously works input string, numeric!) Note inPlace = TRUE force functions like semits, normally return numeric values, return character strings input character string.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitch.html","id":null,"dir":"Reference","previous_headings":"","what":"Scientific pitch representation — pitch","title":"Scientific pitch representation — pitch","text":"Scientific pitch standard approach representing pitch traditional Western music.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scientific pitch representation — pitch","text":"","code":"pitch(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scientific pitch representation — pitch","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). generic (logical, length == 1) generic = TRUE \"specific\" pitch information (accidentals qualites) discarded. simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. transposeArgs (list) transposeArgs can list arguments passed special call transpose. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitch.html","id":"basic-pitch-arguments","dir":"Reference","previous_headings":"","what":"Basic pitch arguments","title":"Scientific pitch representation — pitch","text":"pitch function standard arguments control details output. important generic simple arguments, allow control type pitch information returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitch.html","id":"generic-vs-specific","dir":"Reference","previous_headings":"","what":"Generic vs Specific","title":"Scientific pitch representation — pitch","text":"generic = TRUE, specific pitch information (accidentals qualities) omitted output. alternative way controlling functionality, can use specific argument, specific == !generic. case atonal functions, \"generic\" version pitch output: example, semits('c#', generic = TRUE) return 0, \"generic\" version C# C, corresponds 0. However, note generic version pitch follows key, semits('c#', generic = TRUE, Key = ':') return 1!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitch.html","id":"simple-vs-compound","dir":"Reference","previous_headings":"","what":"Simple vs Compound","title":"Scientific pitch representation — pitch","text":"simple = TRUE, compound pitch information (octave contour) omitted output. alternative way controlling functionality, can use compound argument ,compound == !simple. actually one way might want divide compound intervals simple octave parts. example, might like call output -M2 (descending major 2nd) +m7 (ascending minor 7th octave ). functionality can controlled octave.round argument: see pitch deparsing documentation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitch.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"Scientific pitch representation — pitch","text":"Key argument must diatonicSet, something can parsed one. Key argument passed parser, deparser, transpose---unless alternate Key passed transposeArgs parseArgs. Various deparsing options use Key argument; example, use implicitSpecies (see advanced parsing section) dependent Key. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function---means, cases, need explicitly anything Key argument! (want happen, need explicitly specify Key argument, Key = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitch.html","id":"parse-arguments","dir":"Reference","previous_headings":"","what":"Parse arguments","title":"Scientific pitch representation — pitch","text":"parseArgs argument must list() (named) arguments passed input parser. example, input representation uses \"X\" represent double sharps, specify kern('CX5', parseArgs = list(doublesharp = 'X')) get correct result (\"cc##\"). convenient shorthand, \"syntactic sugar,\" can specify parseArgs alternate way: Simply input parse(args...) unnamed argument pitch function. example, can get exact result typing kern('CX5', parse(doublesharp = 'X')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitch.html","id":"transpose-arguments","dir":"Reference","previous_headings":"","what":"Transpose arguments","title":"Scientific pitch representation — pitch","text":"transposeArgs argument must list() (named) arguments passed internal call transpose(), allowing us easily transpose pitch information. example, type kern(c('C', 'D', 'E'), transposeArgs = list(= 'M9')) can get output c('d', 'e', 'f#'). possible transpose args : (tonalInterval, length == 1 | length == (x)) (diatonicSet, length == 1 | length == (x))  (diatonicSet, length == 1 | length == (x)) real (logical, length == 1) transposition real tonal? relative (logical, length == 1) key-wise transposition based relative parallel keys? convenient shorthand, \"syntactic sugar,\" can specify transposeArgs alternate way: Simply input transpose(args...) unnamed argument pitch function. example, can get exact result typing kern(c('C', 'D', 'E'), transpose(= 'M9')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitch.html","id":"transposing-by-interval","dir":"Reference","previous_headings":"","what":"Transposing by interval","title":"Scientific pitch representation — pitch","text":"calling transpose() directly, argument can anything coercable tonalInterval, output transposed amount. real = FALSE, tonal transposition (within Key) performed. details transposition behavior, check transpose() docs.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitch.html","id":"transposing-by-key","dir":"Reference","previous_headings":"","what":"Transposing by key","title":"Scientific pitch representation — pitch","text":"Another way transposing specifying input (\"\") key output (\"\") key. default, Key argument passed transpose , nothing actually happens. Thus, specify either key key, transposition happen /key Key. course, specify transposition happen keys specify. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function. specify key, Key field passed transpose key, result, pitches input transposed whatever keys target () key! real relative arguments give special control key-wise transposition works, check transpose() docs details!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitch.html","id":"in-place-parsing","dir":"Reference","previous_headings":"","what":"In-place parsing","title":"Scientific pitch representation — pitch","text":"humdrum data, character strings often encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find using appropriate known regular expressions. example, pitch('4.ee-[') returns Eb5. However, pitch functions (like pitch() kern()) option keep \"extra\" information return result \"place\"---.e., embedded right found input string. controlled inPlace argument, FALSE default. , pitch('4.ee-[', inPlace = TRUE) return 4.Eb5[---keeping \"4.\" \"[\". (obviously works input string, numeric!) Note inPlace = TRUE force functions like semits, normally return numeric values, return character strings input character string.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating (","title":"Generating (","text":"humdrumR includes easy--use generating variety tonal (atonal) pitch representations, can flexibly modified users. \"hood\" humdrumR represents tonal pitch information using underlying representation, typically extracted input data using pitch parser. representation can \"deparsed\" variety predefined output formats (like **kern), new formats create!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generating (","text":"Deparsing second step pitch function processing pipeline: Input representation |> Parsing |> Intermediate (tonalInterval) representation |> Transformation  |> Deparsing (DEPARSING ARGS GO ) |> Output representation Various pitch representations like **kern, **solfa, **semits can generated using predefined pitch functions like kern() semits(), solfa() respectively. functions use common deparsing framework, specified using different combinations arguments deparser. modifying \"deparsing\" arguments, can exercise fine control want pitch information represented output.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"basic-pitch-arguments","dir":"Reference","previous_headings":"","what":"Basic pitch arguments","title":"Generating (","text":"pitch function standard arguments control details output. important generic simple arguments, allow control type pitch information returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"generic-vs-specific","dir":"Reference","previous_headings":"","what":"Generic vs Specific","title":"Generating (","text":"generic = TRUE, specific pitch information (accidentals qualities) omitted output. alternative way controlling functionality, can use specific argument, specific == !generic. case atonal functions, \"generic\" version pitch output: example, semits('c#', generic = TRUE) return 0, \"generic\" version C# C, corresponds 0. However, note generic version pitch follows key, semits('c#', generic = TRUE, Key = ':') return 1!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"simple-vs-compound","dir":"Reference","previous_headings":"","what":"Simple vs Compound","title":"Generating (","text":"simple = TRUE, compound pitch information (octave contour) omitted output. alternative way controlling functionality, can use compound argument ,compound == !simple. actually one way might want divide compound intervals simple octave parts. example, might like call output -M2 (descending major 2nd) +m7 (ascending minor 7th octave ). functionality can controlled octave.round argument: see pitch deparsing documentation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"Generating (","text":"Key argument must diatonicSet, something can parsed one. Key argument passed parser, deparser, transpose---unless alternate Key passed transposeArgs parseArgs. Various deparsing options use Key argument; example, use implicitSpecies (see advanced parsing section) dependent Key. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function---means, cases, need explicitly anything Key argument! (want happen, need explicitly specify Key argument, Key = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"parse-arguments","dir":"Reference","previous_headings":"","what":"Parse arguments","title":"Generating (","text":"parseArgs argument must list() (named) arguments passed input parser. example, input representation uses \"X\" represent double sharps, specify kern('CX5', parseArgs = list(doublesharp = 'X')) get correct result (\"cc##\"). convenient shorthand, \"syntactic sugar,\" can specify parseArgs alternate way: Simply input parse(args...) unnamed argument pitch function. example, can get exact result typing kern('CX5', parse(doublesharp = 'X')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"transpose-arguments","dir":"Reference","previous_headings":"","what":"Transpose arguments","title":"Generating (","text":"transposeArgs argument must list() (named) arguments passed internal call transpose(), allowing us easily transpose pitch information. example, type kern(c('C', 'D', 'E'), transposeArgs = list(= 'M9')) can get output c('d', 'e', 'f#'). possible transpose args : (tonalInterval, length == 1 | length == (x)) (diatonicSet, length == 1 | length == (x))  (diatonicSet, length == 1 | length == (x)) real (logical, length == 1) transposition real tonal? relative (logical, length == 1) key-wise transposition based relative parallel keys? convenient shorthand, \"syntactic sugar,\" can specify transposeArgs alternate way: Simply input transpose(args...) unnamed argument pitch function. example, can get exact result typing kern(c('C', 'D', 'E'), transpose(= 'M9')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"transposing-by-interval","dir":"Reference","previous_headings":"","what":"Transposing by interval","title":"Generating (","text":"calling transpose() directly, argument can anything coercable tonalInterval, output transposed amount. real = FALSE, tonal transposition (within Key) performed. details transposition behavior, check transpose() docs.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"transposing-by-key","dir":"Reference","previous_headings":"","what":"Transposing by key","title":"Generating (","text":"Another way transposing specifying input (\"\") key output (\"\") key. default, Key argument passed transpose , nothing actually happens. Thus, specify either key key, transposition happen /key Key. course, specify transposition happen keys specify. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function. specify key, Key field passed transpose key, result, pitches input transposed whatever keys target () key! real relative arguments give special control key-wise transposition works, check transpose() docs details!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"in-place-parsing","dir":"Reference","previous_headings":"","what":"In-place parsing","title":"Generating (","text":"humdrum data, character strings often encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find using appropriate known regular expressions. example, pitch('4.ee-[') returns Eb5. However, pitch functions (like pitch() kern()) option keep \"extra\" information return result \"place\"---.e., embedded right found input string. controlled inPlace argument, FALSE default. , pitch('4.ee-[', inPlace = TRUE) return 4.Eb5[---keeping \"4.\" \"[\". (obviously works input string, numeric!) Note inPlace = TRUE force functions like semits, normally return numeric values, return character strings input character string.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"deparsing-arguments","dir":"Reference","previous_headings":"","what":"Deparsing arguments","title":"Generating (","text":"following \"advanced\" deparsing arguments available (read details ): Steps step.labels step.signed Species (accidentals qualities) qualities specifier.maximum Accidentals natural, flat, sharp, doubleflat, doublesharp Qualities perfect, major, minor, augment, diminish Implicit vs Explicit Species implicitSpecies absoluteSpecies explicitNaturals cautionary memory, memoryWindows Octave octave.integer , , octave.offset octave.round octave.relative, octave.absolute String parsing parts sep. Note deparsing arguments similar (sometimes identical) parallel parsing arguments. \"advanced\" arguments can used directly pitch function: example, kern(x, qualities = TRUE). humdrumR pitch functions associated default deparsing arguments. example, use kern(), flat set (default) \"-\". However, wanted print **kern-like pitch data, except different flat symbol, like \"_\", modify deparser: kern('Eb5', flat = \"_\"). overrides default value **kern, output \"ee_\" instead \"ee-\".","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"steps","dir":"Reference","previous_headings":"","what":"Steps","title":"Generating (","text":"representations \"tonal\" pitch information include representation diatonic steps. can control deparser writes diatonic steps using step.labels argument. step.labels argument must atomic vector unique values, length positive multiple seven. Examples step.labels arguments currently used humdrumR pitch functions include: step.labels = c('', 'B', 'C', 'D', 'E', 'F', 'G') step.labels = c('', 'II', 'III', 'IV', 'V', 'VI', 'VII') step.labels = c('d', 'r', 'm', 'f', 's', 'l', 't') step.labels NULL, steps assumed printed integers, including negative integers representing downward steps. also step.signed (logical, length == 1) argument: step.signed = TRUE, lowercase versions step.labels interpreted negative (downward) steps uppercase versions step.labels interpreted positive (upwards) steps. option used, example, default kern() helmholtz() parsers.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"species","dir":"Reference","previous_headings":"","what":"Species","title":"Generating (","text":"tonal pitch representations, \"specific\" versions tonal pitches---tonal \"species\"---indicated \"specifiers\": either accidentals qualities. qualities (logical, length == 1) argument indicates whether accidentals used (qualities = FALSE) qualities (qualities = TRUE). specifiers can repeated number times, like \"triple sharps\" \"doubly augmented\"; specifier.maximum (integer, length == 1) argument sets maximum limit number specifiers write. example, force triple sharps (\"###\") double sharps (\"##\") deparse just \"#\", specifying specifier.maximum = 1L.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"accidentals","dir":"Reference","previous_headings":"","what":"Accidentals","title":"Generating (","text":"qualities = FALSE deparser print accidentals three types: naturals, flats, sharps. natural, flat, /sharp (character, length == 1) arguments can used indicate accidentals printed output. example, set kern('Eb5', flat = 'flat') get output \"eeflat\". Examples accidental argument combinations currently used humdrumR pitch functions include: (flat = \"b\", sharp = \"#\") ->  pitch() (flat = \"-\", sharp = \"#\") ->  kern() (flat = \"es\", sharp = \"\") -> lilypond() (flat = \"-\", sharp = \"+\") -> degree() doubleflat, doublesharp (character, length == 1) arguments NULL default, can set special symbol wanted represent two sharps flats. example, modify pitch() use special double sharp symbol: pitch(\"f##\", doublesharp = \"x\") output \"Fx4\". printing naturals controlled natural argument. However, default, humdrumR deparsers printing naturals. can force naturals print setting explicitNaturals (logical, length == 1) argument TRUE. exact behavior explicitNaturals depends implicitSpecies, absoluteSpecies, Key argument (details ).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"qualities","dir":"Reference","previous_headings":"","what":"Qualities","title":"Generating (","text":"qualities = TRUE deparser print qualities, five types: perfect, minor, major, augmented, diminished. perfect, major, minor, diminish, /augment (character, length == 1) arguments can used indicate qualities printed output. (Note: talking interval/degree qualities , chord qualities!) example, can write interval(c(\"g-\", \"f#\"), augment = 'aug', diminish = 'dim') output c(\"+dim5\", \"+aug4\"). Examples quality argument combinations currently used humdrumR pitch functions include: parse(major = \"M\", minor = \"m\", perfect = \"P\", diminish = \"d\", augment = \"\") parse(diminish = \"o\", augment = \"+\")","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"implicit-vs-explicit-species","dir":"Reference","previous_headings":"","what":"Implicit vs Explicit Species","title":"Generating (","text":"musical data, specifiers (e.g., accidentals qualities) explicitly indicated; instead, must infer species pitch context---like key signature!.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"from-the-key","dir":"Reference","previous_headings":"","what":"From the Key","title":"Generating (","text":"important argument implicitSpecies (logical, length == 1): implicitSpecies = TRUE, species input without explicit species indicated interpreted using Key. example, kern('C', Key = ':', parse(implicitSpecies = TRUE)) parsed \"C#\" C sharp major. kern('C', Key = ':', parse(implicitSpecies = TRUE)) parsed \"C\" C natural minor. kern('C', Key = '-:', parse(implicitSpecies = TRUE)) parsed \"C-\" C flat -flat minor. default, input already specifiers, interpreted absolutely---overriding \"implicit\" Key---, even implicitSpecies = TRUE. Thus, major: kern(\"C#\", Key = ':', parse(implicitSpecies = TRUE)) parsed \"C#\". \"#\" unnecessary. kern(\"Cn\", Key = ':', parse(implicitSpecies = TRUE)) parsed \"C\". \"n\" overrides Key. kern(\"C#\", Key = ':', parse(implicitSpecies = TRUE)) parsed \"C#\". \"#\" overrides Key. However! can also change behavior setting absoluteSpecies (logical, length == 1) argument FALSE. , specifiers input interpreted \"top \" key accidental: kern(\"C#\", Key = ':', parse(implicitSpecies = TRUE, absoluteSpecies = FALSE)) parsed \"C##\". \"#\" input added \"#\" Key, resulting double sharp! unusual behavior, absolute pitch representations like **kern. However, use scale chord degrees, absoluteSpecies = FALSE might appropriate. example, reading figured bass key E minor, \"b7\" figure E bass interpreted double flat (diminished) 7th (Db E)! data encoded, use absoluteSpecies = FALSE.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"memory","dir":"Reference","previous_headings":"","what":"Memory","title":"Generating (","text":"musical data, assume accidental note \"stays effect\" scale step next bar, different accidental replaces . Fortunately, humdrumR parser (tonalInterval()) also knows parse data encoded \"memory\" way. memory = TRUE, accidental (quality) input note \"remembered\" previous appearances scale step. example, kern(c(\"D#\", \"E\", \"D\", \"E\", \"Dn\", \"C\", \"D\"), parse(memory = TRUE)) parsed c(\"D#\", \"E\", \"D#\", \"E\", \"D\", \"C\", \"D\") want \"memory\" last specific time windows (like bars), can also specify memoryWindows argument. memoryWindows must atomic vector length input (x argument). unique value within memoryWindows vector treated \"window\" within memory operates. common use case pass Bar field humdrumR dataset memoryWindows! memory memoryWindows argument work whatever values implicitSpecies absoluteSpecies specified! Though examples use accidentals, arguments effect parsing qualities (qualities = TRUE).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"octave","dir":"Reference","previous_headings":"","what":"Octave","title":"Generating (","text":"final piece information encoded () pitch representations indication \"compound pitch\"--- incorporating octave information. humdrumR octaves always defined terms scale steps: two notes scale degree/letter name always octave. mainly comes regards Cb B#: Cb4 semitone ; B#3 enharmonically middle-C.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"integer-octaves","dir":"Reference","previous_headings":"","what":"Integer Octaves","title":"Generating (","text":"simplest way octave information can encoded integer value, Scientific Pitch. need parse integer-encoded octaves, set octave.integer (logical, length == 1) argument TRUE. default, humdrumR considers \"central\" octave (octave == 0) octave , equivalently, unison. However, different octave used central octave, can specify octave.offset (integer, length == 1) argument. illustrate, default Scientific Pitch parser used arguments: kern('C5', parse(octave.integer = TRUE, octave.offset = 4) Returns \"cc\" (octave middle C).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"non-integer-octave-markers","dir":"Reference","previous_headings":"","what":"Non-integer Octave Markers","title":"Generating (","text":"octave.integer = FALSE, humdrumR parser instead looks three possible symbols indicate octave information. symbols controlled using , , (character, length == 1) arguments. symbol, symbol, interpreted \"central\" octave; repeating strings symbols indicate increasing positive () negative () octaves. example, lilypond notation, , represents lower octaves, ' (single apostrophe) represents upper octaves. default lilypond() parser uses arguments: pitch(c(\"c\", \"c\", \"c'\"), parse(octave.integer = FALSE, = \"'\", = \",\", octave.offset = 1)) Returns c(\"C2\", \"C3\", \"C4\"). (Note lilypond makes octave  central octave, using octave.offset = 1.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"octave-rounding-","dir":"Reference","previous_headings":"","what":"Octave \"Rounding\"","title":"Generating (","text":"situations, pitch data might interpret \"boundaries\" octaves little differently. absolute pitch representations (e.g., kern(), pitch()), \"boundary\" one octave next B (degree 7) C (degree 1). However, example, working data representing intervals, might think \"octave\" spanning range -P4 (G) +P4 (f). case, \"octave boundary\" centered around unison (), rather starting middle-C/unison. data represented way, use octave.round argument; octave.round must rounding function, either round, floor, ceiling, trunc, expand. functions indicate interpret simple pitches \"rounding\" nearest C/unison. default behavior pitch representations octave.round = floor: scale step rounded downwards nearest C. B associated C 7 steps . , hand, octave.round = round, scale-steps \"rounded\" closest C, B associated closer C . Indeed, octave.round = round gets us -P4 <-> +P4 behavior mentioned earlier! working parsing intervals, octave.round option allows control \"simple part\" (less octave) compound interval represented. example, might think ascending major 12th ascending octave plus ascending perfect 5th: ** +P8 + P5**. encode interval two ascending octaves minus perfect fourth: + P15 - P4. following table illustrates different octave.round arguments \"partition\" compound intervals simple parts octaves: Notice , octave.floor used, simple intervals represented ascending. parsing \"absolute\" pitch representations, octave.round option allows control octave notes associated . following table illustrates:","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"absolute-or-relative-contour-octave","dir":"Reference","previous_headings":"","what":"Absolute or Relative (contour) Octave","title":"Generating (","text":"notation encoding schemes, \"octave\" note interpreted relative previous note, rather absolute reference. prominent system Lilypond's relative octave entry style. style often used combination scale degree representations---RS200 corpus. example, data set might say Re Mi vSo La Ti , \"v\" indicating jump . activate relative-octave parsing, set octave.relative = TRUE---alternatively, can use octave.absolute = FALSE, equivalent. relative-octave data, assume octave indications indicate shift relative previous note. usually used combination octave markers like \"^\" () \"v\" (). Different combinations octave.round allow us parse different behaviors: octave.round = round, marker (marker) indicates note pitch closest previous pitch. Octave markers indicate alterations assumption. always, based scale steps, semitones! fourth \"closer\" fifth, regardless quality: C F# ascending C Gb descending! ascending diminished 5th written C ^Gb---= ^. octave.round = floor, marker (marker) indicates note octave previous pitch. Octave markers indicate alterations assumption. setting, going C B always requires mark.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"string-parsing","dir":"Reference","previous_headings":"","what":"String Parsing","title":"Generating (","text":"addition three types musical parsing considerations reviewed (steps, species, octaves), also general string-parsing issues can consider/control.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchDeparsing.html","id":"parts-and-order","dir":"Reference","previous_headings":"","what":"Parts and Order","title":"Generating (","text":"far () discussed various ways tonal pitch information (step, species, octave) can encoded, humdrumR parser can modified handle different options. However, two general parsing issues/options consider: information encoded, order? parts argument can specifyied indicate . parts argument must character vector length 1--3. characters must partial match either \"step\", \"species\", \"octave\". presense strings parts vector indicate information parsed. order strings indicates order pieces pitch information encoded input strings. illustrate, imagine input data identical standard interval representation---e.g., M2 P5---except quality appears step---e.g., 2M 5P. call interval(c(\"2M\", \"5P\"), parse(parts = c(\"step\", \"species\"))) sure enough get correct parse! One final string-parsing argument sep, indicates character string separating pitch information components: common case comma space. example, use parse command like : kern(\"E flat 5\", parse(flat = \"flat\", sep = \" \")).","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchFunctions.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate between pitch representations. — pitchFunctions","title":"Translate between pitch representations. — pitchFunctions","text":"functions can used extract \"translate,\" otherwise modify, data representing pitch information. functions :","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchFunctions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate between pitch representations. — pitchFunctions","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). generic (logical, length == 1) generic = TRUE \"specific\" pitch information (accidentals qualites) discarded. simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. parseArgs (list) parseArgs can list arguments passed pitch parser. transposeArgs (list) transposeArgs can list arguments passed special call transpose. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchFunctions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate between pitch representations. — pitchFunctions","text":"NULL inputs (x argument) return NULL output. Otherwise, returns vector/matrix length/dimension x. NA values input x propagated output.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchFunctions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Translate between pitch representations. — pitchFunctions","text":"Tonal pitch representations Absolute pitch representations kern() pitch() lilypond() helmholtz() tonh() (German-style notation) Relative pitch representations interval() solfa() (relative-solfege) solfg() (French-style fixed-solfege) degree() (absolute scale degrees) deg() (melodic scale degrees) bhatk() (hindustani swara) Partial pitch representations step() accidental() quality() octave() Atonal pitch representations Musical pitch representations semits() midi() cents() pc() (pitch classes) Physical pitch representations freq() pitch functions work similar ways, similar arguments functionality. function takes input pitch representation (can anything) outputs pitch representation. example, kern() takes input representation outputs **kern (pitch) data. Underneath hood, full processing function looks like : Input representation (e.g., **pitch **semits) |> Parsing (done tonalInterval()) |> Intermediate (tonalInterval) representation |> Transformation (e.g., transpose()) |> Deparsing |> Output representation (e.g. **kern **solfa) read details parsing step, read . read details \"deparsing\" step, read . read details specific function, click links list , type ?func R command line: example, ?kern.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":null,"dir":"Reference","previous_headings":"","what":"Parsing pitch information — pitchParsing","title":"Parsing pitch information — pitchParsing","text":"humdrumR includes easy--use powerful system parsing pitch information: various basic pitch representations (including numeric character-string representations) can \"parsed\"---read interpreted humdrumR. part, parsing automatically happens \"behind scenes\" whenever use humdrumR pitch function, like kern() semit(), solfa().","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parsing pitch information — pitchParsing","text":"","code":"tonalInterval(...)  # S3 method for tonalInterval tonalInterval(x, ...)  # S3 method for logical tonalInterval(x, ...)  # S3 method for `NULL` tonalInterval(x, ...)  # S3 method for numeric tonalInterval(x, Exclusive = NULL, ..., multiDispatch = FALSE)  # S3 method for character tonalInterval(x, Exclusive = NULL, str, ..., multiDispatch = FALSE)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parsing pitch information — pitchParsing","text":"Exclusive (character,  length == 1 | length == length(x)) str (character numeric) input vector. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used interpret pitch representations. example, use implicitSpecies (see advanced parsing section) dependent Key. output tonalInterval output within key: thus, tonalInterval('C#', Key = \":\") returns tint representing Major 3rd, C# major third major.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parsing pitch information — pitchParsing","text":"underlying parser used humdrumR pitch functions can called explicitly using function tonalInterval(). tonalInterval parser attempt parse input information tonalInterval object---back-end pitch representation probably need care ! use one main pitch functions, like kern() semits(), input parsed tonalInterval object, immediately deparsed representation asked (e.g., **kern **semits). Thus, underlying pipeline humdrumR pitch functions looks something like: Input representation (e.g., **pitch **semits) |> Parsing (done tonalInterval()) |> Intermediate (tonalInterval) representation |> Deparsing |> Output representation (e.g. **kern **solfa) documentation talks parsing step. overview \"deparsing\" process, look . learn \"deparsing\" specific representations, start go straight docs specific functions--- example, call ?kern learn kern().","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"dispatch","dir":"Reference","previous_headings":"","what":"Dispatch","title":"Parsing pitch information — pitchParsing","text":"pitch parser (tonalInterval) generic function, meaning can accepts variety inputs automatically \"dispatches\" appropriate method parsing input. R's standard S3 system used dispatch either numeric character-string input: Generally, numeric (integer) inputs interpreted various atonal pitch representations character strings interpreted various tonal pitch representations. Given either character string number, humdrumR uses either regular-expression matching humdrum exclusive interpretation matching dispatch specific parsing methods.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"tonal-parsing-character-string-inputs-","dir":"Reference","previous_headings":"","what":"Tonal Parsing (character-string inputs)","title":"Parsing pitch information — pitchParsing","text":"Since humdrum data inherently string-based, powerful part humdrumR pitch-parser system parsing pitch (mostly tonal) information character strings. (includes character tokens pitch information embedded alongside information; Details .) pitch parser (tonalInterval) uses combination regular-expressions exclusive interpretations decide parse input string. twelve regular-expression patterns pitch tonalInterval knows parse automatically:","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"exclusive-dispatch","dir":"Reference","previous_headings":"","what":"Exclusive Dispatch","title":"Parsing pitch information — pitchParsing","text":"call tonalInterval (pitch function) character-string vector, non-NULL Exclusive argument, Exclusive argument used choose input interpretation want, based \"Exclusive\" column table . example, kern(x, Exclusive = 'solfa') force parser interpret x **solfa data. Similarly, solfa(x, Exclusive = 'kern') force parser interpret x **kern data. use pitch function within special call withinHumdrum, humdrumR automatically pass Exclusive field humdrum data function---means, cases, need explicitly anything Exclusive argument! (want happen, need explicitly specify Exclusive argument, Exclusive = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"regex-dispatch","dir":"Reference","previous_headings":"","what":"Regex Dispatch","title":"Parsing pitch information — pitchParsing","text":"call tonalInterval (pitch function) character-string vector, Exclusive argument missing NULL, humdrumR instead use regular-expression patterns select known interpretation. example, pitch('') automatically recognize '' solfege, interpret data accordingly (output G4). one matches, humdrumR use longest match, tie, pick based order table (topmost first). match, tonalInterval (pitch function) return NA values. Remember, Exclusive specified, overrides regex-based dispatch, means pitch('', Exclusive = 'kern') return NA, '' interpreted **kern value.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"-in-place-parsing","dir":"Reference","previous_headings":"","what":"\"In place\" parsing","title":"Parsing pitch information — pitchParsing","text":"lots humdrum data, character strings encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find , using appropriate known regular expressions. Various pitch parsing functions option keep original \"extra\" data, using inPlace argument.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"advanced-tonal-parsing-options","dir":"Reference","previous_headings":"","what":"Advanced Tonal Parsing Options","title":"Parsing pitch information — pitchParsing","text":"eleven tonal representations listed parsed common intesrface. using \"advanced\" parsing arguments, can tweak parsing done, accommodate even input representations! means controlling behavior tonalInterval(), second step pipeline: Input representation |> Parsing (done tonalInterval(PARSE ARGS GO !)) |> Intermediate (tonalInterval) representation |> Deparsing |> Output representation Note arguments similar identical parallel \"advanced\" deparsing arguments used various pitch functions. following \"advanced\" parsing arguments available (read details ): Steps step.labels step.signed Species (accidentals qualities) qualities specifier.maximum Accidentals natural, flat, sharp, doubleflat, doublesharp Qualities perfect, major, minor, augment, diminish Implicit vs Explicit Species implicitSpecies absoluteSpecies memory, memoryWindows Octave octave.integer , , octave.offset octave.round octave.relative, octave.absolute String parsing parts sep \"advanced\" arguments can used directly pitch function, call tonalInterval . use tonalInterval just specify directly arguments: example, tonalInterval(x, qualities = TRUE). use pitch functions, can either... Put parseArgs argument: kern(x, parseArgs = list(qualities = TRUE)) use \"syntactic sugar\" short-hand form: kern(x, parse(qualities = TRUE)) known Exclusive/Regex-dispatch combo (see table ) associated default parsing arguments. example, set Exclusive = 'kern' just use data look like **kern, flat argument set \"-\", However, , example, input data looked like **kern except used different flat symbol, like \"_\", modify parser: kern(\"EE_\", parse(flat = \"_\")) overrides default value **kern---notice, also updates **kern regular expression accordingly, works exactly standard kern() function.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"steps","dir":"Reference","previous_headings":"","what":"Steps","title":"Parsing pitch information — pitchParsing","text":"representation \"tonal\" pitch information include representation diatonic steps. can control parser reads diatonic steps pitch representation using step.labels argument. step.labels argument must atomic vector unique values, length positive multiple seven. Examples step.labels arguments currently used preset humdrumR pitch parsers include: parse(step.labels = c('', 'B', 'C', 'D', 'E', 'F', 'G')) --- (**Tonh) parse(step.labels = c('d', 'r', 'm', 'f', 's', 'l', 't')) --- (**solfa) parse(step.labels = c('', 'II', 'III', 'IV', 'V', 'VI', 'VII')) --- (roman numerals) step.labels NULL, steps assumed represented integers, including negative integers representing downward steps. also step.signed (logical, length == 1) argument: step.signed = TRUE, lowercase versions step.labels interpreted negative (downward) steps uppercase versions step.labels interpreted positive (upwards) steps. option used, example, default kern() helmholtz() parsers.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"species","dir":"Reference","previous_headings":"","what":"Species","title":"Parsing pitch information — pitchParsing","text":"tonal pitch representations, \"specific\" versions tonal pitches---tonal \"species\"---indicated \"specifiers\": either accidentals qualities. qualities (logical, length == 1) argument indicates whether accidentals used (qualities = FALSE) qualities (qualities = TRUE). specifiers can repeated number times, like \"triple sharps\" \"doubly augmented\"; specifier.maximum (integer, length == 1) argument sets maximum limit number specifiers read. example, force triple sharps (\"###\") double sharps (\"##\") parse just \"#\", specifying specifier.maximum = 1L.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"accidentals","dir":"Reference","previous_headings":"","what":"Accidentals","title":"Parsing pitch information — pitchParsing","text":"qualities = FALSE parser look accidentals input, recognizing three types: naturals, flats, sharps. natural, flat, /sharp (character, length == 1) arguments can used indicate accidentals represented input. example, input strings look like c(\"Eflat\", \"C\"), set argument flat = \"flat\". Examples accidental argument combinations currently used preset humdrumR pitch parsers include: parse(flat = \"b\", sharp = \"#\") -> **pitch parse(flat = \"-\", sharp = \"#\") -> **kern parse(flat = \"-\", sharp = \"+\") -> **degree doubleflat, doublesharp (character, length == 1) arguments NULL default, can set special symbol used represent two sharps flats. example, might input represents double sharps \"x\". call kern(\"Fx\", parse(doublesharp = \"x\")) output \"F##\".","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"qualities","dir":"Reference","previous_headings":"","what":"Qualities","title":"Parsing pitch information — pitchParsing","text":"qualities = TRUE parser look qualities input, recognizing five types: perfect, minor, major, augmented, diminished. perfect, major, minor, diminish, /augment (character, length == 1) arguments can used indicate qualities represented input. (Note: talking interval/degree qualities , chord qualities!) example, input strings look like c(\"maj3\", \"p4\"), set arguments major = \"maj\" perfect = \"p\". Examples quality argument combinations currently used humdrumR pitch functions include: parse(major = \"M\", minor = \"m\", perfect = \"P\", diminish = \"d\", augment = \"\") parse(diminish = \"o\", augment = \"+\")","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"implicit-vs-explicit-species","dir":"Reference","previous_headings":"","what":"Implicit vs Explicit Species","title":"Parsing pitch information — pitchParsing","text":"musical data, specifiers (e.g., accidentals qualities) explicitly indicated; instead, must infer species pitch context---like key signature!.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"from-the-key","dir":"Reference","previous_headings":"","what":"From the Key","title":"Parsing pitch information — pitchParsing","text":"important argument implicitSpecies (logical, length == 1): implicitSpecies = TRUE, species input without explicit species indicated interpreted using Key. example, kern('C', Key = ':', parse(implicitSpecies = TRUE)) parsed \"C#\" C sharp major. kern('C', Key = ':', parse(implicitSpecies = TRUE)) parsed \"C\" C natural minor. kern('C', Key = '-:', parse(implicitSpecies = TRUE)) parsed \"C-\" C flat -flat minor. default, input already specifiers, interpreted absolutely---overriding \"implicit\" Key---, even implicitSpecies = TRUE. Thus, major: kern(\"C#\", Key = ':', parse(implicitSpecies = TRUE)) parsed \"C#\". \"#\" unnecessary. kern(\"Cn\", Key = ':', parse(implicitSpecies = TRUE)) parsed \"C\". \"n\" overrides Key. kern(\"C#\", Key = ':', parse(implicitSpecies = TRUE)) parsed \"C#\". \"#\" overrides Key. However! can also change behavior setting absoluteSpecies (logical, length == 1) argument FALSE. , specifiers input interpreted \"top \" key accidental: kern(\"C#\", Key = ':', parse(implicitSpecies = TRUE, absoluteSpecies = FALSE)) parsed \"C##\". \"#\" input added \"#\" Key, resulting double sharp! unusual behavior, absolute pitch representations like **kern. However, use scale chord degrees, absoluteSpecies = FALSE might appropriate. example, reading figured bass key E minor, \"b7\" figure E bass interpreted double flat (diminished) 7th (Db E)! data encoded, use absoluteSpecies = FALSE.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"memory","dir":"Reference","previous_headings":"","what":"Memory","title":"Parsing pitch information — pitchParsing","text":"musical data, assume accidental note \"stays effect\" scale step next bar, different accidental replaces . Fortunately, humdrumR parser (tonalInterval()) also knows parse data encoded \"memory\" way. memory = TRUE, accidental (quality) input note \"remembered\" previous appearances scale step. example, kern(c(\"D#\", \"E\", \"D\", \"E\", \"Dn\", \"C\", \"D\"), parse(memory = TRUE)) parsed c(\"D#\", \"E\", \"D#\", \"E\", \"D\", \"C\", \"D\") want \"memory\" last specific time windows (like bars), can also specify memoryWindows argument. memoryWindows must atomic vector length input (x argument). unique value within memoryWindows vector treated \"window\" within memory operates. common use case pass Bar field humdrumR dataset memoryWindows! memory memoryWindows argument work whatever values implicitSpecies absoluteSpecies specified! Though examples use accidentals, arguments effect parsing qualities (qualities = TRUE).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"octave","dir":"Reference","previous_headings":"","what":"Octave","title":"Parsing pitch information — pitchParsing","text":"final piece information encoded () pitch representations indication \"compound pitch\"--- incorporating octave information. humdrumR octaves always defined terms scale steps: two notes scale degree/letter name always octave. mainly comes regards Cb B#: Cb4 semitone ; B#3 enharmonically middle-C.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"integer-octaves","dir":"Reference","previous_headings":"","what":"Integer Octaves","title":"Parsing pitch information — pitchParsing","text":"simplest way octave information can encoded integer value, Scientific Pitch. need parse integer-encoded octaves, set octave.integer (logical, length == 1) argument TRUE. default, humdrumR considers \"central\" octave (octave == 0) octave , equivalently, unison. However, different octave used central octave, can specify octave.offset (integer, length == 1) argument. illustrate, default Scientific Pitch parser used arguments: kern('C5', parse(octave.integer = TRUE, octave.offset = 4) Returns \"cc\" (octave middle C).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"non-integer-octave-markers","dir":"Reference","previous_headings":"","what":"Non-integer Octave Markers","title":"Parsing pitch information — pitchParsing","text":"octave.integer = FALSE, humdrumR parser instead looks three possible symbols indicate octave information. symbols controlled using , , (character, length == 1) arguments. symbol, symbol, interpreted \"central\" octave; repeating strings symbols indicate increasing positive () negative () octaves. example, lilypond notation, , represents lower octaves, ' (single apostrophe) represents upper octaves. default lilypond() parser uses arguments: pitch(c(\"c\", \"c\", \"c'\"), parse(octave.integer = FALSE, = \"'\", = \",\", octave.offset = 1)) Returns c(\"C2\", \"C3\", \"C4\"). (Note lilypond makes octave  central octave, using octave.offset = 1.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"octave-rounding-","dir":"Reference","previous_headings":"","what":"Octave \"Rounding\"","title":"Parsing pitch information — pitchParsing","text":"situations, pitch data might interpret \"boundaries\" octaves little differently. absolute pitch representations (e.g., kern(), pitch()), \"boundary\" one octave next B (degree 7) C (degree 1). However, example, working data representing intervals, might think \"octave\" spanning range -P4 (G) +P4 (f). case, \"octave boundary\" centered around unison (), rather starting middle-C/unison. data represented way, use octave.round argument; octave.round must rounding function, either round, floor, ceiling, trunc, expand. functions indicate interpret simple pitches \"rounding\" nearest C/unison. default behavior pitch representations octave.round = floor: scale step rounded downwards nearest C. B associated C 7 steps . , hand, octave.round = round, scale-steps \"rounded\" closest C, B associated closer C . Indeed, octave.round = round gets us -P4 <-> +P4 behavior mentioned earlier! working parsing intervals, octave.round option allows control \"simple part\" (less octave) compound interval represented. example, might think ascending major 12th ascending octave plus ascending perfect 5th: ** +P8 + P5**. encode interval two ascending octaves minus perfect fourth: + P15 - P4. following table illustrates different octave.round arguments \"partition\" compound intervals simple parts octaves: Notice , octave.floor used, simple intervals represented ascending. parsing \"absolute\" pitch representations, octave.round option allows control octave notes associated . following table illustrates:","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"absolute-or-relative-contour-octave","dir":"Reference","previous_headings":"","what":"Absolute or Relative (contour) Octave","title":"Parsing pitch information — pitchParsing","text":"notation encoding schemes, \"octave\" note interpreted relative previous note, rather absolute reference. prominent system Lilypond's relative octave entry style. style often used combination scale degree representations---RS200 corpus. example, data set might say Re Mi vSo La Ti , \"v\" indicating jump . activate relative-octave parsing, set octave.relative = TRUE---alternatively, can use octave.absolute = FALSE, equivalent. relative-octave data, assume octave indications indicate shift relative previous note. usually used combination octave markers like \"^\" () \"v\" (). Different combinations octave.round allow us parse different behaviors: octave.round = round, marker (marker) indicates note pitch closest previous pitch. Octave markers indicate alterations assumption. always, based scale steps, semitones! fourth \"closer\" fifth, regardless quality: C F# ascending C Gb descending! ascending diminished 5th written C ^Gb---= ^. octave.round = floor, marker (marker) indicates note octave previous pitch. Octave markers indicate alterations assumption. setting, going C B always requires mark.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"string-parsing","dir":"Reference","previous_headings":"","what":"String Parsing","title":"Parsing pitch information — pitchParsing","text":"addition three types musical parsing considerations reviewed (steps, species, octaves), also general string-parsing issues can consider/control.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"parts-and-order","dir":"Reference","previous_headings":"","what":"Parts and Order","title":"Parsing pitch information — pitchParsing","text":"far () discussed various ways tonal pitch information (step, species, octave) can encoded, humdrumR parser can modified handle different options. However, two general parsing issues/options consider: information encoded, order? parts argument can specifyied indicate . parts argument must character vector length 1--3. characters must partial match either \"step\", \"species\", \"octave\". presense strings parts vector indicate information parsed. order strings indicates order pieces pitch information encoded input strings. illustrate, imagine input data identical standard interval representation---e.g., M2 P5---except quality appears step---e.g., 2M 5P. call interval(c(\"2M\", \"5P\"), parse(parts = c(\"step\", \"species\"))) sure enough get correct parse! One final string-parsing argument sep, indicates character string separating pitch information components: common case comma space. example, use parse command like : kern(\"E flat 5\", parse(flat = \"flat\", sep = \" \")).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"atonal-parsing-numeric-inputs-","dir":"Reference","previous_headings":"","what":"Atonal Parsing (numeric inputs)","title":"Parsing pitch information — pitchParsing","text":"humdrumR pitch parser (tonalInterval()) interpret numeric inputs atonal pitch information. default, numbers interpreted semitones. However, parses midi(), cents(),  frequencies also defined. Dispatch different parsers controlled Exclusive argument.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"enharmonic-interpretation","dir":"Reference","previous_headings":"","what":"Enharmonic Interpretation","title":"Parsing pitch information — pitchParsing","text":"converting atonal representation tonal one, must decide interpret tonality input---specifically, enharmonic spelling notes use.  humdrumR numeric parser interprets atonal pitches \"enharmonic window\" 12 steps line--fifths. position window set enharmonic.center (integer, length == 1) argument. default, enharmonic.center = 0, creates window -5 (b2) +6) (#4). prefer #1 instead b2, set enharmonic.center = 1. flats, set enharmonic.center = -1. sharps, set enharmonic.center = 4. enharmonic.center argument work translating pitch representation, like kern(). However, present table terms scale degrees atonal -> enharmonic calculation centered key. , Key argument specified, \"enharmonic window\" centered around key. translating kern Key = F#:, output range Gn B#. want , set Key = NULL.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/pitchParsing.html","id":"melodic-interpretation-of-chromatic-notes","dir":"Reference","previous_headings":"","what":"Melodic Interpretation of Chromatic Notes","title":"Parsing pitch information — pitchParsing","text":"common chromatic notes melodic passages labeled based melodic contour: .e., ascending chromatic notes labeled sharp descending chromatic notes labeled flat. behavior can engaged setting accidental.melodic (logical, length == 1) argument. accidental.melodic = TRUE, input first centered enharmonic window (), places chromatic alteration proceeds upwards non-chromatic note altered (necessary) sharp, vice verse descending notes flats. example, kern(0:2) returns c(\"c\", \"d-\", \"d\"), kern(0:2, parse(accidental.melodic = TRUE)) returns c(\"c\", \"c#\", \"d\").","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/plotRhythm.html","id":null,"dir":"Reference","previous_headings":"","what":"------------------------------------------->             NEEDS DOCUMENTATION             <-------------------------------------------\nPlotting rhythmic symbols in R base graphics — plotRhythm","title":"------------------------------------------->             NEEDS DOCUMENTATION             <-------------------------------------------\nPlotting rhythmic symbols in R base graphics — plotRhythm","text":"------------------------------------------->             NEEDS DOCUMENTATION             <------------------------------------------- Plotting rhythmic symbols R base graphics","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/plotRhythm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"------------------------------------------->             NEEDS DOCUMENTATION             <-------------------------------------------\nPlotting rhythmic symbols in R base graphics — plotRhythm","text":"","code":"plotRhythm(x, y, notes, ...)  # S3 method for default plotRhythm(x, y, notes, ...)  # S3 method for rhythmInterval plotRhythm(x, y, notes, ...)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/quality.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract quality from pitch — quality","title":"Extract quality from pitch — quality","text":"Extract quality pitch","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/quality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract quality from pitch — quality","text":"","code":"quality(x, ..., Key = NULL, parseArgs = list(), inPlace = FALSE)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/quality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract quality from pitch — quality","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ).","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/rational.html","id":null,"dir":"Reference","previous_headings":"","what":"Rational numbers — rational","title":"Rational numbers — rational","text":"R built rational number representation; humdrumR defines one.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/rational.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rational numbers — rational","text":"","code":"rational(numerator, denominator = 1L)  e1 %R% e2  numerator(x)  denominator(x)  # S4 method for rational numerator(x)  # S4 method for rational denominator(x)  is.rational(x)  # S4 method for rational is.numeric(x)  # S4 method for Rational order(   x,   ...,   na.last = TRUE,   decreasing = FALSE,   method = c(\"auto\", \"shell\", \"radix\") )  # S4 method for rational,rational Compare(e1, e2)  # S4 method for rational,ANY Compare(e1, e2)  # S4 method for ANY,rational Compare(e1, e2)  # S4 method for rational Summary(x)  # S4 method for rational prod(x, ..., na.rm = FALSE)  # S4 method for rational abs(x)  # S4 method for rational sign(x)  # S4 method for rational max(x, ..., na.rm = FALSE)  # S4 method for rational min(x, ..., na.rm = FALSE)  # S4 method for rational mean(x)  # S4 method for rational sum(x, ..., na.rm = FALSE)  # S4 method for rational cumsum(x)  as.rational(x, ...)  # S4 method for rational as.rational(x)  # S4 method for matrix as.rational(x)  # S4 method for integer as.rational(x)  # S4 method for numeric as.rational(x)  # S4 method for logical as.rational(x)  # S4 method for character as.rational(x, sep = \"/|%\")  fraction(numerator, denominator, sep = \"/\")  as.fraction(x, sep = \"/\")"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/rational.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rational numbers — rational","text":"Using rational numbers, can represent numbers like 1/3 without numeric inaccuracies. words, \\(1/3 * 3 = 3\\), never \\(.999999999\\). hand, rational numbers start numerators demoninators large, can run integer overflow problems. assume rational numbers using context music analysis relatively simple; can safely use numbers without numeric inaccuracy. fraction class (associated constructor) represents rational numbers character strings. Unlike rational, fraction class numeric thus arithmetic. However, fraction can converted /rational.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/readHumdrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Find and read humdrum files into R — readHumdrum","title":"Find and read humdrum files into R — readHumdrum","text":"functions find valid humdrum files local machine read humdrumR.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/readHumdrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find and read humdrum files into R — readHumdrum","text":"","code":"findHumdrum(   ...,   contains = NULL,   recursive = FALSE,   allowDuplicates = FALSE,   verbose = FALSE )  readHumdrum(   ...,   recursive = FALSE,   contains = NULL,   allowDuplicates = FALSE,   verbose = FALSE,   tandems = \"known\",   reference = \"all\" )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/readHumdrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find and read humdrum files into R — readHumdrum","text":"... character: One patterns used identify files read. details: see \"REpath-patterns\" section . contains character. !.null(contains), contains argument treated regular expressions: files contain matches regular expressions read. Thus, readHumdrum('.*krn$', contains = \"EEE\") read kern files contain matches \"EE\"---kern E two octaves middle C (lower). recursive logical: TRUE, final part search pattern (.e., file search) searched recursively sub directories. allowDuplicates logical length one, indicating happen multiple search patterns match files. allowDuplicates = TRUE, files read multiple times, grouped respective corpora Label field. allowDuplicates = FALSE, redundant files read corpus first pattern match. verbose logical: TRUE, names matching files printed parsing begins. useful check make sure reading wrong files! tandems character. argument controls , , tandem interpretations parsed fields. default value \"known\". reference character. argument controls , , reference records parsed fields. default value \"\".","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/readHumdrum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find and read humdrum files into R — readHumdrum","text":"findHumdrum work finding reading text files R. readHumdrum utilizes findHumdrum read files, parses create humTable build humdrumR data object around table.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/readHumdrum.html","id":"repath-patterns","dir":"Reference","previous_headings":"","what":"REpath-patterns","title":"Find and read humdrum files into R — readHumdrum","text":"\"REpath-patterns\" specified using ... arguments. combination, ... arguments used search file paths. part search path specify (\"dirpart/dirpart/filepart\", etc) matched regular expressions directories/files disc. Thus, can say things like findHumdrum(\"../^.*/.*krn$\"), match kern files directory beginning capital \"\" directory current working directory. conveniance, can break path across multiple arguments instead using delimited strings: example, code findHumdrum(\"..\", \"^.*\", \".*krn$\") give identical result previous example (findHumdrum(\"../^.*/,*krn$\")). useful searching one pattern (see next paragraph) directory. want search one pattern, can input character vector: instance, readHumdrum(c(\"mozart\", \"beethoven\")---command search filenames containing \"mozart\" \"beethoven.\" works directories : readHumdrum(c(\"Mozart\", \"Beethoven\"), \".*krn$\") look kern files directories containing \"Mozart\" \"Beethoven.\" patterns named, names show identifying patterns [humdrumR][humdrumR] object's Label field. Unnamed patterns simply labeled numbers. Normal (system appropriate) conventions (.e., directories separated \"/\", '~' beginning indicate home, \"..\" indicate directory working directory, etc.) followed. pattern contains solo dot followed file sep---e.g., \"./\", \"x/./y\"---treated current directory, regular expression. pattern contains two dots---e.g., \"../\"---treated directory , regular expression. want create regular expression match directory, use \".*/\". regex pattern \"\" matches file (changed \".*\"). specifiy ... argument, findHumdrum (readHumdrum) default \".*\" well. Thus, readHumdrum() read humdrum files working directory. (two files different directories share name, unique name created file appending names directories occupy, recursively names unique.) single humdrum file multiple pieces ---meaning spine paths close *-, open **---parsed separetely. distinguished Piece field. multi-piece files, Piece File identical.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/readHumdrum.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"Find and read humdrum files into R — readHumdrum","text":"findHumdrum readHumdrum automatically ignore non-text files. Whatsmore, files contain humdrum syntax errors (checked validateHumdrum()) automatically skipped. want see specifically errors occured, call validateHumdrum() directly use errorReport.path argument.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/readHumdrum.html","id":"tandem-interpretations","dir":"Reference","previous_headings":"","what":"Tandem Interpretations","title":"Find and read humdrum files into R — readHumdrum","text":"tandems argument controls tandem interpretations parsed fields. can helpful either save processing time memory parsing interpretations need, parse interpretations humdrumR recognize. \"known\" tandem interpretations humdrumR recognizes encoded build humdrumR table called knownInterpretations. interpretation humdrumR name (\"Clef\", \"TimeSignature\", etc.) well regular expression associated . default value tandems argument \"known\". tandems argument contains \"known\" tandem interpretations built-knownInterpretations table parsed. Users may specify different interpretations parse two ways: character strings matching one name values Name column knownInterpretations. instance, specify tandems = c('Clef', 'TimeSignature'), clef (e.g., \"*clefG2\"), time signature (e.g., \"*M3/4\") intepretations parsed. chracter string(s) tandem exactly match one names knownInterpretations$Name, treated regular expressions used match tandem interpretations data. allows users parse non-standard tandem interpretations humdrumR already know . values tandems named, names used resulting fields. matches given interpretation found, field created interpretation. tandems = NULL, tandem interpretations parsed.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/readHumdrum.html","id":"reference-records","dir":"Reference","previous_headings":"","what":"Reference Records","title":"Find and read humdrum files into R — readHumdrum","text":"default (reference = \"\"), humdrumR reads reference records data. reference code record (e.g, \"OTL\", \"!!!OTL: xxx\") used name associated field. (reference record reference code (.e., lacks colon), field called \"Unkeyed.\") large datasets many reference records, reference data can actually make large portion humdrum table, eat lot memory. cases, might want read () reference records---can instead read reference records planning use analyses (). reference = NULL, reference records parsed. Otherwise, character values reference treated reference codes matching reference records parsed. instance, readHumdrum(_, reference = \"OTL\") parse OTL reference records. values reference named, names used name associated fields. Thus, specifing reference = c(Title = 'OTL'), can use \"OTL\" reference records populate field called \"Title\". one reference records reference code, either explicitely numbered (e.g., \"!!!COM1:\", \"!!!COM2:\") read rather making two fields, single field created (\"COM\" ) multiple values separated \";\".","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/readHumdrum.html","id":"result","dir":"Reference","previous_headings":"","what":"Result","title":"Find and read humdrum files into R — readHumdrum","text":"findHumdrum returns \"fileFrame\" (data.table), listing file names, patterns match, directories found , raw text content files. readHumdrum returns fully parsed humdrumR object.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/readHumdrum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find and read humdrum files into R — readHumdrum","text":"","code":"readHumdrum() # loads all valid humdrum files in the current directory. #> Finding and reading files... #> \tREpath-pattern '.*' matches 100 text files in 1 directory. #> One-Hundred files read from disk. #> Validating one-hundred files... #> 22,273 errors in 101 files... #> zero valid files. #> NULL  readHumdrum(\".*krn$\") # loads all files ending with \"krn\" in the currect directory #> Finding and reading files... #> \tREpath-pattern '.*krn$' matches 0 text files in 1 directory. #> Zero files read from disk. #> No files to validate. #> NULL  readHumdrum(\"^Composers$/^Be|^Mo/.*/^Joined$/.*krn$\")  #> Finding and reading files... #> \tREpath-pattern '^Composers$/^Be|^Mo/.*/^Joined$/.*krn$' matches 0 text files in 0 directories. #> Zero files read from disk. #> No files to validate. #> NULL # Goes inside the directory \"Composers\". # Inside \"Composers\" looks for directories that start with \"Be\" or \"Mo\". # If there are any \"Be|Mo\" matching directories within \"Composers\", matches all directories within them. # Within these directories, looks for directories called \"Joined\". # If there are any directories called \"Joined\", loads all files (if any) that end with \"krn\".  readHumdrum(\"^Composers$\", \"^Be|^Mo\", \".*\", \"^Joined$\", \".*krn$\") #> Finding and reading files... #> \tREpath-pattern '^Composers$/^Be|^Mo/.*/^Joined$/.*krn$' matches 0 text files in 0 directories. #> Zero files read from disk. #> No files to validate. #> NULL # exactly the same as the previous!  readHumdrum(\"^Composers$\", c(Beethoven = \"^Be\", Mozart = \"^Mo\"), \".*\", \"^Joined$\", \".*krn$\")  #> Finding and reading files... #> \tREpath-pattern Beethoven = '^Composers$/^Be/.*/^Joined$/.*krn$' matches 0 text files in 0 directories.\tREpath-pattern Mozart = '^Composers$/^Mo/.*/^Joined$/.*krn$' matches 0 text files in 0 directories. #> Zero files read from disk. #> No files to validate. #> NULL # exactly the same as the previous, except now the two matching patterns (\"^Be\", or \"^Mo\") will be grouped # in the Label field as \"Beethoven\" and \"Mozart\" respectively."},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize reference records in a humdrumR corpus — reference","title":"Summarize reference records in a humdrumR corpus — reference","text":"reference one humdrumR's summary functions, used tabulate reference records present humdrumR corpus. reference takes humdrumR object returns humReference table. Alternatively, reference can take character string, check known reference codes print information matching codes. instance, reference('OTL') returns description standard humdrum !!!OTL reference record (original title metadata).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize reference records in a humdrumR corpus — reference","text":"","code":"reference(x)  reference('OTL')  reference(humdata)  # S3 method for humReference [(refTable, i, j, drop = FALSE)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/reference.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize reference records in a humdrumR corpus — reference","text":"humReference table one column reference code appears humdrumR corpus. Since reference records can long (much print one screen), humdrum files can multiple type reference code (instance multiple composers annotated \"!!!COM\"), default, humReference prints number type reference record appear file. However, one type reference code present humReference table, complete reference records code printed file. Likewise, one file present table, file's complete reference records printed. Thus, want see actualy reference records, try indexing humReference table one column row (see ). humReference table one row file corpus. Rows labeled file's corresponding number (humTable's File field) name (Filename field). addition, humReference object printed, three different summary totals printed reference code: indicates many files corpus least one example code . Sum indicates total number reference code appear corpus, including multiple appearances one file (like multiple \"!!!COM\" records). Finally, Unique tabulates number unique tokens reference code---corpus hase two unique composers (encoded \"!!!COM\"), Unique total 2.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/reference.html","id":"indexing","dir":"Reference","previous_headings":"","what":"Indexing","title":"Summarize reference records in a humdrumR corpus — reference","text":"humReference tables can indexed much like base R [data.frames][base::data.frame()],  two arguments: (rows) andj(columns). Ifiorjarenumeric, select rows columns respectively, ordinally. iis acharacter, matched regular expression filenames corpus. jis acharacter`, partially matched column names. drop argument also available. TRUE, plain [data.table][data.table::data.table()] returned.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/regexConstruction.html","id":null,"dir":"Reference","previous_headings":"","what":"Making Regular Expressions — regexConstruction","title":"Making Regular Expressions — regexConstruction","text":"humdrumR includes helpful functions creating new regular expressions work stringr package.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/regexConstruction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Making Regular Expressions — regexConstruction","text":"","code":"captureRE(strs, n = \"\")  captureUniq(strs, zero = TRUE)  orRE(...)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/regexConstruction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Making Regular Expressions — regexConstruction","text":"captureRE take character vector collapse \"capture group.\" n argument can used append number tag, instance '*' (zero ) group. .e., captureRE(c(\"\", \"b\", \"c\"), '*') output \"[abc]*\". captureUniq make similar capture group captureRE, expression makes sure 1 character repeats. instance, captureUniq(c('', 'b','c')) return \"([abc])\\\\1*\"---expression match \"aaa\" \"bb\" \"aabb\".","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/rhythmDecompose.html","id":null,"dir":"Reference","previous_headings":"","what":"Decompose durations in terms of other durations — rhythmDecompose","title":"Decompose durations in terms of other durations — rhythmDecompose","text":"Decompose durations terms durations","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/rhythmDecompose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decompose durations in terms of other durations — rhythmDecompose","text":"","code":"rhythmDecompose(rhythmInterval, into = rint(c(1, 2, 4, 8, 16, 32)))"},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/rhythmFunctions.html","id":null,"dir":"Reference","previous_headings":"","what":"Manipulate pitch data — rhythmFunctions","title":"Manipulate pitch data — rhythmFunctions","text":"Manipulate pitch data","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/rhythmFunctions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manipulate pitch data — rhythmFunctions","text":"","code":"recip(   x,   ...,   Exclusive = NULL,   parseArgs = list(),   timeArgs = list(),   inPlace = FALSE,   memoize = TRUE,   deparse = TRUE )  duration(   x,   ...,   Exclusive = NULL,   parseArgs = list(),   timeArgs = list(),   inPlace = FALSE,   memoize = TRUE,   deparse = TRUE )"},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/rhythmInterval.html","id":null,"dir":"Reference","previous_headings":"","what":"parse rhythmic information — rhythmInterval","title":"parse rhythmic information — rhythmInterval","text":"parse rhythmic information","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/rhythmInterval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parse rhythmic information — rhythmInterval","text":"","code":"rhythmInterval(x, ...)  # S3 method for default rhythmInterval(x, ...)  # S3 method for `NULL` rhythmInterval(x, ...)  # S3 method for character rhythmInterval(x, Exclusive = NULL, ..., multiDispatch = FALSE)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/romanNumerals.html","id":null,"dir":"Reference","previous_headings":"","what":"Roman Numeral — romanNumerals","title":"Roman Numeral — romanNumerals","text":"Roman numerals can calculated diatonicSets (keys) tertian sets (chords). later case standard meaning \"roman numeral.\" However, former case used well, instance represent modulation schemes analyses classical music. instance, modulate -V, vi/V. importantly, many \"roman numerals\" harmonic analyses implicitely combine tertian diatonic roman numerals: \"applied\" roman numerals. Given roman numeral like \"V65/V\", \"V65\" represents chord \"/V\" represents key.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/segments.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify contiguous segments of data in a vector — segments","title":"Identify contiguous segments of data in a vector — segments","text":"segments changes extremely useful functions...","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/segments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify contiguous segments of data in a vector — segments","text":"","code":"segments(x, reverse = FALSE)  changes(..., pad = TRUE, value = FALSE, any = TRUE, beforeChange = FALSE)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/semits.html","id":null,"dir":"Reference","previous_headings":"","what":"Atonal pitch representations — semits","title":"Atonal pitch representations — semits","text":"function translates pitch information basic atonal pitch values: midi semits map pitches standard 12-tone-equal-temperament semitone (integer) values. semits 0 (zero) middle-C (unison). contrast, MIDI pitch values output midi place middle-C/unison 60. cents returns cents, one hundredth semitone.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/semits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atonal pitch representations — semits","text":"","code":"semits(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE )  midi(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE )  cents(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE,   tonalHarmonic = 2^(19/12) )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/semits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atonal pitch representations — semits","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). generic (logical, length == 1) generic = TRUE \"specific\" pitch information (accidentals qualites) discarded. simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. transposeArgs (list) transposeArgs can list arguments passed special call transpose. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ). tonalHarmonic (numeric, length == 1) frequency \"tonal harmonic\" (perfect 10th) tuned ? default, value 2^(19/12), 12-tone equal-temperament10th. Pythagorean tuning, set tonalHarmonic = 3.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/semits.html","id":"cents","dir":"Reference","previous_headings":"","what":"Cents","title":"Atonal pitch representations — semits","text":"default, output cents simply semits(x) * 100. However, tonalHarmonic value can modified cents produce cent-values alternate tunings. example, cents('g', tonalHarmonic = 3) returns 701.955000865387, \"pure\" third harmonic (3) 1.955 sharper equal-temperment. Thus, whereas midi semits return integers, cents always returns real-number (double) values. TonalIntervals parsed frequencies might also arbitrary cent deviations. example, cents(440 * 10/9, Exclusive = 'freq') returns 1082.404---correspond \"minor tone\" =440.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/semits.html","id":"basic-pitch-arguments","dir":"Reference","previous_headings":"","what":"Basic pitch arguments","title":"Atonal pitch representations — semits","text":"pitch function standard arguments control details output. important generic simple arguments, allow control type pitch information returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/semits.html","id":"generic-vs-specific","dir":"Reference","previous_headings":"","what":"Generic vs Specific","title":"Atonal pitch representations — semits","text":"generic = TRUE, specific pitch information (accidentals qualities) omitted output. alternative way controlling functionality, can use specific argument, specific == !generic. case atonal functions, \"generic\" version pitch output: example, semits('c#', generic = TRUE) return 0, \"generic\" version C# C, corresponds 0. However, note generic version pitch follows key, semits('c#', generic = TRUE, Key = ':') return 1!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/semits.html","id":"simple-vs-compound","dir":"Reference","previous_headings":"","what":"Simple vs Compound","title":"Atonal pitch representations — semits","text":"simple = TRUE, compound pitch information (octave contour) omitted output. alternative way controlling functionality, can use compound argument ,compound == !simple. actually one way might want divide compound intervals simple octave parts. example, might like call output -M2 (descending major 2nd) +m7 (ascending minor 7th octave ). functionality can controlled octave.round argument: see pitch deparsing documentation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/semits.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"Atonal pitch representations — semits","text":"Key argument must diatonicSet, something can parsed one. Key argument passed parser, deparser, transpose---unless alternate Key passed transposeArgs parseArgs. Various deparsing options use Key argument; example, use implicitSpecies (see advanced parsing section) dependent Key. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function---means, cases, need explicitly anything Key argument! (want happen, need explicitly specify Key argument, Key = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/semits.html","id":"parse-arguments","dir":"Reference","previous_headings":"","what":"Parse arguments","title":"Atonal pitch representations — semits","text":"parseArgs argument must list() (named) arguments passed input parser. example, input representation uses \"X\" represent double sharps, specify kern('CX5', parseArgs = list(doublesharp = 'X')) get correct result (\"cc##\"). convenient shorthand, \"syntactic sugar,\" can specify parseArgs alternate way: Simply input parse(args...) unnamed argument pitch function. example, can get exact result typing kern('CX5', parse(doublesharp = 'X')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/semits.html","id":"transpose-arguments","dir":"Reference","previous_headings":"","what":"Transpose arguments","title":"Atonal pitch representations — semits","text":"transposeArgs argument must list() (named) arguments passed internal call transpose(), allowing us easily transpose pitch information. example, type kern(c('C', 'D', 'E'), transposeArgs = list(= 'M9')) can get output c('d', 'e', 'f#'). possible transpose args : (tonalInterval, length == 1 | length == (x)) (diatonicSet, length == 1 | length == (x))  (diatonicSet, length == 1 | length == (x)) real (logical, length == 1) transposition real tonal? relative (logical, length == 1) key-wise transposition based relative parallel keys? convenient shorthand, \"syntactic sugar,\" can specify transposeArgs alternate way: Simply input transpose(args...) unnamed argument pitch function. example, can get exact result typing kern(c('C', 'D', 'E'), transpose(= 'M9')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/semits.html","id":"transposing-by-interval","dir":"Reference","previous_headings":"","what":"Transposing by interval","title":"Atonal pitch representations — semits","text":"calling transpose() directly, argument can anything coercable tonalInterval, output transposed amount. real = FALSE, tonal transposition (within Key) performed. details transposition behavior, check transpose() docs.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/semits.html","id":"transposing-by-key","dir":"Reference","previous_headings":"","what":"Transposing by key","title":"Atonal pitch representations — semits","text":"Another way transposing specifying input (\"\") key output (\"\") key. default, Key argument passed transpose , nothing actually happens. Thus, specify either key key, transposition happen /key Key. course, specify transposition happen keys specify. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function. specify key, Key field passed transpose key, result, pitches input transposed whatever keys target () key! real relative arguments give special control key-wise transposition works, check transpose() docs details!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/semits.html","id":"in-place-parsing","dir":"Reference","previous_headings":"","what":"In-place parsing","title":"Atonal pitch representations — semits","text":"humdrum data, character strings often encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find using appropriate known regular expressions. example, pitch('4.ee-[') returns Eb5. However, pitch functions (like pitch() kern()) option keep \"extra\" information return result \"place\"---.e., embedded right found input string. controlled inPlace argument, FALSE default. , pitch('4.ee-[', inPlace = TRUE) return 4.Eb5[---keeping \"4.\" \"[\". (obviously works input string, numeric!) Note inPlace = TRUE force functions like semits, normally return numeric values, return character strings input character string.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/sigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative sum of numeric vector — sigma","title":"Cumulative sum of numeric vector — sigma","text":"Calculate sequential cummulative sum values numeric vectors.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/sigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative sum of numeric vector — sigma","text":"","code":"sigma(x, lag, skip = is.na, init, boundaries = list(), ...)  # S3 method for default sigma(x, lag = 1, skip = is.na, init = 0, boundaries = list(), ...)  # S3 method for matrix sigma(x, margin = 2L, ...)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/sigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative sum of numeric vector — sigma","text":"x (numeric vector.) NULL values returned NULL. lag (Non-zero integer.) lag use. (See Great lags section, .) skip (function.) must function can applied x returns logical vector length. TRUE values skipped calculations. default, skip function .na, NA values input (x argument) skipped. skipped values returned output vector. init (Atomic value class x, length(init) <= lag.) NA values beginning (end right == TRUE) filled values summing. boundaries (vector length x, list vectors) Differences calculated across groups indicated boundaries vector(s). right (single logical value) init padding \"right\" (end vector)? default, right == FALSE init padding beginning output.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/sigma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulative sum of numeric vector — sigma","text":"sigma similar base-R cumsum(). However, sigma favored humdrumR use : boundaries argument, automatically used humdrumR () commands constrain differences within files/spines/paths humdrum data. boundaries approach (details ) generally faster applying commands within groupby groups. (can) automatically skip NA () values. sigma also init argument can used ensure full invertability delta(). See \"Invertability\" section . applied matrix, sigma applied separately column, unless margin set 1 (rows) , higher-dimensional array, higher value.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/sigma.html","id":"invertability","dir":"Reference","previous_headings":"","what":"Invertability","title":"Cumulative sum of numeric vector — sigma","text":"sigma delta functions inverses , meaning right arguments set, sigma(delta(x)) == x delta(sigma(x)) == x. words, two functions \"reverse\" . key init argument needs set 0, arguments (lag, skip, boundaries, etc.) need match. actually,  sigma(delta(x, init = 0, ...)) == x delta(sigma(x), init = 0)) == x. take differences values (delta(x)), resulting differences tell us fully reconstruct original unless know \"start\" (constant offset). example, delta(c(5, 7, 5, 6)) == c(NA, 2, -2, 1) know input goes 2, back 2, 1, starting value (first 5) lost. call sigma , get: sigma(c(NA, 2, -2, 1)) == c(0, 2,0, 1) get right contour, offset constant 5. call delta(x, init = 0) necessary constant (first value) kept beginning vector delta(c(5, 7, 5, 6), init = 0) == c(5, 2, -2, 1) sigma gets want, full invertability: sigma(delta(c(5, 7, 5, 6), init = 0)) == c(5, 7, 5, 6) Alternatively, specify necessary constant init argument sigma: sigma(delta(c(5, 7, 5, 6)), init = 5) == c(5, 7, 5, 6) init arguments two functions complementary. Currently, right argument delta complement sigma, invertability holds true right = FALSE (default).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/sigma.html","id":"greater-lags","dir":"Reference","previous_headings":"","what":"Greater lags","title":"Cumulative sum of numeric vector — sigma","text":"behavior sigma abs(lag) > 1 easiest understand inverse behavior delta(abs(lag) > 1), intuitive. (sigma inverse delta(), see Invertability section ). Generally, abs(lag) > 1, x grouped indices modulo lag, cumulative sum calculated separately set modulo indices. example, consider lag == 2 following input: cumulative sum 1 0 modulo-index groups : Index 1: cumsum(c(1,2,5)) == c(1, 3, 8). Index 0: cumsum(c(3,2)) == c(3, 5) Interleaved back order, result c(1,3,3,5,8). may clear, sure enough delta(c(1, 3, 3, 5, 8), lag = 2, init = 0) returns original c(1,3,2,2,5) vector! , understanding delta(..., lag = n) easier sigma(..., lag = n) (see Invtertability section .)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/sigma.html","id":"negative-lag","dir":"Reference","previous_headings":"","what":"Negative lag","title":"Cumulative sum of numeric vector — sigma","text":"lag negative, output equivalent positive lag, except sign reversed (output * -1). behavior easiest understand inverse behavior delta(lag < 0), intuitive. (sigma inverse delta(), see Invertability section ).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/sigma.html","id":"boundaries","dir":"Reference","previous_headings":"","what":"Boundaries","title":"Cumulative sum of numeric vector — sigma","text":"many cases want perform lagged calculations vector, across certain boundaries. example, vector includes data multiple pieces, want calculate melodic intervals pieces, within pieces. boundaries argument indicates one, , grouping vectors, break x (input) argument groups. boundaries vectors given, change vector indicates boundary. Value pairs cross groups treated beginning. Basically, using boundaries essentially identical using tapply(x, boundaries, laggedFunction, ...), except generally faster number groups large. common use case humdrum data, looking \"melodies\" within spines. , want boundaries = list(File, Spine, Path ). fact, humdrumR () calls automatically feed three fields boundaries arguments certain functions: mint, delta, sigma, lag, ditto. use delta call (), automatically calculate delta \"melodic\" way, within spine path file. However, wanted, instance, calculate differences across spines (like harmonic intervals) manually set boundaries = list(File, Record).","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/silbeFormat.html","id":null,"dir":"Reference","previous_headings":"","what":"silbeFormat — silbeFormat","title":"silbeFormat — silbeFormat","text":"Check formatting lyrics correct, -'s right places (.e., denote start end syllable)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/silbeFormat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"silbeFormat — silbeFormat","text":"","code":"silbeFormat(cVector)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/silbeFormat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"silbeFormat — silbeFormat","text":"cVector data checked improper formatting (now, please read spine dataframe 1 column)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/silbeFormat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"silbeFormat — silbeFormat","text":"\"Formatted properly.\" lyrics formatted properly, else print error message corrections.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/silbeFormat.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"silbeFormat — silbeFormat","text":"function might detect multiple inconsistencies/errors given value particular index, help user determine exact issue(s) transcription.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfa.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative-do Solfege representation — solfa","title":"Relative-do Solfege representation — solfa","text":"Relative-Solfege representation","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative-do Solfege representation — solfa","text":"","code":"solfa(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative-do Solfege representation — solfa","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). generic (logical, length == 1) generic = TRUE \"specific\" pitch information (accidentals qualites) discarded. simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. transposeArgs (list) transposeArgs can list arguments passed special call transpose. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfa.html","id":"basic-pitch-arguments","dir":"Reference","previous_headings":"","what":"Basic pitch arguments","title":"Relative-do Solfege representation — solfa","text":"pitch function standard arguments control details output. important generic simple arguments, allow control type pitch information returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfa.html","id":"generic-vs-specific","dir":"Reference","previous_headings":"","what":"Generic vs Specific","title":"Relative-do Solfege representation — solfa","text":"generic = TRUE, specific pitch information (accidentals qualities) omitted output. alternative way controlling functionality, can use specific argument, specific == !generic. case atonal functions, \"generic\" version pitch output: example, semits('c#', generic = TRUE) return 0, \"generic\" version C# C, corresponds 0. However, note generic version pitch follows key, semits('c#', generic = TRUE, Key = ':') return 1!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfa.html","id":"simple-vs-compound","dir":"Reference","previous_headings":"","what":"Simple vs Compound","title":"Relative-do Solfege representation — solfa","text":"simple = TRUE, compound pitch information (octave contour) omitted output. alternative way controlling functionality, can use compound argument ,compound == !simple. actually one way might want divide compound intervals simple octave parts. example, might like call output -M2 (descending major 2nd) +m7 (ascending minor 7th octave ). functionality can controlled octave.round argument: see pitch deparsing documentation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfa.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"Relative-do Solfege representation — solfa","text":"Key argument must diatonicSet, something can parsed one. Key argument passed parser, deparser, transpose---unless alternate Key passed transposeArgs parseArgs. Various deparsing options use Key argument; example, use implicitSpecies (see advanced parsing section) dependent Key. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function---means, cases, need explicitly anything Key argument! (want happen, need explicitly specify Key argument, Key = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfa.html","id":"parse-arguments","dir":"Reference","previous_headings":"","what":"Parse arguments","title":"Relative-do Solfege representation — solfa","text":"parseArgs argument must list() (named) arguments passed input parser. example, input representation uses \"X\" represent double sharps, specify kern('CX5', parseArgs = list(doublesharp = 'X')) get correct result (\"cc##\"). convenient shorthand, \"syntactic sugar,\" can specify parseArgs alternate way: Simply input parse(args...) unnamed argument pitch function. example, can get exact result typing kern('CX5', parse(doublesharp = 'X')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfa.html","id":"transpose-arguments","dir":"Reference","previous_headings":"","what":"Transpose arguments","title":"Relative-do Solfege representation — solfa","text":"transposeArgs argument must list() (named) arguments passed internal call transpose(), allowing us easily transpose pitch information. example, type kern(c('C', 'D', 'E'), transposeArgs = list(= 'M9')) can get output c('d', 'e', 'f#'). possible transpose args : (tonalInterval, length == 1 | length == (x)) (diatonicSet, length == 1 | length == (x))  (diatonicSet, length == 1 | length == (x)) real (logical, length == 1) transposition real tonal? relative (logical, length == 1) key-wise transposition based relative parallel keys? convenient shorthand, \"syntactic sugar,\" can specify transposeArgs alternate way: Simply input transpose(args...) unnamed argument pitch function. example, can get exact result typing kern(c('C', 'D', 'E'), transpose(= 'M9')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfa.html","id":"transposing-by-interval","dir":"Reference","previous_headings":"","what":"Transposing by interval","title":"Relative-do Solfege representation — solfa","text":"calling transpose() directly, argument can anything coercable tonalInterval, output transposed amount. real = FALSE, tonal transposition (within Key) performed. details transposition behavior, check transpose() docs.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfa.html","id":"transposing-by-key","dir":"Reference","previous_headings":"","what":"Transposing by key","title":"Relative-do Solfege representation — solfa","text":"Another way transposing specifying input (\"\") key output (\"\") key. default, Key argument passed transpose , nothing actually happens. Thus, specify either key key, transposition happen /key Key. course, specify transposition happen keys specify. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function. specify key, Key field passed transpose key, result, pitches input transposed whatever keys target () key! real relative arguments give special control key-wise transposition works, check transpose() docs details!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfa.html","id":"in-place-parsing","dir":"Reference","previous_headings":"","what":"In-place parsing","title":"Relative-do Solfege representation — solfa","text":"humdrum data, character strings often encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find using appropriate known regular expressions. example, pitch('4.ee-[') returns Eb5. However, pitch functions (like pitch() kern()) option keep \"extra\" information return result \"place\"---.e., embedded right found input string. controlled inPlace argument, FALSE default. , pitch('4.ee-[', inPlace = TRUE) return 4.Eb5[---keeping \"4.\" \"[\". (obviously works input string, numeric!) Note inPlace = TRUE force functions like semits, normally return numeric values, return character strings input character string.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfg.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixed-do Solfege representation — solfg","title":"Fixed-do Solfege representation — solfg","text":"Based common French system notating pitches, encoded humdrum **solfg interpretation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixed-do Solfege representation — solfg","text":"","code":"solfg(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixed-do Solfege representation — solfg","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). generic (logical, length == 1) generic = TRUE \"specific\" pitch information (accidentals qualites) discarded. simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. transposeArgs (list) transposeArgs can list arguments passed special call transpose. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfg.html","id":"basic-pitch-arguments","dir":"Reference","previous_headings":"","what":"Basic pitch arguments","title":"Fixed-do Solfege representation — solfg","text":"pitch function standard arguments control details output. important generic simple arguments, allow control type pitch information returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfg.html","id":"generic-vs-specific","dir":"Reference","previous_headings":"","what":"Generic vs Specific","title":"Fixed-do Solfege representation — solfg","text":"generic = TRUE, specific pitch information (accidentals qualities) omitted output. alternative way controlling functionality, can use specific argument, specific == !generic. case atonal functions, \"generic\" version pitch output: example, semits('c#', generic = TRUE) return 0, \"generic\" version C# C, corresponds 0. However, note generic version pitch follows key, semits('c#', generic = TRUE, Key = ':') return 1!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfg.html","id":"simple-vs-compound","dir":"Reference","previous_headings":"","what":"Simple vs Compound","title":"Fixed-do Solfege representation — solfg","text":"simple = TRUE, compound pitch information (octave contour) omitted output. alternative way controlling functionality, can use compound argument ,compound == !simple. actually one way might want divide compound intervals simple octave parts. example, might like call output -M2 (descending major 2nd) +m7 (ascending minor 7th octave ). functionality can controlled octave.round argument: see pitch deparsing documentation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfg.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"Fixed-do Solfege representation — solfg","text":"Key argument must diatonicSet, something can parsed one. Key argument passed parser, deparser, transpose---unless alternate Key passed transposeArgs parseArgs. Various deparsing options use Key argument; example, use implicitSpecies (see advanced parsing section) dependent Key. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function---means, cases, need explicitly anything Key argument! (want happen, need explicitly specify Key argument, Key = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfg.html","id":"parse-arguments","dir":"Reference","previous_headings":"","what":"Parse arguments","title":"Fixed-do Solfege representation — solfg","text":"parseArgs argument must list() (named) arguments passed input parser. example, input representation uses \"X\" represent double sharps, specify kern('CX5', parseArgs = list(doublesharp = 'X')) get correct result (\"cc##\"). convenient shorthand, \"syntactic sugar,\" can specify parseArgs alternate way: Simply input parse(args...) unnamed argument pitch function. example, can get exact result typing kern('CX5', parse(doublesharp = 'X')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfg.html","id":"transpose-arguments","dir":"Reference","previous_headings":"","what":"Transpose arguments","title":"Fixed-do Solfege representation — solfg","text":"transposeArgs argument must list() (named) arguments passed internal call transpose(), allowing us easily transpose pitch information. example, type kern(c('C', 'D', 'E'), transposeArgs = list(= 'M9')) can get output c('d', 'e', 'f#'). possible transpose args : (tonalInterval, length == 1 | length == (x)) (diatonicSet, length == 1 | length == (x))  (diatonicSet, length == 1 | length == (x)) real (logical, length == 1) transposition real tonal? relative (logical, length == 1) key-wise transposition based relative parallel keys? convenient shorthand, \"syntactic sugar,\" can specify transposeArgs alternate way: Simply input transpose(args...) unnamed argument pitch function. example, can get exact result typing kern(c('C', 'D', 'E'), transpose(= 'M9')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfg.html","id":"transposing-by-interval","dir":"Reference","previous_headings":"","what":"Transposing by interval","title":"Fixed-do Solfege representation — solfg","text":"calling transpose() directly, argument can anything coercable tonalInterval, output transposed amount. real = FALSE, tonal transposition (within Key) performed. details transposition behavior, check transpose() docs.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfg.html","id":"transposing-by-key","dir":"Reference","previous_headings":"","what":"Transposing by key","title":"Fixed-do Solfege representation — solfg","text":"Another way transposing specifying input (\"\") key output (\"\") key. default, Key argument passed transpose , nothing actually happens. Thus, specify either key key, transposition happen /key Key. course, specify transposition happen keys specify. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function. specify key, Key field passed transpose key, result, pitches input transposed whatever keys target () key! real relative arguments give special control key-wise transposition works, check transpose() docs details!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/solfg.html","id":"in-place-parsing","dir":"Reference","previous_headings":"","what":"In-place parsing","title":"Fixed-do Solfege representation — solfg","text":"humdrum data, character strings often encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find using appropriate known regular expressions. example, pitch('4.ee-[') returns Eb5. However, pitch functions (like pitch() kern()) option keep \"extra\" information return result \"place\"---.e., embedded right found input string. controlled inPlace argument, FALSE default. , pitch('4.ee-[', inPlace = TRUE) return 4.Eb5[---keeping \"4.\" \"[\". (obviously works input string, numeric!) Note inPlace = TRUE force functions like semits, normally return numeric values, return character strings input character string.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/spines.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize spines in humdrum dataset. — spines","title":"Summarize spines in humdrum dataset. — spines","text":"spines one humdrumR's summary functions, used summarize spines spine paths pieces humdrumR corpus.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/spines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize spines in humdrum dataset. — spines","text":"","code":"spines(humdrumR)  # S3 method for humSpines [(spines, i, j)  # S3 method for humSpines print(spineTable, showEach = TRUE)"},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/step.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract scale step — step","title":"Extract scale step — step","text":"Extract scale step","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract scale step — step","text":"","code":"step(x, ..., simple = FALSE, Key = NULL, parseArgs = list(), inPlace = FALSE)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract scale step — step","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ).","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/struct.html","id":null,"dir":"Reference","previous_headings":"","what":"struct — struct","title":"struct — struct","text":"Virtual class help create atomic-vector-like composite data objects.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/struct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"struct — struct","text":"","code":"is.struct(x)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/struct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"struct — struct","text":"humdrumR defines number S4 classes , underneath surface, composite data types made collections base-R atomic vectors, stuck together. \"vectorized\" nature R's atomic types one R's key strengths, humdrumR try ) mostly use standard atomic types B) make new types define act much like atomic vectors possible. struct virtual S4 class serves purpose: creating composite atomic vectors act (mostly) like base-R atomic vectors. \"virtual class\" structs really exist independent objects, struct class defines (abstractly) necessarry methods treat collection atomic vectors single vector/matrix-like object---simply make new subclass inherit struct taken care . (, specify contains = \"struct\" call setClass.) Important humdrumR classes inherit struct include: tonal intervals diatonicSet tertianSet rational() warned, R's S4 object-system limited regard: really define S4 classes act fully like R atomics, many features hard-coded R replicated. important limitation struct may encounter , though struct classes work (ok) data.frames, data.tables tibbles either work give strange behaviors put structs .","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/struct.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"struct — struct","text":"dim Either NULL non-negative integer-vector length == 2L, representing number rows columns respectively. Dimensions can zero. rownames Either NULL integer/character-vector length either ) dim == NULL, length struct B) dim != NULL, number rows struct. colnames Either NULL (must NULL dim == NULL) integer/character-vector length equal number columns struct.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/struct.html","id":"behavior","dir":"Reference","previous_headings":"","what":"Behavior","title":"struct — struct","text":"struct subclasses (.e., classes inherit struct) behave similarly normal R atomic vectors/matrices. However, differ respects, mostly ways intended avoid quirky behaviors R matrices: general, distinction dimensionless vectors dimensioned vectors (matrices) slightly weaker structs normal R atomic vectors/matrices. importantly, dimensioned structs drop dimensions various common operations (c, [], etc.), way base-R matrices . general, easier interact multi-column (matrix-)struct way dimensionless (vector-)struct. example, struct dimensions length(struct) == nrow(struct), instead length(matrix) == nrow(matrix) * ncol(matrix)---.e., \"height\" struct (number rows) length. Another big difference behaviors c: c always cause structs lose dimensions c can used concatinated multi-column structs, even mixes dimensionless dimensioned structs: struct arguments c dimensions, structs concatinated via call rbind, dimensionless vectors coerced 1-column matrices. course, (resulting) number columns must error occur! differences: structs can either dimensions (dim(struct) == NULL) two dimensions. Higher dimensional structs supported (yet). rowSums colSums coerce dimensionless struct column matrix. structs always throw error try index index value greater length/nrow struct. different atomic vectors, pad vector length index give---sometimes useful quirky behavior. structs two dimensions cartesian indexing argument. cartesian = TRUE, j arguments treated cartesian coordinates. (behavior can achieved base R matrices (structs) inputing matrix two columns.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/struct.html","id":"requirements","dir":"Reference","previous_headings":"","what":"Requirements","title":"struct — struct","text":"work, struct makes assumptions class. class must one slots vectors, length. struct's indexing method cause vectors indexed one. define new subclass struct, inherit validObject method assures elements dimension. Thus, writing validObject method (using setValidity) just worry specifically validity information slots, slots length.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/struct.html","id":"initialize","dir":"Reference","previous_headings":"","what":"Initialize","title":"struct — struct","text":"initialize method automatically makes slots length predefined structs. want make specialized initialize method, can still take advantage inherited method using callNextMethod beginning method.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/struct.html","id":"predefined-methods","dir":"Reference","previous_headings":"","what":"Predefined methods","title":"struct — struct","text":"main purpose struct virtual class defines many basic methods need manipulate subclass objects. importantly, indexing methods fully defined (mimic base-R atomic vector/matrix indexing), well basic \"structural\" methods like (col/row)names, dim, length, ncol, nrow, etc. addition: define > >=, < <= automatically defined. define .character subclass, show format methods automatically defined. , default arithmetic methods addition, subtraction, (scalar-integer) multiplication, negation (-x) defined. default addition behavior numeric (base::integer base::numeric) slot subclasses added together. Thus, struct1 + struct2 extract numeric/integer slot struct, add together create new struct result. -struct negate numeric fields, subtraction simply defined adding negation. Since scalar multiplication defined, two structs multiplied, struct can multiplied integer (numeric fields multiplied integer(s)). definitions work subclass, need create , specific, method!","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/struct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"struct — struct","text":"","code":"setClass('mynewsubclass', contains = 'struct', slots = c(X= 'numeric', Y = 'numeric'))  test <- new('mynewsubclass', X = 1:10, Y = 10:1)  # all of these should work: test[1:5] #> mynewsubclass[ , ] #> [1] 1,10 2,9  3,8  4,7  5,6  rev(test)  == test #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE cbind(test, test) #> mynewsubclass #>       [,1] [,2] #>  [1,] 1,10 1,10 #>  [2,] 2,9  2,9  #>  [3,] 3,8  3,8  #>  [4,] 4,7  4,7  #>  [5,] 5,6  5,6  #>  [6,] 6,5  6,5  #>  [7,] 7,4  7,4  #>  [8,] 8,3  8,3  #>  [9,] 9,2  9,2  #> [10,] 10,1 10,1 c(test, test) #> mynewsubclass[ , ] #>  [1] 1,10 2,9  3,8  4,7  5,6  6,5  7,4  8,3  9,2  10,1 1,10 2,9  3,8  4,7  5,6  #> [16] 6,5  7,4  8,3  9,2  10,1 test * 3 #> mynewsubclass[ , ] #>  [1] 3,30  6,27  9,24  12,21 15,18 18,15 21,12 24,9  27,6  30,3  test - test #> mynewsubclass[ , ] #>  [1] 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0 0,0"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/subset.humdrumR.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter humdrum data — subset.humdrumR","title":"Filter humdrum data — subset.humdrumR","text":"subset.humdrumR command used filter humdrumR corpus. standard indexing operators ([] [[]]) actually work calling subset --hood; can read indexing options . However, using subset directly can accomplish much sophisticated filtering commands indexing methods.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/subset.humdrumR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter humdrum data — subset.humdrumR","text":"","code":"# S3 method for humdrumR subset(x, ...)  clearFilter(humdrumR)  removeEmptyFiles(humdrumR)  removeEmptySpines(humdrumR)  removeEmptyPaths(humdrumR)  removeEmptyRecords(humdrumR)  removeEmptyStops(humdrumR)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/subset.humdrumR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter humdrum data — subset.humdrumR","text":"subset.humdrumR used similar manner withinHumdrum, taking number \"expressions\" (functions) arguments. fact, expressions/function arguments passed directly internal call withinHumdrum, control expressions (like ) can used well. requirement expressions/functions fed subset.humdrumR must predicate expressions return logical (TRUE/FALSE) vector. returned vector must also length input data (number rows humdrum table). (can use fill expression want \"expand\" shorter outputs filtering pusposes.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/subset.humdrumR.html","id":"filter-field","dir":"Reference","previous_headings":"","what":"Filter field","title":"Filter humdrum data — subset.humdrumR","text":"using subset, humdrumR necessarily delete data filter . Rather, logical field humdrum table called Filter. subset.humdrumR updates humdrum table's Filter field using logical (|) existing Filter field negation predicate: Filter | !Predicate. HumdrumR functions (mostly) ignore data points Filter == TRUE, treating like NULL data. example, print filtered humdrumR see filtered data points turned null data (.), calls withinHumdrum ignore filtered data. means can, recover filtered data calling clearFilter dataset. cases might filter large parts data, leave bunch empty null data points (\".\"). want remove filtered data points, can call removeEmptyFiles, removeEmptySpines, removeEmptyPaths, removeEmptyRecords, removeEmptyStops. functions go piece/spine/path/record check data region null filtered (.e., Null == TRUE | Filter == TRUE); , data removed. can remove data null (within region) otherwise humdrum syntax broken. default, subset.humdrumR automatically calls removeEmptyFiles end. However, can stop specifying  removeEmptyFiles == FALSE.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/subset.humdrumR.html","id":"renumbering","dir":"Reference","previous_headings":"","what":"Renumbering","title":"Filter humdrum data — subset.humdrumR","text":"filtered files removed corpus (using removeEmptyFiles removeEmptySpines, combination subset) File /Spine fields renumbered represented remaining regions, starting 1. example, corpus 10 files remove first file (File == 1), remaining files renumbered 2:10 1:9. Spine renumbering works , except done independently within file (columns also renumbered accordingly).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tertianSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Tertian set — tertianSet","title":"Tertian set — tertianSet","text":"tertianSet one humdrumR's types tonal data, representing Western tertian harmonies. tertianSet subclass diatonicSet (thence, struct).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tertianSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tertian set — tertianSet","text":"","code":"tertianSet(...)  tset(   root = 0L,   signature = 0L,   alterations = 0L,   cardinality = 3L,   extension = NULL,   inversion = 0L )  is.tertianSet(x)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tertianSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tertian set — tertianSet","text":"structural addition, compared diatonicSet, Extensions slot. slot indicates tertian chord members active chord. seven possible chord members: root, third, fifth, seventh, ninth, eleventh, thirteenth. Every possible combination seven degrees represented single integer, corresponding 7-bit representation /offs seven degrees reverse order (13, 11, 9, 7, 5, 3, 1). example, integer 15 corresponds seventh chord: binary, 15 0001111. initial three zeros indicate 13th, 11th, 9th part harmony, four ones indicate root, third, fifth, seventh part harmony. Ultimately, adding removing chord degree harmony can achieved adding power two associated degree: Root: \\(\\pm 1\\) Third: \\(\\pm 2\\) Fifth: \\(\\pm 4\\) Seventh: \\(\\pm 8\\) Ninth: \\(\\pm 16\\) Eleventh: \\(\\pm 32\\) Thirteenth: \\(\\pm 64\\) tertianSet many specific methods defined reading/writing harmonic information.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/time.html","id":null,"dir":"Reference","previous_headings":"","what":"Time transformations — time","title":"Time transformations — time","text":"Time transformations","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time transformations — time","text":"","code":"bpm2ms(bpm)  ms2bpm(ms)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonalIntervalS4.html","id":null,"dir":"Reference","previous_headings":"","what":"Representation of tonal pitch information — tonalIntervalS4","title":"Representation of tonal pitch information — tonalIntervalS4","text":"tonalInterval core tonal pitch representation humdrumR. tonalInterval abstract representation tonal pitch, can translated /standard \"concrete\" pitch representations: solfege, scientific pitch, semitones, frequencies, scale degrees, intervals, etc. part, users need interact tonalIntervals directly---rather, tonalIntervals work behind scene numerous humdrumR pitch functions. See pitch functions pitch parsing documentation details tonalIntervals used humdrumR.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonalIntervalS4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation of tonal pitch information — tonalIntervalS4","text":"","code":"tint(   octave,   LO5th = 0L,   cent = numeric(length(octave)),   partition = FALSE,   Key = NULL,   octave.round = floor )  is.tonalInterval(x)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonalIntervalS4.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Representation of tonal pitch information — tonalIntervalS4","text":"Octave integers representing octave offset. Fifth integers representing \"line--fifths\" value. Cent numeric values representing cents (1200th octave). tonalInterval S4 subclass humdrumR's virtual class struct, inherits lot useful \"vector-like\" behaviors/functionality.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonalIntervalS4.html","id":"creating-tonal-intervals","dir":"Reference","previous_headings":"","what":"Creating tonal intervals","title":"Representation of tonal pitch information — tonalIntervalS4","text":"Generally, tonalIntervals created using tonalInterval() function, various methods. tonalInterval function primarily parser, documented elsewhere, interprets various input representations generates tonalInterval S4 objects (documented ). Alternatively, constructor function tint can used directly create tonalInterval objects. three arguments tint correspond three slots: octave, LO5th (Fifth), cent. inputs coerced match length. octave argument can left blank, case appropriate octave automatically computed place interval octave . default, .character method, thus (via struct) show method, tonalIntervals call interval(). Thus, return tonalInterval command line see **interval representation printed.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonalIntervalS4.html","id":"predefined-intervals-","dir":"Reference","previous_headings":"","what":"Predefined Intervals:","title":"Representation of tonal pitch information — tonalIntervalS4","text":"humdrumR automatically exports bunch tonalIntervals, named musical interval representation. Every generic interval 1 15 combined every interval quality dd (doubly diminished), d (diminished), m (minor), M (major), (augumented) AA (doubly augmented). Thus, loading humdrumR, can type things like M3 + M3 get A5. addition, variables unison (= P1 = tint(0, 0)) pythagorean.comma (= d2 = tint(-19,12)) exported well.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonalIntervalS4.html","id":"arithmetic-","dir":"Reference","previous_headings":"","what":"Arithmetic:","title":"Representation of tonal pitch information — tonalIntervalS4","text":"Technically, tonalIntervals examples algebraic modules integers. means certain arithmetic operations defined tonalIntervals can called using standard arithmetic operators (+, -, etc.): Addition: tonalIntervals can added together, acting exactly expect (.e., \\(M3 + m3 = P5\\)). Subtraction: tonalIntervals can subtracted just added. Also, can negated single - operator (like -M3). Multiplication: tonalIntervals can multiplied together. However, scalar (integer) multiplication defined: thus, tonalIntervals can multiplied integers create new tonalIntervals: e.g., \\(M2 * 3 = A4\\). Division: natural inverse scale multiplication, Euclidean division defined tonalIntervals---.e., division /whole (integer) pieces, often leftover \"remainders\" (modulo). R, Euclidean division achieved %/% operator---/---, associated %% used remainder/modulo. Two tonalIntervals can divided produced integer; Conversely, tonalInterval can divided integer produce tonalInterval. Take note way humdrumR defines Euclidean division based tonal space---.e., line--fifths---frequency atonal-semitone space. example, augmented-fourth divided major-second 3L, diminished-fifth divided major-second 3L---d5 %/% M2 equals -3L remainder P8 (plus octave)! division algorithm works applying standard Euclidean division @Fifth slot (line--fifths tonal space), shifting @Octave value remainder match appropriate octave. attempt addition tonalInterval non-tonalInterval atomic vector (e.g., integer, character), humdrumR attempt coerce input tonalInterval, using tonalInterval() parser, math output answer original format (non-tonalInterval) format. instance, M3 + 2 interpret 2 two semitones add major-second major-third, resulting 6 semitones. \"-place\" parsing/deparsing used, \"extra\" characters input passed . example, M3 + 4.ee- return 4.gg.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonalIntervalS4.html","id":"relational-operators","dir":"Reference","previous_headings":"","what":"Relational Operators","title":"Representation of tonal pitch information — tonalIntervalS4","text":"tonalIntervals can compared using standard relational operations---==, !=, >, >=, etc. Two tonalIntervals equal (according ==) slots (Octave, Fifth, Cent) exactly identical. Thus, enharmonic notes (like C# Db) equal. contrast, ordinal comparisons (e.g., >, <=) tonalIntervals based semitone (equal temperament) size, enharmonicity irrelevant. Thus, m3 >= A2 A2 >= m3 TRUE, even though m3 == A2 .","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonalIntervalS4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Representation of tonal pitch information — tonalIntervalS4","text":"","code":"M3 <- tint(   , 4L)  M2 <- tint(   , 2L) M9 <- tint(-1L, 2L)  M9 - M2  #> tonalInterval[ , ] #> [1] +P15 # = octave M9 - 2L #> [1] 24 # = 12  M3 %/% M2  #> [1] 2 # = 2  \"cc#]\" + M6 #> [1] \"aa#]\" # = \"aa#]\"  ###  cMajor <- sort(tint( , -1:5)) eMajor <- cMajor + M3 eMajor + 2L  #> [1]  6  8 10 11 13 15 17 # 6 8 10 11 13 15 17  eMajor[4:5] - P8 #> tonalInterval[ , ] #> [1] -m3 -m2 # = -m3 -m2"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonalTransformations.html","id":null,"dir":"Reference","previous_headings":"","what":"Invert or transpose tonal intervals. — tonalTransformations","title":"Invert or transpose tonal intervals. — tonalTransformations","text":"Invert transpose tonal intervals.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonalTransformations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invert or transpose tonal intervals. — tonalTransformations","text":"","code":"invert(tint, around, Key, ...)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonh.html","id":null,"dir":"Reference","previous_headings":"","what":"German-style pitch notation. — tonh","title":"German-style pitch notation. — tonh","text":"Based common German system notating pitches, encoded humdrum **Tonh interpretation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"German-style pitch notation. — tonh","text":"","code":"tonh(   x,   ...,   generic = FALSE,   simple = FALSE,   octave.relative = FALSE,   Key = NULL,   transposeArgs = list(),   parseArgs = list(),   inPlace = FALSE )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"German-style pitch notation. — tonh","text":"x (atomic vector) x argument can (atomic) vector, tonalInterval, NULL. ... arguments passed pitch deparser. also two hidden (advanced) argumens can specify: memoize deparse (see details ). generic (logical, length == 1) generic = TRUE \"specific\" pitch information (accidentals qualites) discarded. simple (logical, length == 1) simple = TRUE \"compound\" pitch information (octave/contour) discarded. Key (diatonicSet something coercable diatonicSet, length == 1 | length == length(x)) input Key used parser, deparser, transposer. transposeArgs (list) transposeArgs can list arguments passed special call transpose. parseArgs (list) parseArgs can list arguments passed pitch parser. inPlace (logical, length == 1) argument effect input (x argument) character strings, extra, non-pitch information input strings \"besides\" pitch information. , inPlace = TRUE, output placed output string beside original non-pitch information. inPlace = FALSE, pitch output information returned (details ). S S = TRUE, E-flat (Ees) written just \"S\", -flat (Aes) written \"\".","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonh.html","id":"basic-pitch-arguments","dir":"Reference","previous_headings":"","what":"Basic pitch arguments","title":"German-style pitch notation. — tonh","text":"pitch function standard arguments control details output. important generic simple arguments, allow control type pitch information returned.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonh.html","id":"generic-vs-specific","dir":"Reference","previous_headings":"","what":"Generic vs Specific","title":"German-style pitch notation. — tonh","text":"generic = TRUE, specific pitch information (accidentals qualities) omitted output. alternative way controlling functionality, can use specific argument, specific == !generic. case atonal functions, \"generic\" version pitch output: example, semits('c#', generic = TRUE) return 0, \"generic\" version C# C, corresponds 0. However, note generic version pitch follows key, semits('c#', generic = TRUE, Key = ':') return 1!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonh.html","id":"simple-vs-compound","dir":"Reference","previous_headings":"","what":"Simple vs Compound","title":"German-style pitch notation. — tonh","text":"simple = TRUE, compound pitch information (octave contour) omitted output. alternative way controlling functionality, can use compound argument ,compound == !simple. actually one way might want divide compound intervals simple octave parts. example, might like call output -M2 (descending major 2nd) +m7 (ascending minor 7th octave ). functionality can controlled octave.round argument: see pitch deparsing documentation.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonh.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"German-style pitch notation. — tonh","text":"Key argument must diatonicSet, something can parsed one. Key argument passed parser, deparser, transpose---unless alternate Key passed transposeArgs parseArgs. Various deparsing options use Key argument; example, use implicitSpecies (see advanced parsing section) dependent Key. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function---means, cases, need explicitly anything Key argument! (want happen, need explicitly specify Key argument, Key = NULL.)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonh.html","id":"parse-arguments","dir":"Reference","previous_headings":"","what":"Parse arguments","title":"German-style pitch notation. — tonh","text":"parseArgs argument must list() (named) arguments passed input parser. example, input representation uses \"X\" represent double sharps, specify kern('CX5', parseArgs = list(doublesharp = 'X')) get correct result (\"cc##\"). convenient shorthand, \"syntactic sugar,\" can specify parseArgs alternate way: Simply input parse(args...) unnamed argument pitch function. example, can get exact result typing kern('CX5', parse(doublesharp = 'X')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonh.html","id":"transpose-arguments","dir":"Reference","previous_headings":"","what":"Transpose arguments","title":"German-style pitch notation. — tonh","text":"transposeArgs argument must list() (named) arguments passed internal call transpose(), allowing us easily transpose pitch information. example, type kern(c('C', 'D', 'E'), transposeArgs = list(= 'M9')) can get output c('d', 'e', 'f#'). possible transpose args : (tonalInterval, length == 1 | length == (x)) (diatonicSet, length == 1 | length == (x))  (diatonicSet, length == 1 | length == (x)) real (logical, length == 1) transposition real tonal? relative (logical, length == 1) key-wise transposition based relative parallel keys? convenient shorthand, \"syntactic sugar,\" can specify transposeArgs alternate way: Simply input transpose(args...) unnamed argument pitch function. example, can get exact result typing kern(c('C', 'D', 'E'), transpose(= 'M9')).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonh.html","id":"transposing-by-interval","dir":"Reference","previous_headings":"","what":"Transposing by interval","title":"German-style pitch notation. — tonh","text":"calling transpose() directly, argument can anything coercable tonalInterval, output transposed amount. real = FALSE, tonal transposition (within Key) performed. details transposition behavior, check transpose() docs.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonh.html","id":"transposing-by-key","dir":"Reference","previous_headings":"","what":"Transposing by key","title":"German-style pitch notation. — tonh","text":"Another way transposing specifying input (\"\") key output (\"\") key. default, Key argument passed transpose , nothing actually happens. Thus, specify either key key, transposition happen /key Key. course, specify transposition happen keys specify. use pitch function within special call withinHumdrum, humdrumR automatically pass Key field humdrum data function. specify key, Key field passed transpose key, result, pitches input transposed whatever keys target () key! real relative arguments give special control key-wise transposition works, check transpose() docs details!","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/tonh.html","id":"in-place-parsing","dir":"Reference","previous_headings":"","what":"In-place parsing","title":"German-style pitch notation. — tonh","text":"humdrum data, character strings often encoded multiple pieces musical information right besides : example, **kern data might include tokens like \"4.ee-[. humdrumR parser (tonalInterval) automatically \"pull \" pitch information within strings, can find using appropriate known regular expressions. example, pitch('4.ee-[') returns Eb5. However, pitch functions (like pitch() kern()) option keep \"extra\" information return result \"place\"---.e., embedded right found input string. controlled inPlace argument, FALSE default. , pitch('4.ee-[', inPlace = TRUE) return 4.Eb5[---keeping \"4.\" \"[\". (obviously works input string, numeric!) Note inPlace = TRUE force functions like semits, normally return numeric values, return character strings input character string.","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/transpose.html","id":null,"dir":"Reference","previous_headings":"","what":"Transpose pitches and keys — transpose","title":"Transpose pitches and keys — transpose","text":"function transposes pitches keys various intervals target keys. Inside box, inputs transpositions take place tonalIntervals diatonicSets, numeric character string representation pitches can transposed well. function incorporated directly tonalTransform, thence, pitch translation functions, probably call directly often.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/transpose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose pitches and keys — transpose","text":"","code":"transpose(x, by, Key, to, real, relative, ...)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/transpose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose pitches and keys — transpose","text":"x input pitch(es) transpose. tonalInterval something intepretable tonalInterval. tonalInterval something intepretable tonalInterval. input x transposed interval. Key diatonicSet something intepretable diatonicSet. tonal /transpositions, \"\" key. value NULL, defaults C major. diatonicSet something intepretable diatonicSet. input x transposed key. real logical. TRUE (default), transposition real. FALSE, transposition tonal. relative logical. TRUE transposition relative. FALSE (default), transposition parallel.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/transpose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transpose pitches and keys — transpose","text":"two distinct types transposition (real tonal). also two different approaches specifying transpositions: \"\" \"\". \"\" transpositions can also either parallel relative.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/transpose.html","id":"types-of-transposition","dir":"Reference","previous_headings":"","what":"Types of Transposition","title":"Transpose pitches and keys — transpose","text":"two different types transposition: real transposition tonal transposition. real transposition, inputs transposed specific interval. example, pitches {C D E F G} transposed major second {C D E F# G}. tonal transposition, inputs transposed generic intervals, within key. example, sequence {C D E F G}, key C major, translated generic second {D E F G }. choose real tonal transposition, use real argument: real = TRUE real transposition, real = FALSE tonal transposition.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/transpose.html","id":"alterations","dir":"Reference","previous_headings":"","what":"Alterations","title":"Transpose pitches and keys — transpose","text":"Tonal transposition complicated presence alterations input pitches. instance, given pitches {C F# G D# E}`` key C major, tonally transposed second, within C major? one obvious, correct answer answer, can easily identified. algorithm implemented humdrumR` follows: Alterations/accidentals input identified. (case, F# D#). generic pitches transposed within key, resulting {D G E F}. Alterations input added output unless resulting pitches interpreted comma call tintPartion, given enharmonic wrap value (default 12). example, adding first accidental results {G#} comma. However, second accidental results {E#} comma away natural {F}. Thus, accidental added output, resulting {E}, {E#}. resulting output {D G# E F}. size enharmonicWrap effectively determines extreme accidentals allowed. default value, 12, assures output notes enharmonically equivalent notes key. illustrate, sequence {C F# G D# E, B- - G C# D, B D- C} transposed tonally within C major seven possible generic intervals, enharmonicWrap = 12:","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/transpose.html","id":"specifying-transpositions","dir":"Reference","previous_headings":"","what":"Specifying Transpositions","title":"Transpose pitches and keys — transpose","text":"two approaches specifying transpositions, arguments. argument must interval, input translated interval. interval specific real = FALSE, input treated generic interval, tranposition takes place within key indicated Key argument. argument translates input desired key. example, input key E major want transposed G major, say = '*E:'. real = TRUE, input simply translated root key, exact intervals. real = FALSE, input translated root new key, intervals changed match new key well. either case, result depends input's key , indicated standard Key argument. Key arguments like \"\" key. Key = NULL, input key interpreted C major. Consider input notes {D B C # B, D C# D E D} key G major. specify = e:, real = TRUE, output {B G# F## G#, B # B C# B}. (Notice even though key minor, output still clearly E major). specify = e:, real = FALSE, output instead {B G F# G, B # B C B}. Building previous example, consider input key matters well. use input notes ({D B C # B, D C# D E D}) input Key C major, : specify = e:, real = TRUE, output {F# D# E C## D#, F# E# F# G# F#}. specify = e:, real = FALSE, output instead {F# D E C# D, F# E F# G F#}. specified, transposition applied first, followed transposition. real = FALSE, transposition happens within key, Key key.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/transpose.html","id":"relative-vs-parallel","dir":"Reference","previous_headings":"","what":"Relative vs Parallel","title":"Transpose pitches and keys — transpose","text":"transposing , diferent approaches determining relationship \"\" key (Key argument) \"\" key (argument). think \"parallel\" relationships keys, match roots keys regardless modes. instance, C major C minor parallel keys. instead think \"relative\" relationships keys, match modes keys, roots. instance, C major minor relative keys. similar distinction \"la-based minor\" solfege (relative) vs \"fixed-\" solfege (parallel). transposing using argument, relative = FALSE input key (Key argument) transposed match root argument. example, input key G minor `` key C major, output transposed G minor. However, relative = TRUEthe input key transposed match mode thetokey: G minor input C majortowould translated minor, parallel minor thetokey. theKey(key) andto` (key) arguments mode, parallel relative transpositions .","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/transpose.html","id":"special-operators-","dir":"Reference","previous_headings":"","what":"Special Operators +-","title":"Transpose pitches and keys — transpose","text":"note, real transposition interval can achieved concisely using + - operators, long least one side operators actual tonalInterval object. humdrumR preassigns common tonalIntervals objects global environment. Thus, can type commands like \"c#\" + M2 get d#, c(\"C4\", \"E4\", \"C5\") - m6 get \"E3\" \"G#3\" \"E4\".","code":""},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/unfoldStops.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"record/spine/path locations different numbers stops different fields, function spreads data smaller fields multiple stops.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/unfoldStops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"unfoldStops(humdrumR, fromFields = fields(humdrumR, \"D\")$Name)"},{"path":[]},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/validateHumdrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate humdrum files — validateHumdrum","title":"Validate humdrum files — validateHumdrum","text":"function checks files violations humdrum syntax.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/validateHumdrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate humdrum files — validateHumdrum","text":"","code":"validateHumdrum(   ...,   contains = NULL,   recursive = FALSE,   errorReport.path = NULL )"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/validateHumdrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate humdrum files — validateHumdrum","text":"recursive logical. TRUE, final part search pattern (.e., file search) searched recursively sub directories. errorReport.path character. directory path , NULL, error report written file 'humdrumR_syntaxErrorReport_date.txt'. addition, files errors written directory ('errorMarkup' appended names), errors annotated inline. patterns character vector. Search pattern(s) identifying files (see [readHumdrum][readHumdrum]). files list character strings, representing record file.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":null,"dir":"Reference","previous_headings":"","what":"with(in)Humdrum — withinHumdrum","title":"with(in)Humdrum — withinHumdrum","text":"Evaluate arbitrary expressions using fields within humdrumR data, employing split/apply/combine, windowing, analysis options.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"with(in)Humdrum — withinHumdrum","text":"","code":"# S3 method for humdrumR with(data, ..., dataTypes = \"D\", drop = TRUE, variables = list())  # S3 method for humdrumR within(data, ..., dataTypes = \"D\", variables = list())"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"with(in)Humdrum — withinHumdrum","text":"data [humdrumR][humdrumRclass] data object. ... number expressions evaluate. Unnamed expressions interpreted \"main\" within-expressions. Possible evaluation control arguments include , , windows. evaluation options can achieved fill side arguments. dataTypes string vector characters drawn c(\"D\", \"d\", \"\", \"L\", \"M\",\"G\"). characters  correspond types humdrum records: Data, null data, Interpretations, Measures, Local comments, Global comments respectively. expression evaluated data drawn specified record types (defaults \"D\"). drop argument conceptually similar drop argument R matrices. drop = TRUE, output .humdrumR simplified much possible (trying return \"raw\" vector, list, table, etc. within ). drop = FALSE, result always data.table. default value (drop = TRUE) usually want intuitive, complex code, can helpful set drop = FALSE output consistent. variables named list values, interpolated within-expression(s) wherever variable name matches named list.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"with(in)Humdrum — withinHumdrum","text":"within.humdrumR  new humdrumR data object. .humdrumR, whatever value returned expression , drop = TRUE, data.table.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"overview","dir":"Reference","previous_headings":"","what":"Overview","title":"with(in)Humdrum — withinHumdrum","text":"functions primary means working humdrumR data. analogous base-R within methods data.frames. Specifically allow evaluate arbitrary expressions using fields humdrumR data object. means can drop \"inside\" humdrumR data object run whatever commands want using fields humdrum data table, keeping data safely \"encapsulated\" within humdrum object---least, want pull . difference .humdrumR within.humdrumR analogous difference base::() base::within(). .humdrumR evaluates expression(s) simply returns result evaluation. within.humdrumR evaluates expression(s) inserts results back humdrumR object, generating new fields called ResultX (see details). addition, within offer number powerful options make working humdrum data easier: evaluation control arguments can used control expressions evaluated. can evaluate expressions... subset data using ... either ignoring rest data evaluating different expression part. Separately different subsets data, recombined (split-apply-combine) using . Across windows data (e.g., ngrams, rolling windows). produces plot, particular plotting parameters, /without returning anything using sidefx. \"Fill\" short results match original field size using fill. certain record types (defaulting data records) using dataTypes. arguments specified named arguments /within calls. Even though formal arguments, partially matched, write grou instead groupby, get error! cases, can specify one type control argument (details ).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"expression-evaluation","dir":"Reference","previous_headings":"","what":"Expression evaluation","title":"with(in)Humdrum — withinHumdrum","text":"\"expression\" legal bit R code, like 2 + 2 x - mean(x). call /within.humdrumR must least one expression evaluate. refer \"within-expressions.\" expressions passed /within.humdrumR unnamed arguments: example, (humData, myExpressionHere). Within expressions evaluated within humdrumR object's humdrum table, means expression can refer fields humdrumR object name (Record, Token, File, etc.) just like variables. Since fields humdrum object vectors length, within expressions easily (generally ) vectorized. Note within-expression value evaluated data-points/records match type indicated dataTypes argument. default, non-null data tokens (\"D\") used. multiple within-expressions provided, expression evaluated order (left right). expression can refer results last expression (.), variables defined previous expressions. number special syntactic sugars can used within expressions. . placeholder. Side effects Recycled (\"filled\") results Lagged vectors etc. explained .","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"the-placeholder","dir":"Reference","previous_headings":"","what":"The . placeholder","title":"with(in)Humdrum — withinHumdrum","text":". variable can used special placeholder within expressions. first within expression, . interpreted humdrumR object's current active expression. multiple within expressions given, beyond first expression,  . refers result previous expression. example, Token active expression, : return result :","code":"with(humData, nchar(.), mean(.), .^2) with(humData, mean(nchar(Token))^2)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"side-effects-","dir":"Reference","previous_headings":"","what":"Side effects:","title":"with(in)Humdrum — withinHumdrum","text":"cases, want evaluate within-expression \"side effect\"; means expression something want (\"side effect\") actually evaluate (return) result want. common \"side effect\" creating plot. examples might printing text console using base::cat() base::print(), writing file. Side effects can achieved naming expression sidefx fx---usual, arguments can partially matched, side also works, commonly used. Side-effect expressions executed, result () ignored. means call something like newData <- within(humData, side = plot(x)), plot made result (newData) identical humData. Side-effects can also used combination within expressions. result ignored, fed next expression .. example command creates histogram nchar(Token) also returns mean nchar(Token). (Note variables explicitly assigned side call visible later calls, confusing, !)","code":"with(humData, nchar(Token), side = hist(.), mean(.))"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"filling-cycling-results-","dir":"Reference","previous_headings":"","what":"Filling (cycling) results:","title":"with(in)Humdrum — withinHumdrum","text":"result within expression may shorter input vectors (humtable fields). However, calls within.humdrumR particular, like return single number recycle \"fill\" original data field. words, like output (result) expression repeated matches length input field(s). manually using base::rep() function, /within.humdrumR provide syntactic sugar : can name expression recycle fill (partially matched), cause result recycled. take yourExpression(field, ...) wrap rep(yourExpression(field, ...), length.= length(field)).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"lagged-vectors","dir":"Reference","previous_headings":"","what":"Lagged vectors","title":"with(in)Humdrum — withinHumdrum","text":"often want work \"lagged\" vectors data. example, want look relationship vector previous values vector---e.g., vector offset \"lagged\" one index. humdrumR lag() function useful , gives us several options lagging vectors, always keeping length vectorization never hindered. within.humdrumR give us convenient short cut using lag. within-expression, vector can indexed integer argument named lag (case insensitive), causing lagged integer. (vector indexed lag = 0 returns unchanged vector.) example, following two calls : lag index multiple values indexed object appears within higher function call, lag inserted separate argument call. Thus, two calls also : lag() function boundaries argument, /within.humdrumR automatically feed fields list(File, Spine, Path). default \"melodic\" behavior music. like turn , need override adding boundaries argument lagged index, like Token[lag = 1, boundaries = list(...)]. Using lagged vectors, since vectorized, fastest (computationally) easiest way working n-grams. example, want create character-string 5-grams data, call: Note , since /within.humdrumR passes boundaries = list(File, Spine, Path) lag(), true \"melodic\" n-grams, created within spine-paths within file.","code":"with(humData, Token[lag = 1]) with(humData, lag(Token, 1)) with(humData, table(Token[lag = 1:2])  with(humData, table(lag(Token, 1), lag(Token, 2)) with(humData, paste(Token[lag = 0:5], sep = '-'))"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"results","dir":"Reference","previous_headings":"","what":"Results","title":"with(in)Humdrum — withinHumdrum","text":"difference .humdrumR within.humdrumR results evaluated within-expression(s).","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"within","dir":"Reference","previous_headings":"","what":"Within","title":"with(in)Humdrum — withinHumdrum","text":"calls within.humdrumR, result final within-expression inserted back [humtable][humdrum table]. results atomic vectors, though lists can also placed fields. results shorter input fields humtable padded null values fill length input. Non-vector results (objects) tables put lists, treated like list. result, data/record-types indicated dataTypes argument also returned padded null values. explicitly name result within-expression, put new field labeled ResultX, X lowest number \"ResultX\" fields already taken. can explicitly name result field top-level assignment expression. example, within(data, Semits <- semits(Token)) put result semits(Token) new field called Semits. fact, assign results multiple within-expressions, result length last result put new field. Thus, can create multiple new fields single call: example, creates two new fields, Semits Recip. (explained , second within-expression also refer Semits variable created previous expression.)","code":"within(humData,         Semits <- semits(Token),        Recip <- recip(Token))"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"with","dir":"Reference","previous_headings":"","what":"With","title":"with(in)Humdrum — withinHumdrum","text":"calls .humdrumR, result simply returned . want want get humdrumR object drop back \"normal\" R, often last stages analysis. .humdrumR drop argument, defaults TRUE. drop = FALSE, result returned data.table(). column names results table generated described previous section: .e., defaulting ResultX allowing explicit naming one explicit assignments within-expressions. addition, groupby arguments used, columns included indicate value evaluated /groupby factor row.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"partitioning-data","dir":"Reference","previous_headings":"","what":"Partitioning data","title":"with(in)Humdrum — withinHumdrum","text":"groupby (e.g., ) expression control arguments evaluate within-expressions within specific subsets data. argument can used evaluate within-expression within subset data. groupby argument breaks data groups, evaluating within-expression(s) separately within group. results grouped evaluations returned list () recombined original data within---form \"split-apply-combine\" routine key R data analysis. groupby arguments arbitrary expressions evaluated within [humdrum table][humTable], can (usually ) refer fields table. /within.humdrumR call can include zero, one, /groupby arguments, including combinations . one /groupy argument included, evaluated order (left right), recursively: one evaluated within partition(s) established previous expression. normal within expression(s) , evaluated within partition(s) established last  /groupby argument. \"Advanced\" partitioning section explores detail.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"apply-where-true-","dir":"Reference","previous_headings":"","what":"Apply where TRUE:","title":"with(in)Humdrum — withinHumdrum","text":"argument arbitrary expression identifies subset humdrum data. expressions must evaluate single logical vector, result, short, automatically recycled full length [humdrum table][humTable]. within expression(s) evaluated argument(s) return TRUE. call , result evaluated == TRUE returned. However, call within, result field(s) (default) padded null data ever == FALSE. However, can also control returned == FALSE specifying alternate within-expression(s) evaluate == FALSE. must named orelse ([partially matched][base::pmatch()]). (can also specify orfill orelsefill, get behavior fill. See .) orelse expression can specified combination argument, must addition normal within-expression. idea evaluate \"normal\" within-expression == TRUE, else specify evaluate orelse expression. common use case use within expression change data field, use orelse return data unchanged rest field.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"group-by-","dir":"Reference","previous_headings":"","what":"Group by:","title":"with(in)Humdrum — withinHumdrum","text":"groupby expression (use short) partitions data exhaustively (possibly non-contiguous) groups, evaluates within-expression(s) separately within group. works similarly argument [data.table][data.table]s, INDEX argument [base][tapply], INDICES argument [base][]. groupby expression must evaluate, within humdrumR data object, vector (list vectors equal length) group data . unique combination values across vectors becomes one group. commonly, groupby expression(s) simply field(s) data: instance, apply function [base][table] Token field separately file humdrumR data. However, can also use complex expressions like evaluate expression two groups, one either spine number three less record number even, another group opposite true. groupby expression evaluates list grouping vectors, within expressions evaluated across every combination categories across vectors. Thus, apply table Token across spine file.","code":"with(humdata,      table(Token),      by = File) with(humdata,      table(Token),       by = Spine > 3 | Record \\%\\% 2 == 0) with(humdata,       table(Token),      by = list(File, Spine))"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"advanced-partitioning-","dir":"Reference","previous_headings":"","what":"Advanced partitioning:","title":"with(in)Humdrum — withinHumdrum","text":"multiple groupby expressions, combinations two, specified, evaluated recursively, order left right. specified groupby, expression evaluated within groupby group groupby specified , grouping expression evaluated == TRUE. Thus, specify","code":"within(humdata,          sd(Semits),          by = File,           where = Semits > mean(Semits)) ```  the standard deviation of the `semits` field will be calculated in each file, but only where the `semits` field is greater than the mean `semits` value *within that file*. Contrast this with this call:  ``` within(humdata,          sd(Semits)          where = Semits > mean(Semits),           by = File)  ```  wherein the standard deviation of `semits` is, again, calculated for each file, but this time wherever the `semits` field is greater than the mean value *across all the data*.   [humTable]: R:humTable [humTable]: R:humTable [base::pmatch()]: R:base::pmatch() [data.table]: R:data.table [tapply]: R:tapply [by]: R:by [table]: R:table"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"windowing-data","dir":"Reference","previous_headings":"","what":"Windowing data","title":"with(in)Humdrum — withinHumdrum","text":"XXXX","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"plotting-parameters","dir":"Reference","previous_headings":"","what":"Plotting parameters","title":"with(in)Humdrum — withinHumdrum","text":"mentioned , plots within-expressions (often) called using sidefx argument name. plotting, /within.humdrumR also allows specify plotting options inline, without make separate call par(). par() argument can specified providing named list graphics keyword. example, can set plot margins mar argument: best part /within.humdrumR reset par previous state done. can also use syntactic sugar, graphics(parargs = ...):","code":"within(data,         side = plot(sort(table(Token))),         graphics = list(mar = c(4, 4, 4, 4))) within(data,        side = plot(sort(nchar(Token))),        graphics(mar = c(4, 4, 4, 4)))"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"splatting","dir":"Reference","previous_headings":"","what":"Splatting","title":"with(in)Humdrum — withinHumdrum","text":"(\"Splatting\" refers feeding function list/vector arguments.) Sometimes want divide data pieces (l\\'partition option), rather applying expression piece, want feed separate pieces separate arguments function. /within.humdrumR can use syntactic sugar just . can index field call splat argument, must Field %% x. example, call, Token field divided two groups, one Spine == 1 Spine == 2; first group (Spine == 1) used first argument list, second group (Spine == 2) second argument. Thus, within translates previous expression :","code":"within(humdata, list(Token[splat = Spine %in% 1:2])) within(humdata,        list(Token[Spine == 1], Token[Spine == 2]))"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"n-grams","dir":"Reference","previous_headings":"","what":"N grams","title":"with(in)Humdrum — withinHumdrum","text":"XXXX","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"advanced-scripting","dir":"Reference","previous_headings":"","what":"Advanced scripting","title":"with(in)Humdrum — withinHumdrum","text":".humdrumR within.humdrumR use non-standard evaluation expressions. useful command line script running one command time. However, want advanced scripting non-standard evaluation can problem. example, loop list within-expressions reuse common combination coor arguments many times. Fortunately, R formula, way capturing (\"quoting\") expressions concrete object can manipulate. Better yet, /within.humdrumR interpret formulae passed arguments. Basically, right-hand side formula interpreted expression evaluate. formula passed unnamed argument /within, left-hand side formula () treated argument name. name formula argument left-hand side, left-hand side ignored. approach allows us , ~table(Token) ~ Spine variables, allowing us things like: can even make lists loop :","code":"with(humdrumR, table(Token), by = Spine) with(humdrumR, ~table(Token), by ~ Spine) tabler <- ~table(.) byspine <- by ~ Spine  with(humData, tabler, byspine) bys <- list(~ Spine, ~ File, ~ COM)  for (b in bys) with(humData, table(.), by = b)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/withinHumdrum.html","id":"variables","dir":"Reference","previous_headings":"","what":"Variables","title":"with(in)Humdrum — withinHumdrum","text":"Another useful scripting option include free variables within-expressions, can fed using variables argument. variables must named list. Variables within-expression match name variables list value interpolated. allows us, example, run commands like: time called, N .^N replaced current value n.","code":"nums <- c(2, 3, 4, 5) expression <- ~.^N  for (n in nums) with(humData, expression, variables = list(N = n))"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/wort.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract words from syllables — wort","title":"Extract words from syllables — wort","text":"Transform humdrumR's syllabic form lyrics complete words, row contain either one word null data token.","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/wort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract words from syllables — wort","text":"","code":"wort(silbe, nullTokens = TRUE, keepSilbe = FALSE, indices = FALSE)"},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/wort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract words from syllables — wort","text":"nullTokens Boolean expression determines whether null tokens replace empty spaces syllables moved combine others make word. Default TRUE keepSilbe Boolean expression determines whether user wants save silbe format output case needed back translation later uses. Default FALSE indices Boolean expression determines whether linguistics version word printed. Default FALSE. data data transformed (character vector)","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/wort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract words from syllables — wort","text":"transformed data","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/writeHumdrum.html","id":null,"dir":"Reference","previous_headings":"","what":"Write humdrumR data to humdrum files. — writeHumdrum","title":"Write humdrumR data to humdrum files. — writeHumdrum","text":"----------NEEDS DOCUMENTATION------------","code":""},{"path":"https://github.com/Computational-Cognitive-Musicology-Lab/humdrumR/reference/writeHumdrum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write humdrumR data to humdrum files. — writeHumdrum","text":"","code":"writeHumdrum(   humdrumR,   fieldname = NULL,   affix = \"_humdrumR\",   prefix = \"\",   rename = NULL,   extension = NULL,   directory = NULL,   EMD = paste0(\"Edited in humdrumR \", packageVersion(\"humdrumR\"), \" on \", Sys.date()),   overwrite = FALSE,   verbose = TRUE )"}]
