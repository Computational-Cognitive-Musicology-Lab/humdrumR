% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Distributions.R
\name{distributions}
\alias{distributions}
\alias{print.distribution}
\alias{[.humdrumR.table}
\alias{sort.count.frame}
\alias{+,count.frame,count.frame-method}
\alias{-,count.frame,count.frame-method}
\alias{Ops,count.frame,count.frame-method}
\alias{count.humdrumR}
\alias{count.default}
\alias{count.table}
\alias{table}
\alias{table,humdrumR-method}
\alias{table,count.frame-method}
\alias{as.table.count.frame}
\alias{P,humdrumR-method}
\alias{P,count.frame-method}
\title{Distributions}
\usage{
\method{print}{distribution}(dist, digits = 1)

\method{[}{humdrumR.table}(x, ...)

sort.count.frame(x, decreasing = TRUE)

\S4method{+}{count.frame,count.frame}(e1, e2)

\S4method{-}{count.frame,count.frame}(e1, e2)

\S4method{Ops}{count.frame,count.frame}(e1, e2)

\method{count}{humdrumR}(x, ..., sort = FALSE, na.rm = FALSE, exclude = NULL, .drop = FALSE)

\method{count}{default}(..., sort = FALSE, na.rm = FALSE, exclude = NULL, .drop = FALSE)

\method{count}{table}(..., sort = FALSE, na.rm = FALSE, exclude = NULL, .drop = FALSE)

table(
  x,
  ...,
  exclude = if (useNA == "no") c(NA, NaN),
  useNA = "no",
  dnn = NULL,
  deparse.level = 1
)

\S4method{table}{humdrumR}(
  x,
  ...,
  exclude = if (useNA == "no") c(NA, NaN),
  useNA = "no",
  dnn = NULL,
  deparse.level = 1
)

\S4method{table}{count.frame}(x)

\method{as.table}{count.frame}(x)

\S4method{P}{humdrumR}(x, ..., sort = FALSE, na.rm = FALSE, exclude = NULL, .drop = FALSE)

\S4method{P}{count.frame}(x, ..., .by = NULL, na.rm = FALSE)
}
\description{
HUmdrumR has ways to...

The \code{count()} function is exactly like R's fundamental \link[base:table]{table()} function,
except that 1) will give special treatment to humdrumR \code{\link[=token]{token()}} data 2)
has more intuitive/simple argument names 3) makes it easier to combine/manipulate
disparate output tables.
}
\details{
The \code{count()} function is essentially a wrapper
around \link[base:table]{base::table()} function.
However, any \code{\link[=token]{token()}} class arguments are treated like \code{\link[=factors]{factors()}},
calling generating their own levels.
This assures that, for example, pitch data is tabulated in order of pitch height,
and "missing" pitches are counted as zero.

\code{count()} will, by default, count \code{NA} values if they are present---if you don't want
to count \code{NA}s, specify \code{na.rm = TRUE}.
You can also tell \code{count()} to exclude (not count) any other arbitrary values you
provide as a vector to the \code{exclude} argument.

\code{count()} will always give names to the dimensions of the table it creates.
You can specify these names directly as argument names, like \code{count(Kern = kern(Token))};
if you don't specify a name, \code{count()} will make up a name(s) based on expression(s) it is tallying.
(Note that \code{count()} does not copy \code{\link[base:table]{base::table()}}'s obtusely-named \code{dnn} or \code{deparse.level} arguments.)
}
\section{Manipulating humdrum tables}{


The output of \code{count()} is a special form of R \code{table}, a \code{count.frame}.
Given two or more \code{count.frame}s, if you apply basic R operators
(e.g., arithmetic, comparisons) or row/column binding (\code{cbind}/\code{rbind})
\code{humdrumR} will align the tables by their dimension-names before
doing the operation.
This means, that if you have two tables of pitch data, but one table includes specific pitch and other doesn't,
you can still add them together or bind them into a matrix.
See the examples!
}

\examples{

generic <- c('c', 'c', 'e', 'g', 'a', 'b', 'b', 'b')
complex <- c('c', 'c#', 'e', 'f', 'g','g#', 'g#', 'a')

genericTable   <- count(generic)
complexTable <- count(complex)

genericTable
complexTable

genericTable + complexTable

cbind(genericTable, complexTable)

}
