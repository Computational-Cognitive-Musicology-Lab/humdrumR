% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Validation.R
\name{validateHumdrum}
\alias{validateHumdrum}
\title{Validate humdrum files}
\usage{
validateHumdrum(..., errorReport.path = NULL)
}
\arguments{
\item{...}{\code{character}: Arguments passed to \code{\link[=findHumdrum]{findHumdrum()}} to identify files on the local machine
to test for humdrum validity.
This is mainly used to pass \link[=readHumdrum]{regex file-path search patterns}, but may also be used to pass
the \code{recursive} and/or \code{contains} arguments to \code{\link[=findHumdrum]{findHumdrum()}}.}

\item{errorReport.path}{(\code{character}, \code{length == 1}) A directory path where to write error report files.
If \code{NULL} (the default), no error report files are written.}
}
\description{
This function checks files on your local machine for violations of the
\href{http://www.humdrum.org/guide/ch05/}{humdrum syntax}.
Detailed error reports can be generated, pointing to specific problematic records in files.
}
\details{
Only violations of the general \href{http://www.humdrum.org/guide/ch05/}{humdrum syntax} are identified.
For example, missing exclusive interpretations, \verb{*-} spine enders, or null data tokens.
The \code{validateHumdrum} function \emph{does not} check for ill-formed data content---for example, a \verb{**kern}
spine containing the token \code{"Lsharp"} will not be rejected.
Note that \code{validateHumdrum} is quite picky about details!
"Hanging white space," even in global records, will be marked as invalid files!

\code{validateHumdrum} is called in the same manner as \code{\link[=readHumdrum]{readHumdrum()}}, by providing
one or more regex search patterns to match files on your machine.
(The \code{...}, \code{recursive}, and \code{contains} arguments are all simply passed to \code{\link[=findHumdrum]{findHumdrum()}}.)
When called, \code{validateHumdrum} prints basic messages informing you about the result of
the file matching and validity testing.

The function also returns (\link[base:invisible]{invisibly}) the \code{\link[=findHumdrum]{findHumdrum()}} "file info"
\code{data.table}, with additional \code{Valid} and \code{Errors} columns:
The \code{Valid} column is \code{logical}, with \code{TRUE} for all valid humdrum files.
The \code{Error} column is a list of \code{data.table}s, describing syntax errors in the files
if any.
The \code{Error} \code{data.table}s have one row for each error in a file (if any), and three columns:
\itemize{
\item \code{Filepath}: The file name.
\item \code{Record}: Which record contains the error.
\item \code{Message}: A description of the error.
}
}
\section{Error reports}{


If desired, the contents of the \code{validateHumdrum} can be written files.
This is most useful, as we can print the errors tagged right alongside the original raw data.
To write an error report, set the \code{errorReport.path} argument to a non-\code{NULL} string,
pointing to a directory path on your machine.
If the directory doesn't exist, \code{R} will (attempt to) create it.

In the \code{errorReport.path} directory, the complete error report(s) for all
the files (same as in the returned "fileFrame", see above) are written into a single file named
\code{'humdrumR_syntaxErrorReport_DATE.txt'} (with the \code{date} coming from \link[base:Sys.time]{Sys.Date}\verb{).  In addition, a sub directory called }AnnotatedFiles\verb{is created. In this directory, copies of all the files which contain errors are written, with}_errorAnnotations` appended
to their names.
In each file, individual errors are directly indicated in the record where they occur.
The output looks like this:\preformatted{                                             | The original records from the input file
                                             | appear on the right side.
Error message for record three printed here. | Exactly as they did
                                             | in the input file.
}
}

