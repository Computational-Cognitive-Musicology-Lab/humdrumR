% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rhythmInterval.R
\name{rhythmInterval}
\alias{rhythmInterval}
\alias{rint}
\alias{as.character,rhythmInterval-method}
\alias{is.rhythmInterval}
\alias{rhythmInterval.logical}
\alias{rhythmInterval.NULL}
\alias{rhythmInterval.numeric}
\alias{rhythmInterval.rational}
\alias{rhythmInterval.fraction}
\alias{rhythmInterval.integer}
\alias{rhythmInterval.character}
\title{Representation of rhythmic information}
\usage{
rhythmInterval(x, ...)

rint(denominator, numerator = 1L)

\S4method{as.character}{rhythmInterval}(x)

is.rhythmInterval(x)

rhythmInterval(x, ...)

\method{rhythmInterval}{logical}(x, ...)

\method{rhythmInterval}{`NULL`}(x, ...)

\method{rhythmInterval}{numeric}(n)

\method{rhythmInterval}{rational}(x)

\method{rhythmInterval}{fraction}(x)

\method{rhythmInterval}{integer}(x)

\method{rhythmInterval}{character}(str, Exclusive = NULL, ..., multiDispatch = FALSE)
}
\description{
This \emph{S4} class is the core rhythm representation in the \link{humdrumR} package.
The object is used to represent rhythmic durations
and metric positions.
Each duration is represented in
\href{https://en.wikipedia.org/wiki/Whole_note}{whole note} units.
Numerically, these whole note units are represented as a ratio
between integers, held in the slots \verb{@Numerator} and \verb{@Denominator}.
This allows use to represent any rational number with no loss of precision
due to rounding errors and weak decimal expansions (like \code{0.333333}).
Rhythm intervals are similar to standard musical
termoniology (i.e, "three eighth-notes" is the ratio (3/8).
}
\section{Slots}{

\describe{
\item{\code{Numerator}}{Integers}

\item{\code{Octave}}{Integers}
}}

\section{Vectorization}{


\code{rhythmInterval} inherits from the virtual class
\link{struct}.
This means you can apply normal vectorized commands to \code{rhythmInterval}s,
and even put them in \code{\link[base:data.frame]{base::data.frame()}}.
}

\section{Arithmetic}{


\code{rhythmInterval} objects have arithmetic operations defined.
Addition and subtraction are straightword and intuitive (i.e., (1/8) + (3/8) = (1/2)).

Multiplication and division are slightly more complicated:
\href{https://en.wikipedia.org/wiki/Scalar_multiplication}{scalar multiplication}
is defined \emph{for rational numbers}: (3/8) * 2 = (3/4)
(the result is always a new \code{rhythmInterval}).
However, note that a \code{rhythmInterval} cannot be multiplied by another
\code{rhythmInterval}---afterall, what would a quarter-note times a quarter-note be?
A \code{rhythmInterval} can be divided by another \code{rhythmInterval} to produce
a real number: (1/2) / (1/4) = 2.
Like other rational values in \code{R} we can also do either
``true'' (rational) division (using the \link[base:Arithmetic]{/} operator)
\emph{or} \href{https://en.wikipedia.org/wiki/Euclidean_division}{Euclidean}
division (using the \link[base:Arithmetic]{\%\%} operator).
Rational division (\code{/}) of a `rhythmInterval` by another `rhythmInterval`
results in a rational number. For instance, $(1/2) / (1/4) = 2$.
Rational division of a `rhythmInterval` by a rational number results in a
new `rhythmInterval`: $(1/2) / 2 = (1/4)$.
Eucliean (a.k.a., integer) division can only be applied between `rhythmInterval`s
resulting in an integer quotient---the remainder, which is a `rhythmInterval`,
can be calculated with the \link[base:Arithmetic]{\%\%} operator.
The remainder (a.k.a., \emph{modulo}) operator (`\%\%`) is especially
useful, for instance in calculating metric positions.
}

\section{Relational Operators}{


\code{rhythmInterval}s can be compared using the standard
\link[base:Comparison]{relational operators}---\code{==}, \code{!=}, \code{>}, \code{>=}, etc.
}

\concept{{core rhythm representation}}
