% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tonalInterval.R
\name{pitchParsing}
\alias{pitchParsing}
\alias{tonalInterval}
\alias{tonalInterval.tonalInterval}
\alias{tonalInterval.logical}
\alias{tonalInterval.NULL}
\alias{tonalInterval.numeric}
\alias{tonalInterval.rational}
\alias{tonalInterval.fraction}
\alias{tonalInterval.integer}
\alias{tonalInterval.character}
\title{Parsing pitch information}
\usage{
tonalInterval(...)

\method{tonalInterval}{tonalInterval}(x, ...)

\method{tonalInterval}{logical}(x, ...)

\method{tonalInterval}{`NULL`}(x, ...)

\method{tonalInterval}{numeric}(
  x,
  tonalHarmonic = 3,
  centMargin = 10,
  accidental.melodic = FALSE,
  ...
)

\method{tonalInterval}{rational}(x, tonalHarmonic = 3, accidental.melodic = FALSE, ...)

\method{tonalInterval}{fraction}(x, tonalHarmonic = 3)

\method{tonalInterval}{integer}(n, accidental.melodic = FALSE, ...)

\method{tonalInterval}{character}(str, Exclusive = NULL, ..., multiDispatch = FALSE)
}
\description{
\link{humdrumR} includes a easy-to-use but powerful system for \emph{parsing} pitch information:
various sorts of basic pitch representations (including numeric and character-string representations) can be "parsed"---read
and interpreted by \code{humdrumR}.
For the most part, parsing automatically happens "behind the scenes" whenever you use any humdrumR \link[=pitchFunctions]{pitch function}, like \code{\link[=kern]{kern()}}.
}
\details{
The underlying parser used by all \code{humdrumR} \link[=pitchFunctions]{pitch functions} can be called explicitly using the function \code{tonalInterval}.
The \code{tonalInterval} parser will attempt to parse any input information into a \link{tonalInterval} object---a back-end pitch representation that you probably don't need to care about!
When you use one of the main \link[=pitchFunctions]{pitch functions}, like \code{\link[=kern]{kern()}} or \code{\link[=semit]{semit()}}, the input is parsed into a \link{tonalInterval} object, then immediately \link[=pitchDeparsing]{deparsed}
to the representation you asked for (in this case, \code{kern} or \code{semit}).

The pitch parser (\code{tonalInterval}) is a generic function, meaning it can accept \code{numeric} or \code{character}-string input.
\itemize{
\item \link[base:integer]{integer} values are interpreted as semitones. Watch out! In R, you need to append an \code{L} to a number to make it an explicit integer:
For example, \code{tonalInterval(3L)}.
\item \link[base:numeric]{numeric}/\code{\link[=double]{double()}} and \code{\link[=rational]{rational()}} values are interpreted as frequency ratios, assuming a \href{https://en.wikipedia.org/wiki/Pythagorean_tuning}{Pythagorean tuning}.
For example, the value \code{2.0} will be interpreted as an octave (two to one ratio.)
\item \link[base:character]{character} values are interpreted using a complex "regex/exclusive interpretation dispatch system"---details below!
}

(See the "Atonal parsing" section below to learn how atonal data (semitones or frequency/ratios) is interpreted as \emph{tonal} data---i.e., how enharmonic spelling is decided.)
}
\section{Tonal Parsing (Character strings)}{
The most useful tool for humdrum data is parsing tonal pitch representations encoded as \code{character} strings.
(This includes character tokens with pitch information embedded alongside other information; Details below.)
The pitch parser (\code{tonalInterval}) uses either regular-expressions or exclusive interpretations to decide how to parse an input string.
There are eight regular-expression patterns for pitch that \code{tonalInterval} known how to parse automatically:\tabular{lcr}{
   Representation \tab Exclusive \tab Example \cr
   \link[=https://www.humdrum.org/rep/kern/index.html]{Kern} \tab **kern \tab \verb{ee-} \cr
   \href{https://en.wikipedia.org/wiki/Scientific_pitch}{Scientific Pitch} \tab **pitch \tab \code{Eb5} \cr
   \href{https://en.wikipedia.org/wiki/Solf\%C3\%A8ge}{Helmholtz pitch} \tab none \tab \verb{eb'} \cr
   \href{https://lilypond.org/doc/v2.22/Documentation/notation/pitches}{Lilypond pitch} \tab none \tab \verb{ees'} \cr
   \href{https://en.wikipedia.org/wiki/Interval_(music)}{Interval} \tab **hint/**mint/**int \tab \code{+m3} \cr
   \href{https://en.wikipedia.org/wiki/Degree_(music)}{Scale degree} \tab **deg \tab \code{b3} \cr
   \link{Solfege} \tab **solfa \tab \code{me} \cr
   \href{https://en.wikipedia.org/wiki/Svara}{Swara} \tab **bhatk \tab \code{g} \cr
}


If you call \code{tonalInterval} (or \emph{any} \link[=pitchFunctions]{pitch function}) on a \code{character}-string vector, with a non-\code{NULL} \code{Exclusive} argument,
that \code{Exclusive} argument will be used to choose the input interpretation you want, based on the "Exclusive" column in the
table above.
For example, \code{kern(x, Exclusive = 'solfa')} will force the parser to interpret \code{x} as \verb{**solfa} data.
Similarly, \code{solfa(x, Exclusive = 'kern')} will force the parser to interpret \code{x} as \verb{**kern} data.
If you use any \link[=pitchFunctions]{pitch function} within a special call to \link{withinHumdrum} (or using a \link[=humPipe]{humdrumR pipe}, like \verb{\%hum>\%}),
\code{humdrumR} will automatically pass the \code{Exclusive} field from the humdrum data to the function---this means, that in most cases,
you don't need to explicitely do anything with the \code{Exclusive} argument!

If you call \code{tonalInterval} (or \emph{any} \link[=pitchFunctions]{pitch function}) on a \code{character}-string vector, but the \code{Exclusive} argument is missing
or \code{NULL}, \code{humdrumR} will instead use regular-expression patterns to select a known interpretation.
For example, \code{pitch('so')} will automatically recognize that \code{'so'} is solfege, and will interpret the data accordingly (the output should be G4).

If you call \code{tonalInterval} (or \link[=pitch]{any function that uses tonalInterval as a parser}) on a \code{character} string,
the regex-system will automatically (attempt) to interpret the tokens as on the pitch types above---if there is a conflict
the representations are favored in the order they are presented in the table above.

If there is no match, \code{tonalInterval} (and all other \link[=pitchFunctions]{pitch function}) return \code{NA} values.
Remember, if \code{Exclusive} is specified, it overrides the regex-based dispatch, which means that \code{pitch('so', Exclusive = 'kern')} will return \code{NA}, because
\code{'so'} can't be interpreted as a \verb{**kern} value.
\subsection{"In place" parsing (and deparsing)}{

In lots of humdrum data, character strings are encoded with multiple pieces of musical information right besides each other:
for example, \verb{**kern} data might include tokens like \verb{"4.ee-[}.
The \code{humdrumR} parser (\code{tonalInterval}) will automatically "pull out" pitch information from within strings, if it can find any
using the appropriate known regular expressions.
For example, \code{pitch('4.ee-[')} returns Eb5.
For the \link[=pitchFunctions]{pitch function} which \emph{return} character strings (like \code{\link[=pitch]{pitch()}} and \code{\link[=kern]{kern()}}), there is an option to keep the "extra" information
and return the result "in place"---i.e., embedded right where it was found in the string.
This is controlled with the \code{inPlace} argument, which is \code{FALSE} by default.
So, \code{pitch('4.ee-[', inPlace = TRUE)} will return 4.Eb5[---keeping the \code{"4."} and the \code{"["}.
}

\subsection{Advanced Parsing Options}{

The six tonal representations listed above function through a common parsing interface.
}
}

