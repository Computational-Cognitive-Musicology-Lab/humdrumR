% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Rhythm.R
\name{rhythmParsing}
\alias{rhythmParsing}
\alias{rhythmInterval}
\alias{rhythmInterval.default}
\alias{rhythmInterval.integer}
\alias{rhythmInterval.NULL}
\alias{rhythmInterval.numeric}
\alias{rhythmInterval.character}
\alias{rhythmInterval.factor}
\alias{rhythmInterval.token}
\title{Parsing rhythm information}
\usage{
rhythmInterval(x, ...)

\method{rhythmInterval}{default}(x, ...)

\method{rhythmInterval}{integer}(x, ...)

\method{rhythmInterval}{`NULL`}(x, ...)

\method{rhythmInterval}{numeric}(x, ..., Exclusive = NULL, multiDispatch = FALSE)

\method{rhythmInterval}{character}(x, ..., Exclusive = NULL, multiDispatch = FALSE)

\method{rhythmInterval}{factor}(x, Exclusive = NULL, ...)

\method{rhythmInterval}{token}(x, Exclusive = NULL, ...)
}
\description{
\link{humdrumR} includes a easy-to-use but powerful system for \emph{parsing} rhythm (time duration) information:
various basic rhythm representations (including \code{numeric} and \code{character}-string
representations) can be "parsed"---read
and interpreted by \code{humdrumR}.
For the most part, parsing automatically happens "behind the scenes" whenever you use any humdrumR \link[=rhythmFunctions]{rhythm function},
like \code{\link[=recip]{recip()}}, \code{\link[=dur]{dur()}}, or \code{\link[=duration]{duration()}}.
}
\details{
The underlying parser used by all \code{humdrumR} \link[=rhythmFunctions]{rhythm functions} can be called explicitly using the function \code{rhythmInterval()}.
The \code{rhythmInterval} parser will attempt to parse any input information into a \link[=rationa]{ratioanl number} object.
When you use one of the main \link[=rhythmFunctions]{rhythm functions}, like \code{\link[=recip]{recip()}} or \code{\link[=dur]{dur()}},
the input is parsed into a \link{rational} object, then immediately \link[=rhythmDeparsing]{deparsed}
to the representation you asked for (e.g., \verb{**recip} or \verb{**dur}).
Thus, the underlying pipeline for \code{humdrumR} \link[=rhythmFunctions]{rhythm functions} looks something like:
\itemize{
\item \strong{Input} representation (e.g., \verb{**recip} or \verb{**dur}) \verb{|>}
\itemize{
\item \emph{Parsing} (done by \code{rhythmInterval()}) \verb{|>}
\itemize{
\item \strong{Intermediate} (\link{rational}) representation \verb{|>}
}
\item \emph{Deparsing} \verb{|>}
}
\item \strong{Output} representation (e.g. \verb{**recip} or \verb{**duration})
}

\emph{This} documentation talks about the parsing step.
For an overview of the "deparsing" process, look \link[=rhythmDeparsing]{here}.
To learn about the "deparsing" of specific representations, \link[=rhythmFunctions]{start here} or go straight to the docs for specific functions---
for example, call \code{?recip} to learn about \code{\link[=recip]{recip()}}.
}
\section{Dispatch}{


The rhythm parser (\code{rhythmInterval()}) is a generic function, meaning it accepts a variety of inputs
and automatically "dispatches" the appropriate method for the input.
R's standard \code{S3} system is used to dispatch for either \code{numeric} or \code{character}-string input:
Though most rhythmic representations are essentially numbers, several standard
representations included a mix of numeric and non-numeric symbols.
Given either a \code{character} string or a number, \code{humdrumR} then uses either regular-expression matching or humdrum
exclusive interpretation matching to dispatch specific parsing methods.
}

\section{Symbolic Parsing}{


Since humdrum data is inherently string-based, all our input data ultimately starts as \code{character} strings.
(This includes character tokens with rhythm information embedded alongside other information; Details below.)
The rhythm parser (\code{rhythmInterval()}) uses a combination of regular-expressions and exclusive interpretations to decide how to
parse an input string.
There are three regular-expression patterns for rhythm that \code{rhythmInterval()} knows how to parse automatically:\tabular{lrr}{
   Representation \tab Exclusive \tab Example \cr
   \href{https://www.humdrum.org/rep/recip/index.html}{Recip} \tab **recip \tab \code{4.} \cr
   \href{https://en.wikipedia.org/wiki/Note_value}{Note values} \tab **notevalue \tab \verb{ùÖü ùÖ≠} \cr
   \href{https://www.humdrum.org/rep/dur/index.html}{Time durations} \tab **dur \tab \verb{/1.5} \cr
}

\subsection{Exclusive Dispatch}{

If you call \code{rhythmInterval()} (or \emph{any} \link[=rhythmFunctions]{rhythm function}) on a \code{character}-string vector, with a non-\code{NULL} \code{Exclusive} argument,
that \code{Exclusive} argument will be used to choose the input interpretation you want, based on the "Exclusive" column in the
table above.
For example, \code{seconds(x, Exclusive = 'recip')} will force the parser to interpret \code{x} as \verb{**recip} data.
Similarly, \code{recip(x, Exclusive = 'dur')} will force the parser to interpret \code{x} as \verb{**dur} data.
If you use any \link[=rhythmFunctions]{rhythm function} within a special call to \link{withinHumdrum},
\code{humdrumR} will automatically pass the \code{Exclusive} field from the humdrum data to the function---this means, that in most cases,
you don't need to explicitly do anything with the \code{Exclusive} argument!
(If you want this \emph{not} to happen, you need to explicitly specify your own \code{Exclusive} argument, or \code{Exclusive = NULL}.)
}

\subsection{Regex Dispatch}{

If you call \code{rhythmInterval()} (or \emph{any} \link[=rhythmFunctions]{rhythm function}) on a \code{character}-string vector, but the \code{Exclusive} argument is missing
or \code{NULL}, \code{humdrumR} will instead use regular-expression patterns to select a known interpretation.
For example, \code{seconds('4.')} will automatically recognize that \code{'4.'} is a \verb{**recip} token, and will interpret the
data accordingly (the output should be 1.5).
If there are more than one matches, \code{humdrumR} will use the longest match, and if they tie,
pick based on the order in the table above (topmost first).

If there is no match, \code{rhythmInterval()} (and all other \link[=rhythmFunctions]{rhythm function}) return \code{NA} values.
Remember, if \code{Exclusive} is specified, it overrides the regex-based dispatch, which means that \code{pitch('4.', Exclusive = 'notevalue')} will
return \code{NA}, because
\code{'4.'} can't be interpreted as a \verb{**notevalue}.
\subsection{"In place" parsing}{

In lots of humdrum data, character strings are encoded with multiple pieces of musical information right besides each other:
for example, \verb{**kern} data might include tokens like \verb{"4.ee-[}.
The \code{humdrumR} rhythm parser (\code{rhythmInterval()}) will automatically "pull out" rhythm information from within strings, if it can find any,
using the appropriate known regular expressions.
Various \link[=rhythmFunctions]{rhythm parsing functions} have an option to keep the original "extra" data, using their \code{inPlace} argument.
}

}
}

\seealso{
All \code{humdrumR} \link[=rhythmFunctions]{rhythm functions} make use of the
parsing functionality.
}
