% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/humRead.R
\name{readHumdrum}
\alias{readHumdrum}
\title{Read humdrum files into R}
\usage{
readHumdrum(pattern, ..., recurse.pattern = FALSE, validate = TRUE,
  verbose = FALSE)
}
\arguments{
\item{pattern}{character: One or more patterns used to identify files to read. Each pattern represents
a file path, using normal (system appropriate) conventions (i.e., directories separated by \code{"/"}, 
\code{'~'} at beginning to indicate home, \code{".."} to indicate directory above working directory, etc.). Each directory
and the final file pattern are treated as regular expressions. Thus, we can say things like \code{"../^A.*/.*krn"}, which would
match any kern files in any directory beginning with a capital \code{"A"} in the directory above the current working directory.}

\item{...}{Any additional arguments are interpreted as additional directory regular-expression patterns, appended to the
\code{pattern} argument.}

\item{validate}{\code{logical} If \code{TRUE}, \code{\link{validateHumdrum}} is called
on matching files before they are parsed. Any files which contain syntax errors are automatically
skipped. If you want to see specifically what errors occured, call \code{\link{validateHumdrum}} 
directly and use the \code{errorReport.path} argument.}

\item{verbose}{logical: If \code{TRUE}, the names of matching files are printed before parsing begins. This is very
useful as a check to make sure you aren't reading the wrong files!}

\item{recursive.pattern}{logical: If \code{TRUE}, the final part of the serach pattern (i.e., the file search) is searched for recursively through all sub directories.}
}
\description{
This function reads one or more humdrum files to create a \code{\link[humdrumR:humtable]{humdrum table}}
then builds a \code{\linkS4class{humdrumR}} data object around the table.
}
\examples{
readHumdrum(".*krn$") # loads all files ending with "krn" in the currect directory

readHumdrum('^Composers$/^Be|^Mo/.*/^Joined$/.*krn$') 
# Goes inside the directory "Composers".
# Inside "Composers" looks for directories that start with "Be" or "Mo".
# If there are any "Be|Mo" matching directories within "Composers", matches all directories within them.
# Within these directories, looks for directories called "Joined".
# If there are any directories called "Joined", loads all files (if any) that end with "krn".

}
