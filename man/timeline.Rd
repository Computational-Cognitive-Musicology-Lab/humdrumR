% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Rhythm.R
\name{timeline}
\alias{timeline}
\alias{timeline.default}
\alias{timeline.humdrumR}
\alias{timestamp.default}
\alias{timestamp.humdrumR}
\alias{timestamp}
\title{Rhythmic timeline of a piece}
\usage{
\method{timeline}{default}(
  x,
  start = 0,
  pickup = NULL,
  ...,
  Exclusive = NULL,
  threadNA = TRUE,
  total = FALSE,
  parseArgs = list(),
  groupby = list()
)

humData |> select(Token) |> timeline() 
humData |> timeline(Token)

timeline(
  x,
  start = 0,
  pickup = NULL,
  ...,
  Exclusive = NULL,
  threadNA = TRUE,
  total = FALSE,
  parseArgs = list(),
  groupby = list()
)

\method{timestamp}{default}(
  x,
  BPM = 60,
  start = 0,
  pickup = NULL,
  minutes = TRUE,
  ...,
  Exclusive = NULL,
  threadNA = TRUE,
  total = FALSE,
  parseArgs = list(),
  groupby = list()
)

humData |> select(Token) |> timestamp() 
humData |> timestamp(Token)

timestamp(
  x,
  BPM = 60,
  start = 0,
  pickup = NULL,
  minutes = TRUE,
  ...,
  Exclusive = NULL,
  threadNA = TRUE,
  total = FALSE,
  parseArgs = list(),
  groupby = list()
)
}
\arguments{
\item{x}{\emph{\strong{Input rhythm information.}}

Must be \code{atomic}, or \code{NULL}.

Is \link[=rhythmParsing]{parsed as duration information}.}

\item{start}{\emph{\strong{Where does timeline begin?}}

Defaults to \code{0}.

Must be a single number.}

\item{pickup}{\emph{\strong{Where is there a pickup (anacrusis)?}}

Defaults to \code{NULL}

Must be \code{logical} of same \code{length(x)}, Or \code{NULL}.
See "Pickups" section below.}

\item{threadNA}{\emph{\strong{Should rhythm-less tokens return \code{NA}?}}

Defaults to \code{TRUE}.

Must be a singleton \code{logical} value: an on/off switch.}

\item{total}{\emph{\strong{Should timeline propagate to all records in all spines?}}

Defaults to \code{FALSE}.

Must be a singleton \code{logical} value: an on/off switch.}

\item{parseArgs}{\emph{\strong{An optional list of arguments passed to the \link[=rhythmParsing]{rhythm parser}.}}

Defaults to an empty \code{list()}.

Must be a \code{list} of named arguments to the \link[=rhythmParsing]{rhythm parser}.}

\item{groupby}{\emph{\strong{A \code{list} of vectors to group \code{x}.}}

Defaults to \code{list()}.

Must be a \code{list}; every element of the list must be length \code{length(x)}.

To function as a by-record timeline, the \code{groupby} list music include a \emph{named} \code{Piece} and \code{Record} fields.
Luckily, these are automatically passed by \link[=withinHumdrum]{with(in).humdrumR}, so you won't need to worry about it!}

\item{BPM}{\emph{\strong{The tempo.}}

Defaults to \code{60}.

Must be a single number or a \code{character} string in the format \code{"MM120"} (for 120 bpm).

By default, \link[=withinHumdrum]{with(in).humdrumR} passes the \code{BPM} \link[=fields]{field}, if present.}

\item{minutes}{\emph{\strong{Should minutes be counted in output?}}

Defaults to \code{TRUE}.

Must be a singleton \code{logical} value: an on/off switch.

If \code{TRUE}, output seconds are converted to a character string encoding minutes, seconds, and milliseconds in the format \code{MM.SS.ms}.}
}
\description{
These functions calculate the ammount of time (either in beats, or seconds)
that have unfolded since the beginning of a piece, giving a sense of the timeline in which events unfold.
In \code{music21} this information is described as "offsets"---however,
we prefer to reserve the words "onset" and "offset" to refer
to the beginning (attack) and end (release) of rhythmic events.

If \code{timeline()} is applied to a \link[=humdrumRclass]{humdrumR data class}
you may use the data's \link[=fields]{fields} as arguments.
If no field names are specified, the first \link{selectedField} is used as \code{x}.

If \code{timestamp()} is applied to a \link[=humdrumRclass]{humdrumR data class}
you may use the data's \link[=fields]{fields} as arguments.
If no field names are specified, the first \link{selectedField} is used as \code{x}.
}
\details{
Music unfolds over time, and humdrum data typically represents this
by placing simultaneous events in the same record, with successive events
in ever higher records---progressing "top down" through the file.
In some humdrum data, only this (implicit) ordering of data over time is present.
The \code{Record} and \code{DataRecord} \link[=fields]{fields} capture this ordering in all data parsed by \code{humdrumR}.
However, many (probably most) humdrum data files contain at least some information about the relative
duration of events, representing more detailed information about timing and rhythm.

\code{timeline()} parses and input vector \code{x} as \link[=duration]{durations},
computes the \link[=sigma]{cumulative sum} of the durations, with the \code{start} argument appended to the beginning.
The result is a \code{numeric} vector representing the total duration since the beginning of the vector (plus the value of \code{start}, which defaults to zero).
The cumulative durations of \code{timeline()} represent musical duration units, where \code{1} equals a whole note.
\code{timestamp()} converts these durations to seconds, either using the \code{BPM} argument/field to determine the tempo or using the
default tempo of 60 beats per minute.
If \code{minutes == TRUE}, the output is formatted into \code{"minute:seconds.milliseconds"} character strings.

When applying \code{timeline()} to a \link[=humdrumR-class]{humdrumR dataset}, the timeline of all spines with rhythmic information
(e.g., \verb{**kern}, \verb{**harm}) is computed separately.
(Note that \code{timeline()} can't guarantee that your data spines contain consistent rhythmic information!
In other words, if one of your spines has (for example) an extra eighth-note token, the timelines in each spine will diverge.)
By default, the timeline is output only in spines/tokens where rhythmic information is encoded.
However, sometimes we want to know the timing of every datapoint.
We can then set \code{total = TRUE}, which will propagate timeline information to \emph{all} data tokens in all spines.

Note that, \code{timeline()} and \code{timestamp()} follow the default behavior of \code{\link[=duration]{duration()}} by treating grace-notes as duration \code{0}.
This means that their position on the timeline is simply inherited from the previous event on the timeline, as if they occur
at the same time.
If you want to use the specified duration(s) of grace notes, specify \code{grace = TRUE}.
By default, any \emph{other} tokens without (parsable) rhythm information are returned a \code{NA}.
However, if \code{threadNA = FALSE}, rhythm-less tokens will be treated as if they have a duration of \code{0} as well, and thus
have a (shared) position on the timeline.
}
\section{Pickups}{


Another option is to pass the \code{pickup} argument a logical vector of the same length as the input \code{x}.
Within each piece/group, any block of \code{TRUE} values at the \emph{beginning} of the \code{pickup} vector
indicate a pickup.
The \emph{first} index where the \code{pickup} logical is \code{FALSE} is used as the starting point of the timeline/timecount;
All the earlier (\code{pickup == TRUE}) points will be negative numbers, measured backwards from the start index.
In \code{humdrumR}, and datapoints before the first barline record (\code{=}) are labeled \code{Bar == 0} in the \code{Bar} \link[=fields]{field}.
Thus, a common use for the \code{pickup} argument is \verb{within(humData, timeline(Token, pickup = Bar < 1)}, which makes the downbeat of
the first complete bar \code{1} the starting point of the timeline---any notes in pickup bars are negative on the timeline.
}

\examples{
tokens <- c('4.GG', '8G', '16E', '16F#', '16G', '16D', 'q8D#', '4E')

timeline(tokens)
timestamp(tokens, BPM = '90')

\dontrun{
B075 <- readHumdrum(humdrumRroot, "HumdrumData/BeethovenVariations/B075_00_0._a.krn")
within(B075, timeline(Token))
}

}
\seealso{
{The \code{\link[=timecount]{timecount()}} and \code{\link[=metcount]{metcount()}} functions provide "higher level" musical interpretations of timeline information.}
}
\concept{rhythm analysis tools}
