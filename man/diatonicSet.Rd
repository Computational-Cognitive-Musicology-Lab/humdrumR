% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/humDiatonic.R
\docType{methods}
\name{diatonicSet}
\alias{diatonicSet}
\alias{order.diatonicSet}
\alias{as.sciChord}
\alias{as.chordSymbol}
\alias{as.romanNumeral}
\alias{as.romanNumeral.tertianSet}
\alias{as.kernPitch.diatonicSet}
\alias{read.keyI2diatonicSet}
\alias{read.sciChord2tertianSet}
\alias{as.diatonicSet}
\alias{as.diatonicSet.character}
\alias{as.tertianSet}
\alias{as.tertianSet.character}
\alias{as.romanNumeral.character}
\alias{as.triad}
\alias{as.triad.tertianSet}
\alias{as.triad.character}
\title{\code{diatonicSets} methods for \code{\link[base]{order}} and 
\code{\link[base]{sort}} order/sort along the circle of fifths.
Modes are sorted secondarily from fewest flats to most sharps.
If \code{parallel = TRUE} all modes are grouped by shared tonics, so
C minor and C major will appear besides each other.
If \code{parallel = FALSE} modes/keys are sorted together by number of accidentals,
so C minor and Eb major will be sorted next to each other.}
\usage{
\method{order}{diatonicSet}(x, ..., parallel = TRUE, na.last = TRUE,
  decreasing = FALSE, method = c("auto", "shell", "radix"))

\S4method{Compare}{diatonicSet,diatonicSet}(e1, e2)

\S4method{Compare}{tertianSet,tertianSet}(e1, e2)

\S4method{as.character}{diatonicSet}(x)

\S4method{as.character}{tertianSet}(x)

as.sciChord(tharm)

as.chordSymbol(tharm, sep = "")

as.romanNumeral(x, ...)

\method{as.romanNumeral}{tertianSet}(tset, key = dset(0L, 0L),
  cautionary = FALSE)

\method{as.kernPitch}{diatonicSet}(x, asStops = FALSE)

read.keyI2diatonicSet(keyI)

read.sciChord2tertianSet(csym)

as.diatonicSet(...)

\method{as.diatonicSet}{character}(str, inPlace = FALSE)

as.tertianSet(...)

\method{as.tertianSet}{character}(str, inPlace = FALSE)

\method{as.romanNumeral}{character}(x, key = dset(0L, 0L),
  cautionary = FALSE)

as.triad(x, ...)

\method{as.triad}{tertianSet}(x)

\method{as.triad}{character}(x)
}
\description{
These functions all translate other pitch representations
into

These functions translate various pitch representations
between each other. Using the \code{humdrumR} \code{\link[humdrumR:regexDispatch]{regular-expression dispatch system}}
they will even (automatically) read parts of a string which represent a pitch,
and translate only that part (leaving the rest of the string unchanged).
They all have an option \code{inPlace} which can be set to \code{FALSE}
if you want them to discard non-pitch parts of the string(s).
}
\details{
These functions all assume that thheir string input is a well-formed
example of the target pitch representation, with no extra strings.
(The \code{\link[humdrumR:regexDispatch]{regex dispatch}} functions can be 
used to clean/filter inputs into these functions.

Under the hood, these functions use the \code{\link{humdrumR}} 
\code{\link[humdrumR:tonalInterval]{tonalInterval}} \code{S4} class as the 
fundamental, \emph{lingua franca} representation of pitch.
}
