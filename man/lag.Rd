% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tools.R
\name{lag}
\alias{lag}
\alias{lead}
\title{Shift data within a vector/matrix/data.frame}
\usage{
lag(x, n = 1, fill, wrap, groupby, ...)

lead(x, n = 1, ...)
}
\arguments{
\item{x}{\emph{\strong{The input argument.}}

Should be \code{list}, \code{atomic}, \code{matrix}, or \code{data.frame}.}

\item{n}{\emph{\strong{The amount to lag/lead the data.}}

Defaults to \code{0}.

Must be a natural number.

If \code{n == 0}, \code{x} is returned unchanged.}

\item{fill}{\emph{\strong{Tokens used to pad the outputs.}}

Defaults to \code{NA}.

Should be the same class as \code{x}.

If \code{wrap = FALSE} parts of the output are padded with the \code{fill} argument.}

\item{wrap}{\emph{\strong{Whether to wrap the data.}}

Defaults to \code{FALSE}.

Must be \code{logical}. Must be length \code{1}.

If \code{wrap = TRUE}, data from the end (head or tail) is copied to the
other end of the output, "wrapping" the data within the data structure.}

\item{groupby}{\emph{\strong{How to group the data.}}

Should be \code{vector} or \code{list} of \code{vectors}; must be length \code{length(x)}.

Each segment of \code{x} delineated by the \code{groupby} vector(s) is treated separately.}

\item{margin}{\emph{\strong{Which dimension to shift.}}

Must be \code{numeric}.

Arrays and data.frames can be lagged lead in multiple dimensions
using the \code{margin} argument: \code{margin == 1} shifts across rows while \code{margin == 2}
shifts across columns.}
}
\description{
The \code{lag} and \code{lead} functions take input vectors, matrices, or data.frames and
shifts their data
by \code{n} indices.
They are similar to the \code{\link[data.table:shift]{data.table::shift()}} function, but with a few additional options.
}
\details{
A lagged vector has the same values as the original vector, except offset by \code{n} indices.
\code{lag} moves each value to a high index (if \code{n > 0}); \code{lead} does the opposite,
moving each value to a lower index (if \code{n > 0}).
\code{n} can be positive or negative---negative lags are equivalent to leads, and vice versa.
Values near the end/beginning are either "wrapped" to the opposite end of the
vector, or replaced/padded with the value of the \code{fill} argument.

The vector a, b, c, d, e, f, g can be lagged by \code{n==1} is NA, a, b, c, d, e, f.
If we set \code{wrap == TRUE}, the \code{"g"} moved to the beginning of the output:
is g, a, b, c, d, e, f.
}
\section{Grouping}{


In many cases we want to perform lagged calculations in a vector, but \emph{not across certain boundaries}.
For example, if your vector includes data from multiple pieces, we wouldn't want to calculate melodic intervals
between pieces, only within pieces.
The \code{groupby} argument indicates one, or more, grouping vectors, which break the \code{x} (input) argument
into groups.
If more than \code{groupby} vectors are given, a change in \emph{any} vector indicates a boundary.

Value pairs which cross between groups are treated as if they were at the beginning.
Basically, using the \code{groupby} argument to a function should be
similar or identical to using \code{tapply(x, groupby, laggedFunction, ...)} or using a \code{groupby}
expession in a call to \link[=withinHumdrum]{with(in).humdrumR}.
However, using a \code{groupby} argument directly is usually much faster, as they have been
specially optimized for this functions.

The most common use case in humdrum data, is looking at "melodies" within spines.
For this, we want \code{groupby = list(Piece, Spine, Path)}.
In fact, \code{humdrumR} \link[=withinHumdrum]{with(in)} calls will \emph{automatically} feed these
three fields as \code{groupby} arguments to certain functions: mint, delta, sigma, lag, ditto, ioi, sumTies, hop, wort, or wort.character.
So any use of \code{delta} in a call to \link[=withinHumdrum]{with(in)}, will automatically calculate the \code{delta}
in a "melodic" way, within each spine path of each piece.
However, if you wanted, for instance, to calculate differences across spines (like harmonic intervals)
you could manually set \code{groupby = list(Piece, Record)}.
}

\seealso{
\code{\link[data.table:shift]{data.table::shift()}}

Other {Lagged vector functions}: 
\code{\link{delta}()},
\code{\link{ditto}()},
\code{\link{int}()},
\code{\link{sigma}()}
}
\concept{{Lagged vector functions}}
