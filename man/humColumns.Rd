% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/humdrumR-class.R
\name{humColumns}
\alias{humColumns}
\title{Spines vs Paths vs Columns}
\description{
In the \href{http://www.humdrum.org/guide/ch05/}{humdrum syntax}, data is placed in "spines,"
which are not the same as "columns" in a spreadsheet. A "column" refers to a
tab-delineated group of values.
"Spines" can be a single column, or they may (at any time) split into multiple columns,
which can in turn split again, using the \code{"*^"} interpretation token. The reverse can happen as well,
with two or more columns merging into a single column, using the \code{"v"} token.
This means that, while humdrum data at first glance looks like a simple two-dimensional table,
it is actually a flexible tree structure. As spines split and merge, the total number of columns
can change during a piece, creating a "ragged" edge.
Another similar issue is that a corpus of humdrum files may have varying numbers of spines/columns, between pieces.
("Global" comment/reference records are also a special case, as that are always a single value, even if interspersed with
multi-column local records.)
}
\details{
In \link{humdrumR}, spines, columns, and spine paths work like this.
First of all, we actually assume a slightly more strict version of the humdrum syntax:
we assume that all the spines which appear at the beginning of a file (headed with exlusive interpretations
like \code{"**kern"}) can never merge into each other. Thus, a humdrum file read into \code{humdrumR}
must not end with fewer columns than it starts.
Spine merges (\code{"*v"}) can only happen within spine paths that originally split off the same spine.
This extra-strict specification of spine paths in the humdrum syntax is, fortunately, something that has been
informally followed in most humdrum datasets.

Our strict spine-path definition makes everything work fairly simply:
Within a piece, the spines which appear at the beginning of the piece are the "true" spines through the rest of the piece, numbered
from left to right, starting from \code{1L}.
For each local token, the value in the \code{Spine} field is an integer indicating which of these
"true" spines it belongs to---global tokens have a \code{NA} value in their \code{Spine} field, because they are considerd to not belong to any spine.
Any spine path splits (\code{"*^"} from the main spines form subspines, which we call \strong{Paths}.
Every spine's paths are numbered, from right to left, starting from \code{0L}.
A spine with no splits will have all \code{0L}s in its \code{Path} field.
}
\section{Columns}{


It is very useful to sometimes turn humdrum data into a true two dimensional structure, with no ragged edges.
(This always requires removing global records.)
In order to do this, while maintaining a sensible relationship between spine which have spine paths,
we imagine our humdrum data \emph{padded} into a complete, non-ragged 2d table.
For instance, given this file\preformatted{**kern  **kern
A       E
*^      *
A       C       E
G       B       D
*v      *v      *
A       C        
*-      *-
}

We'd pad it out like:\preformatted{**kern   _P       **kern
A        _P       E
*^       _P       *
A        C        E
G        B        D
*v       *v       *
A        _P       C        
*-       _P       *-

##########################################
1        1        2        Spine
0        1        0        Path
1        2        3        Column
}

In this example, the \code{Spine}, \code{Path}, and \code{Column} values are shown below the data.
You can see that \code{Column} is used to indicate the "padded" position of each data token.
}

