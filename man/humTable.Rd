% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/humdrumR-class.R
\name{humTable}
\alias{humTable}
\alias{getHumtab}
\alias{pullFields}
\alias{fields}
\title{Humdrum tables (and their Fields)}
\usage{
getHumtab(humdrumR, dataTypes = "GLIMDd")

pullFields(
  humdrumR,
  fields = selectedFields(humdrumR),
  dataTypes = "D",
  null = c("charNA2dot", "NA2dot", "dot2NA", "asis"),
  drop = FALSE
)

fields(
  humdrumR,
  fieldTypes = c("Data", "Structure", "Interpretation", "Formal", "Reference",
    "Grouping", "selected")
)
}
\arguments{
\item{humdrumR}{\emph{\strong{HumdrumR data.}}

Must be a \link[=humdrumRclass]{humdrumR data object}.}

\item{dataTypes}{\emph{\strong{Which types of humdrum record(s) to include.}}

Defaults to \code{"GLIMDd"} for \code{as.lines()} and \code{as.matrix()}; \code{"Dd"} for \code{as.data.frame()};
\code{"LIMDd"} for \code{as.matrices()} and \code{as.data.frames()}.

Must be a single \code{character} string. Legal values are \verb{'G', 'L', 'I', 'M', 'D', 'd'}
or any combination of these (e.g., \code{"LIM"}).
(See the \link[=humTable]{humdrum table} documentation for explanation.)}

\item{fields}{\emph{\strong{Which fields to output.}}

Defaults to \code{selectedFields(humdrumR)}.

Must be a \code{character} string \link[=partialMatching]{partially} matching the name of a data field in the \code{humdrumR} input.
For example, \code{"Tok"} would match the \code{Token} field.}

\item{null}{\emph{\strong{How should null data points be output?}}

Default is \code{"NA2dot"}.

Must be a single character string, \link[=partialMatchng]{partially matching} \code{"NA2dot"}, \code{"dot2NA"}, \verb{'charNA2dot"}, or \code{"asis"}.
\code{"NA2dot"} means all \code{NA} values are converted to \code{"."}; \verb{"dot2NA} means all \code{"."} are converted to \code{NA}; \code{charNA2dot} means \code{NA} values
in \code{character} vectors are converted to \code{NA}, but not in other atomic types; \code{"asis"} means either \code{NA} or \code{"."} values may print, depending
on what is in the field.}

\item{drop}{\emph{\strong{Should single fields be extracted from the \code{data.table}?}}

Defaults to \code{FALSE}.

Must be a singleton \code{logical} value: an on/off switch.}

\item{fieldTypes}{\emph{\strong{Which types of fields to list.}}

Shows all fields by default.

Must be a \code{character} vector. Legal options are \code{"Data"}, \code{"Structure"}, \code{"Interpretation"}, \code{"Formal"}, \code{"Reference"},
and \code{"Grouping"}.
You can also pass \code{"selected"} to extract only the \link[=selectedFields]{selected fields}.
Types can be \link[=partialMatching]{partially matched}---for example, \code{"S"} for \code{"Structure"}.}
}
\description{
In the \link{humdrumR} package, the fundamental data structure is called a \strong{Humdrum Table}.
A humdrum table encodes all the information in a collection of one or more humdrum-syntax files
as a single \link[data.table:data.table]{data.table}
(A \code{data.table} is an "enhanced" version of R's standard \link{data.frame}).
Humdrum tables are stored "inside" every \link{humdrumRclass} object that you will work with, and various \code{humdrumR}
functions allow you to study or manipulate the them.
If you want to directly access the humdrum table within a \link{humdrumRclass} object, use the \code{\link[=getHumtab]{getHumtab()}} function.

\code{getHumtab} extracts the hudrum table from a \link[=humdrumRclass]{humdrumR object}.

Use the \code{fields()} function list the current fields in
a \link{humdrumRclass} object.
It returns a \code{\link[=data.table]{data.table()}} with five columns:
}
\details{
In a humdrum table, by default, humdrum data is organized in a maximally "long" (or "tall")
format, with each and every single "token" in the original data represented by a single row in the table.
Even multistops---tokens separated by spaces---are broken onto
their own rows. Meanwhile, each column in the humdrum table represents a single
piece of information associated with each token, which we call a \strong{field}.
Throughout this documentation, you should keep in mind that a "token" refers
to a \emph{row} in the humdrum table while a "field" refers to a \emph{column}:
\itemize{
\item Token = row
\item Field = column
}

\itemize{
\item \code{Name}
\item \code{Class}
\item \code{Type}
\itemize{
\item \code{Data}/\code{Structure}/\code{Interpretation}/\code{Formal}/\code{Reference}/\code{Grouping}
}
\item \code{Selected},
\itemize{
\item A \code{logical} indicating which fields are \link[=selectedFields]{selected}.
}
\item \code{GroupedBy}
\itemize{
\item A \code{logical} indicating which, if any fields, are currently grouping the data.
}
}
}
\section{Fields:}{
There are six types of fields in a humdrum table:
\enumerate{
\item Data fields
\item Structure fields
\item Interpretation fields
\item Formal fields
\item Reference fields
\item Grouping fields
}

When first created by a call to \code{\link[=readHumdrum]{readHumdrum()}} every
humdrum table has at least nineteen fields: one data field (\code{Token}), two interpretation
fields (\code{Tandem} and \code{Exclusive}), three formal fields, and thirteen structure fields. Additional
formal, interpretation, or reference fields
may be present depending on the content of the humdrum file(s), and users can create additional data fields
by using \link[=withinHumdrum]{within.humdrumR()}, \code{\link[=mutate.humdrumR]{mutate.humdrumR()}}, or some other functions.
\subsection{Data fields:}{

\emph{Data} fields are used to describe individual data points
in humdrum data (as opposed to groups of points).
Every humdrum table starts with a data
field called \strong{Token}, which
contains character strings representing the original strings read from the humdrum files.
Users can create as many additional data fields as they like. Every call to
\code{\link[=withinHumdrum]{withinHumdrum()}} generates new data fields.
}

\subsection{Structure fields:}{

Every humdrum table has thirteen \emph{Structure} fields,
which describe where each data token was "located" in the original humdrum data:
which file, which spine, which record, etc.
See the vignette on humdrum syntax to fully understand the terms here.
\itemize{
\item \emph{File info}:
\itemize{
\item \code{Filename} :: \code{character}
\itemize{
\item The unique name of the humdrum file. This may include an appended path
if more than one file with the same name were read from different directories
(see the \code{\link[=readHumdrum]{readHumdrum()}} docs).
}
\item \code{Filepath} :: \code{character}
\itemize{
\item The full file name (always includes its full path).
}
\item \code{Label} :: \code{character}
\itemize{
\item A label specified during the call to \code{\link[=readHumdrum]{readHumdrum()}}, associated with a particular
\code{readHumdrum} "REpath-pattern." If no label was specified, patterns are just labeled \code{"_n"}, where "\code{n}" is the
number of the pattern.
}
\item \code{File} :: \code{integer}
\itemize{
\item A unique number associated with each file (ordered alphabetically, starting from \code{1}).
}
\item \code{Piece} :: \code{integer}
\itemize{
\item A number specifying the number of the \emph{piece} in the corpus.
This is identical to the \code{File} field except when
more than one piece were read from the same file.
}
}
\item \emph{Location info}:
\itemize{
\item \code{Spine} :: \code{integer}
\itemize{
\item The spine, numbered (from left-to-right) starting from \code{1}.
\item This field is \code{NA} wherever \code{Global == TRUE}.
}
\item \code{Path} :: \code{integer}
\itemize{
\item The "spine path." Any time a \verb{*^} spine path split occurs in
the humdrum data, the right side of the split becomes a new "path." The original path
is numbered \code{0} with additional paths numbered with integers to the right.
(If there are no spine path splits, the \code{Path} field is all \code{0}s.)
\item This field is always \code{NA} when \code{Global == TRUE}.
}
\item \code{ParentPath} :: \code{integer}
\itemize{
\item For spine paths (i.e., where \code{Path > 0}), which path was the parent from
which this path split? Where \code{Path == 0}, parent path is also \code{0}.
}
\item \code{Record} :: \code{integer}
\itemize{
\item The record (i.e., line) number in the original file.
}
\item \code{DataRecord} :: \code{integer}
\itemize{
\item The \emph{data} record enumeration in the file, starting from \code{1}.
}
\item \code{Stop} :: \code{integer}
\itemize{
\item Which token in a multistop token, numbered starting from \code{1}.
\item In files with no multistops, the \code{Stop} field is all \code{1}s.
\item This field is always \code{NA} when \code{Global == TRUE}.
}
\item \code{Global} :: \code{logical}
\itemize{
\item Did the token come from a global record (as opposed to a local record)?
\item When \code{Global == TRUE}, the \code{Spine}, \code{Path}, and \code{Stop} fields are always \code{NA}.
}
}
\item \emph{Token info}:
\itemize{
\item \code{Type} :: \code{character}
\itemize{
\item What type of record is it?
\itemize{
\item \code{"D"} = non-null data
\item \code{"d"} = null data
\item \code{"I"} = interpretation
\item \code{"M"} = measure/barline
\item \code{"L"} = local comment
\item \code{"G"} = global comment.
}
}
}
}
}

\subsection{Interpretation fields:}{

\emph{Interpretation} fields describe interpretation metadata in the humdrum file(s).
Humdrum interpretations are tokens that "carry forward" to data points after them, unless cancelled out by a
subsequent interpretation. (See the humdrum syntax vignette for a detailed explanation.)
\emph{All} humdrum data must have an \emph{exclusive} interpretation
so humdrum tables always have an \code{Exclusive} (:: \code{character}) field indicating the
exclusive interpretation associated with each token/row of the \code{Token} field.

Humdrum data may, or may not, include additional \emph{tandem} interpretations. A universal rule for parsing
tandem interpretations is impossible, because A) tandem interpretations can "overwrite" each other and B)
users can create their own tandem interpretations. The best we can do in all cases is
identify \emph{all} tandem interpretations that have appeared previously in the spine
(counting most recent first). All these previous interpretations are encoded in a single
character string in the \code{Tandem} field (see the \code{\link[=tandem]{tandem()}} docs for details).
If working with non-standard interpretations, users can parse the \code{Tandem} field using the
\code{\link[=tandem]{tandem()}} function.
If no tandem interpretations occur in a file, the \code{Tandem} field is full of empty strings (\code{""}).

Fortunately, many tandem interpretations are widely used and standardized, and these
interpretations are known by \code{humdrumR}. Recognized interpretations (such as \verb{*clefG4} and \verb{*k[b-]})
are automatically parsed into their own fields by a call to \code{\link[=readHumdrum]{readHumdrum()}}.
See the \code{\link[=readHumdrum]{readHumdrum()}} documentation for more details.
}

\subsection{Formal fields:}{

\emph{Formal} fields indicate musical sections, or time windows within
a piece, including formal designations ("verse", "chorus", etc.) and measures/bars.
Humdrum data may or may not include formal metadata fields, indicated by the token \code{"*>"}.
Classified formal marks are put into fields matching their name.
Unclassified formal marks are placed in a field called \code{Formal} as a default.
Nested formal categories are appended with an underscore and a number for each level of descent:
\verb{Formal_1, Formal_2, ..., Formal_N}.
If part of a section is not given a name in a lower hierarchical level, the field is simply
empty (\code{""}) at that point.

Humdrum data may, or may not, also include barlines (tokens beginning \code{"="}).
However, humdrum tables \emph{always} include three formal fields related to barlines:
\itemize{
\item \code{Bar} :: \code{integer}
\itemize{
\item How many barline records (single or double) have passed before this token?
\item If no \code{"="} tokens occur in a file, \code{Bar} is all zeros.
\item Note that this field is independent of whether the barlines are labeled with numbers in the humdrum file!
}
\item \code{DoubleBar} :: \code{integer}
\itemize{
\item How many \emph{double}-barline records have passed before this token?
\item If no \code{"=="} tokens occur in a file, \code{DoubleBar} is all zeros.
}
\item \code{BarLabel} :: \code{character}
\itemize{
\item Any characters that occur in a barline-token \emph{after} an initial \code{"="} or \code{"=="}.
These include the \code{"-"} in the common "implied barline" token \code{"=-"},
repeat tokens (like \code{"=:||"}), and also any \emph{explicit} bar numbers.
\item Note that the \code{Bar} field always enumerate \emph{every} bar record, while
measure-number labels in humdrum data (which appear in the \code{BarLabel} field) may
do weird things like skipping numbers, repeating numbers, or having suffixes (e.g., \code{"19a"}).
If no barline tokens appear in the file, \code{BarLabel} is all empty strings (\code{""}).
}
}

If no barline tokens are present in a file, \code{Bar} and \code{DoubleBar} will be nothing but \code{0}s,
and \code{BarLabel} will be all \code{NA}.
}

\subsection{Reference fields:}{

\emph{Reference} fields describe any \strong{Reference Records}
in the humdrum data. Every reference record (records beginning \code{"!!!"}) in any
humdrum file in a corpus read by \link{readHumdrum} is parsed into a field named
by the reference code: \code{"XXX"} in \code{"!!!XXX"}.
Reference tokens are all identical throughout
any humdrum piece. If a reference code appears in one file but not another, the field is
\code{NA} in the file which does not have the code. If no reference records appear in any
files read by \code{\link[=readHumdrum]{readHumdrum()}}, no reference fields are created.

Examples of common reference records are \code{"!!!COM:"} (composer) and \code{"!!!OTL:"} (original title).
Any humdrum data with these records will end up having \code{COM} and \code{OTL} fields in its humdrum table.
}
}

\section{Null data}{


In humdrum syntax, there is no requirement that every spine-path contains data
in every record. Rather, spines are often padded with \emph{null tokens}.
In some cases, entire records may be padded with null tokens.
Each type of humdrum record uses a different null token:
\itemize{
\item \emph{Intepretation}: \code{*}
\item \emph{Comment}: \code{!}
\item \emph{Barline}: \code{=}
\item \emph{Data}: \code{.}
}

Many \code{humdrumR} functions automatically ignore null data, unless you specifically tell them not to
(usually, using \code{dataTypes} argument).
Whenever different \code{\link[=fields]{fields()}} are created or \link[=selectedFields]{selected}, \code{humdrumR} reevaluates
what data locations it considers null.
Note that \code{humdrumR} considers data locations to be "null" when
\itemize{
\item the selected fields are all \code{character} data \emph{and} the token is a single \code{"."}, \code{"!"}, \code{"="}, or \code{"*"}; \strong{or}
\item the selected fields are all \code{NA} (including \code{NA_character_}).
}

When \code{humdrumR} reevaluates null data, the \code{Type} field is updated, setting data records to \code{Type == "d"}
for null data and \code{Type == "D"} for non-null data.
This is the main mechanism \code{humdrumR} functions use to ignore null data: most functions
only look at data where \code{Type == "D"}.

Whenever you print or \link[=writeHumdrum]{export} a [humdrumR object\link{humdrumRclass}, null data in the selected fields
prints as \code{"."}---thus \code{NA} values print as \code{.}.
Thus, if you are working with numeric data with \code{NA} values, these \code{NA} values will print as \code{"."}.
\subsection{Grouping fields:}{

Grouping fields are special feels which may be created by calls to \code{\link[=group_by]{group_by()}}.
These fields are deleted by calls to \code{\link[=ungroup]{ungroup()}}.
}
}

\section{Reshaping}{


Breaking the complex syntax of humdrum data into the "flat" structure of a humdrum table, with every single token on one line
of a \code{data.table}, makes humdrum data easier to analyze.
Of course, thanks to the structure fields, we can easily
regroup and reform the original humdrum data or use the structure of the data (like spines) in our analyses.
However, in some cases, you might want to work with humdrum data in a different structure or "shape."
\code{humdrumR} has several options for \link[=collapseHumdrum]{"collapsing"} tokens within humdrum tables,
\link[=foldHumdrum]{"folding"} different parts of the data into new fields,
or otherwise \link[=humCoercion]{reshaping humdrum data} into basic R data structures you might prefer.
}

\seealso{
Other Core humdrum data representation: 
\code{\link{humdrumRclass}}
}
\concept{Core humdrum data representation}
