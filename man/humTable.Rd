% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/humdrumR-class.R
\name{humTable}
\alias{humTable}
\title{Humdrum Tables}
\description{
In the \link{humdrumR} package, the fundamental data structure is called a \strong{Humdrum Table}.
A humdrum table encodes all the information in a collection of one or more humdrum-syntax files
as a single \link{data.table}.
(A \code{data.table} is an "enhanced" version of R's standard \link{data.frame}.)
Humdrum tables are stored "inside" every \linkS4class{humdrumR} object that you will work with, and various \code{humdrumR}
functions allow you to study or manipulate the them.
If you want to directly access the humdrum table within a \linkS4class{humdrumR} object, use the \code{\link[=getHumtab]{getHumtab()}} function.
}
\details{
In a humdrum table, each row represents a single "token"
in the original humdrum data. Even multistops---tokens separated by spaces---are broken onto
their own rows. Meanwhile, each column in the humdrum table represents a single
piece of information associated with each token, which we call a \strong{field}.
Throughout this documentation, you should keep in mind that a "token" refers
to a \emph{row} in the humdrum table while a "field" refers to a \emph{column}:
\itemize{
\item \eqn{Token = Row}
\item \eqn{Field = Column}
}
}
\section{Fields}{


There are five types of fields in a humdrum table:
\enumerate{
\item Data fields
\item Structure fields
\item Interpretation fields
\item Formal fields
\item Reference fields
}

When first created by a call to \link{readHumdrum} every
humdrum table has at least nineteen fields: one data field (\code{Token}), two interpretation
fields (\code{Tandem} and \code{Exclusive}), three formal fields, and fifteen structure fields. Additional
interpretation or reference fields
may be present depending on the content of the humdrum file(s), and users can create additional data fields.

\strong{1. Data fields:}
Data fields are used to describe individual data points
in humdrum data (as opposed to groups of points).
Every humdrum table starts with a data
field called \strong{Token}, which
contains character strings representing the original strings read from the humdrum files.
Users can create as many additional data fields as they like. Every call to
\link{withinHumdrum}---which can also be called using the
\code{\link[humdrumR:humPipe]{\%hum>\%}} piping
operator---generates one or \eqn{N} new data fields named \eqn{{Pipe1, Pipe2, ..., PipeN}}.
These fields can be renamed using the \verb{$<-} operator.

\strong{2. Structure fields:}
Every humdrum table starts with fifteen Structure fields,
which describe where each data token was "located" in the original humdrum data: which file, which spine, which record, etc.
See the vignette on humdrum syntax to fully understand the terms here.
\itemize{
\item \emph{File info}:
\itemize{
\item \code{Filename} :: \code{character}
\itemize{
\item The unique name of the humdrum file. This may include an appended path
if more than one file with the same name were read from different directories (see the \link{readHumdrum} docs).
}
\item \code{Filepath} :: \code{character}
\itemize{
\item The full file name (always includes its full path).
}
\item \code{Label} :: \code{character}
\itemize{
\item A label specified during the call to \link{readHumdrum}, associated with a particular
\code{readHumdrum} "REpath-pattern." If no label was specified, patterns are just labeled \code{"_n"}, where "\code{n}" is the
number of the pattern. (Labels can also be created when \link[=humMerge]{merging two humdrumR objects}.)
}
\item \code{File} :: \code{integer}
\itemize{
\item A unique number associated with each file (ordered alphabetically, starting from \code{1}).
}
\item \code{Piece} :: \code{integer}
\itemize{
\item A number specifying the number of the \emph{piece} in the corpus.
This is identical to the \code{File} field except when
more than one piece were read from the same file.
}
}
\item \emph{Location info}:
\itemize{
\item \code{Spine} :: \code{integer}
\itemize{
\item The spine, numbered (from left-to-right) starting from \code{1}.
\item This field is \code{NA} wherever \code{Global == TRUE}.
}
\item \code{Path} :: \code{integer}
\itemize{
\item The "spine path." Any time a \verb{*^} spine path split occurs in
the humdrum data, the right side of the split becomes a new "path." The original path
is numbered \code{0} with additional paths numbered with integers to the right.
(If there are no spine path splits, the \code{Path} field is all zeros.)
\item This field is always \code{NA} when \code{Global == TRUE}.
\item Read the \link[=humColumns]{humdrum columns documentation} for a more thorough explanation
of spine paths.
}
\item \code{Column} :: \code{integer}
\itemize{
\item The tab-delineated column in the humdrum file---irrespective of Spine/Paths---, numbered starting from \code{1}.
\item This field is always \code{NA} when \code{Global == TRUE}.
\item See this \link[=humColumns]{explanation of columns in humdrumR}.
}
\item \code{Record} :: \code{integer}
\itemize{
\item The record (i.e., line) number in the original file.
}
\item \code{NData} :: \code{integer}
\itemize{
\item The \emph{data} record enumeration in the file, starting from \code{1}.
}
\item \code{Stop} :: \code{integer}
\itemize{
\item Which token in a multistop token, numbered starting from \code{1}.
\item In files with no multistops, the \code{Stop} field is all \code{1}s.
\item This field is always \code{NA} when \code{Global == TRUE}.
}
\item \code{Global} :: \code{logical}
\itemize{
\item Did the token come from a global record (as opposed to a local record)?
\item When \code{Global == TRUE}, the \code{Spine}, \code{Column}, and \code{Stop} fields are always \code{NA}.
}
}
\item \emph{Token info}:
\itemize{
\item \code{Type} :: \code{character}
\itemize{
\item What type of record is it?
\itemize{
\item \code{"D"} = non-null data
\item \code{"d"} = null data
\item \code{"I"} = interpretation
\item \code{"M"} = measure/barline
\item \code{"L"} = local comment
\item \code{"G"} = global comment.
\item \code{"P"} = null "non-tokens" (see the \link[=humColumns]{humdrumR columns} documentation for an explanation.)
}
}
\item \code{Null} :: \code{logical}
\itemize{
\item Is the \link[=humdrumR]{active} data field null?
\item See the detailed discussion below, in the section of this documentation called "Null Data."
}
\item \code{Filter} :: \code{logical}
\itemize{
\item Has this record/token been \link[=filterHumdrum]{filtered out}?
}
}
}

\strong{3. Interpretation fields:}
Interpretation fields describe interpretation metadata in the humdrum file(s).
Humdrum interpretations are tokens that "carry forward" to data points after them, unless cancelled out by a
subsequent interpretation. (See the humdrum syntax vignette for a detailed explanation.)
\emph{All} humdrum data must have an \emph{exclusive} interpretation
so humdrum tables always have an \code{Exclusive} (:: \code{character}) field indicating the
exclusive interpretation associated with each token/row of the \link[=humdrumR]{active} field.

Humdrum data may, or may not, include additional \emph{tandem} interpretations. A universal rule for parsing
tandem intepretations is impossible, because A) tandem interpretations can "overwrite" each other and B)
users can create their own tandem interpretations. The best we can do in all cases is
identify \emph{all} tandem interpretations that have appeared previously in the spine
(counting most recent first). All these previous interpretations are encoded in a single
character string in the \code{Tandem} field.
If working with non-standard intrepretations, users can parse the \code{Tandem} field using the
\link{getTandem} function.
If no tandem interpretations occur in a file, the \code{Tandem} field is full of empty strings (\code{""}).

Fortunately, many tandem interpretations are widely used and standardized, and these
interpretations are known by \code{humdrumR}. Recognized interpretations (such as \verb{*clefG4} and \verb{*k[b-]})
are automatically parsed into their own fields by a call to \link{readHumdrum}.
See the \link{readHumdrum} documentation for more details.

\strong{4. Formal fields:}
Formal fields indicate musical sections, or time windows within
a piece, including formal designations ("verse", "chorus", etc.) and measures/bars.
Humdrum data may or may not include formal metadata fields, indicated by the token \code{"*>"}.
Classified formal marks are put into fields matching their name.
Unclassified formal marks are placed in a field called \code{Formal} as a default.
Nested formal categories are appended with an underscore and a number for each level of descent:
\verb{Formal_1, Formal_2, ..., Formal_N}.
If part of a section is not given a name in a lower hierarchical level, the field is simply
empty (\code{""}) at that point.

Humdrum data may, or may not, also include barlines (tokens beginning \code{"="}).
Humdrum tables \emph{always} include three formal fields related to barlines:
\itemize{
\item \code{Bar} :: \code{integer}
\itemize{
\item How many barline records (single or double) have passed before this token?
\item If no \code{"="} tokens occur in a file, \code{Bar} is all zeros.
\item Note that this field is independent of whether the barlines are labeled with numbers in the humdrum file!
}
\item \code{DoubleBar} :: \code{integer}
\itemize{
\item How many \emph{double}-barline records have passed before this token?
\item If no \code{"=="} tokens occur in a file, \code{DoubleBar} is all zeros.
}
\item \code{BarLabel} :: \code{character}
\itemize{
\item Any characters that occur in a barline-token \emph{after} an initial \code{"="} or \code{"=="}.
These include the \code{"-"} in the common "implied barline token \code{"=-"},
repeat tokens (like \code{"=:||"}), and also any \emph{explicit} bar numbers.
\item Note that the \code{Bar} field always enumerate \emph{every} bar record, while
measure-number labels in humdrum data (which appear in the \code{BarLabel} field) may
do weird things like skipping numbers, repeating numbers, or having suffixes (e.g., \code{"19a"}).
If no barline tokens appear in the file, \code{BarLabel} is all empty strings (\code{""}).
}
}

\strong{5. Reference fields:}
Reference fields describe any \emph{Reference Records}
in the humdrum data. Every reference record (records beginning \code{"!!!"}) in any
humdrum file in a corpus read by \link{readHumdrum} is parsed into a field named
by the reference code: \code{"XXX"} in \code{"!!!XXX"}.
Reference tokens are all identical throughout
any humdrum piece. If a reference code appears in one file but not another, the field is
\code{NA} in the file which does not have the code. If no reference records appear in any
files read by \link{readHumdrum}, no reference fields are created.

Examples of common reference records are \code{"!!!COM:"} (composer) and \code{"!!!OTL:"} (original title).
Any humdrum data with these records will end up having \code{COM} and \code{OTL} fields in its humdrum table.
}

\section{Null Data}{


In humdrum syntax, there is no requirement that every spine-path contains data
in every record. Rather, spines are often padded with \emph{null tokens}.
In some cases, entire records may be padded with null tokens.
Each type of humdrum record uses a different null token:
\itemize{
\item \emph{Intepretation}: \code{*}
\item \emph{Comment}: \code{!}
\item \emph{Barline}: \code{=}
\item \emph{Data}: \code{.}
}

Null tokens in a humdrum table are identified in the logical \code{Null} field.
The \code{Null} field is set when a humdrum table is created (by \link{readHumdrum}) and is updated everytime
a new \link[=humdrumR]{active} field is set.
\code{Null} is set to \code{TRUE} wherever, either
\itemize{
\item the active field is \code{character} data and the token is a single \code{"."}, \code{"!"}, \code{"="}, or \code{"*"};
\item the active field is \code{NA} (including \code{NA_character_}).
}

In parallel to the \code{Null} field, null \emph{data} tokens (\code{"."}) are identified as their own record type: \code{"d"}.
All updates/changes to the \code{Null} field are also propogated to the \code{Type} field---i.e., setting \code{Type == d} wherever
a data record is \code{Null}.
This is important/useful because \link{withinHumdrum} routines are, by default, only applied to \code{"D"} data, ignoring \code{"d"}.

Whenever you \link[=humPrint]{print} or \link[=writeHumdrum]{export} a \linkS4class{humdrumR} object, null data in the active field
(i.e., \code{Null == TRUE}) print as \code{"."}.
Thus, if you are working with numeric data, with \code{NA} values, these \code{NA} values will print as \code{"."}.
}

\section{Reshaping}{


Breaking the complex syntax of humdrum data into the "flat" structure of a humdrum table, with every single token on one line
of a \code{data.table}, makes humdrum data easier to analyze.
Of course, thanks to the structure fields, we can easily
regroup and reform the original humdrum data or use the structure of the data (like spines) in our analyses.
However, in some cases, you might want to work with humdrum data in a different structure or "shape."
HumdrumR has several options for \link[=humShape]{"folding"} tokens within humdrum tables,
or otherwise \link[=humCoercion]{reshaping humdrum data} into data formats/structures you might prefer.

...
}

