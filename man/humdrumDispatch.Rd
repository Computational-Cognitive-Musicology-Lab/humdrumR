% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Dispatch.R
\name{humdrumDispatch}
\alias{humdrumDispatch}
\alias{exclusiveDispatch}
\alias{makeDispatchDF}
\alias{makeHumdrumDispatcher}
\alias{print.humdrumDispatch}
\title{Regular expression method dispatch and function application}
\usage{
humdrumDispatch(
  x,
  dispatchDF,
  Exclusive = NULL,
  funcName = NULL,
  regexApply = TRUE,
  multiDispatch = FALSE,
  ...,
  outputClass = "character"
)

exclusiveDispatch(
  x,
  dispatchDF,
  Exclusive,
  regexApply = TRUE,
  outputClass = "character",
  inPlace = FALSE,
  ...
)

makeDispatchDF(...)

makeHumdrumDispatcher(
  ...,
  funcName = "humdrum-dispatch",
  outputClass = "character",
  args = alist(),
  memoize = TRUE,
  dispatch.attr = TRUE
)

\method{print}{humdrumDispatch}(x)
}
\arguments{
\item{dispatchDF}{\emph{\strong{A data.frame which describes what function should be called for which regex input. (See details).}}

Must be a \code{data.frame}.}

\item{Exclusive}{\emph{\strong{Exclusive interpretations to dispatch.}}

Defaults to \code{NULL}.

If \code{NULL}, only the regexes are used for dispatch.}

\item{multiDispatch}{\emph{\strong{Whether to use multiple dispatch function for each interpretation.}}

Defaults to \code{FALSE}.

Must be a singleton \code{logical} value: an on/off switch.

If \code{FALSE} the "best" regex/exclusive match is dispatched for each Exclusive segment.
If \code{TRUE}, differenet functions can be dispatched
within the same input vector.}

\item{...}{\emph{\strong{Arguments to pass to dispatch functions.}}}

\item{outputClass}{\emph{\strong{The default output class which the function should return.}}

Defaults to \code{"character"}.

Must be single \code{character} string.

Generally, to make sense, all dispatched functions should return the same type, which you should explicitly
indicate with the \code{outputClass} argument.
Dispatch functions should also be \link[base:Vectorize]{vectorized}.}

\item{str}{\emph{\strong{The input strings, on which dispatch is called.}}

Must be \code{character}.}
}
\description{
The \link{humdrumR} \strong{regular-expression method dispatch system}
is a simple system for making new functions which can by smartly
applied to a variety of character strings.
Humdrum dispatch works like normal R method dispatch, but instead of dispatching specific methods
based on their class (\code{integer}, \code{character}, etc.) it dispatches based on regular expressions.
In addition, exclusive interpretations can be used to guide dispatch.
}
\details{
Many \code{humdrumR} functions are in fact, humdrum-dispatch functions: for example, \code{\link[=tonalInterval.character]{tonalInterval.character()}}.
If you call \code{tonalInterval('ee-')}, the function will recognize that the input string is a token in the  \verb{**kern}
representation, and call the appropriate parser.
If you instead call \code{tonalInterval('me')}, the function will recognize that the input string is a token in the \verb{**solfa}
representation, and call the appropriate parser for that.
\subsection{dispatchDF}{

The \code{dispatchDF} must be a \code{\link[data.table:data.table]{data.table::data.table()}} created using the \code{makeDispatchDF} function.
\code{makeDispatchDF} takes one or more arguments, each a list with three components (ordered, not nameed):
\enumerate{
\item A character vector of exclusive interpretations. (Specify \code{"any"} if you don't want exclusive dispatch).
\item A regular expression (character string) or a function which can generate a regular expression, which accepts \code{...}
arguments at the time of dispatch.
\item A function to dispatch.
}
}
}
\section{makeHumdrumDispatcher}{


\code{makeHumdrumDispatcher} is a function which creates a new function which automatically performs humdrum-dispatch.
A number of important \code{humdrumR} functions are created with \code{makeHumdrumDispatcher}:
\itemize{
\item \code{tonalInterval.character}
\item \code{diatonicSet.character}
\item \code{tertianSet.character}
\item \code{rhythmInterval.character}
}
}

\examples{

u <- c('A', 'B', 'CD', 'E', 'F', 'gh', 'L', 'KX')
l <- c('a', 'b', 'cd', 'e', 'f', 'gh', 'l', 'kx')

lowercasefunc <- \(x) 5L - nchar(x)

humdrumDispatch(l, outputClass = 'integer',
                makeDispatchDF(list('any', '[a-z]+',  lowercasefunc),
                               list('any', '[A-Z]+',  nchar)))
 # lowercasefunc will be called on l, nchar on u

}
