% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/humPitch.R
\docType{class}
\name{tonalInterval}
\alias{tonalInterval}
\alias{tint}
\alias{is.tonalInterval}
\alias{invert}
\alias{allints}
\title{Representation of tonal pitch information}
\format{
An object of class \code{character} of length 93.
}
\usage{
tint(octave, LO5th = 0L, cent = numeric(length(octave)))

is.tonalInterval(x)

\S4method{as.character}{tonalInterval}(x)

\S4method{as.numeric}{tonalInterval}(x)

\S4method{+}{character,tonalInterval}(e1, e2)

\S4method{\%\%}{tonalInterval,tonalInterval}(e1, e2)

invert(tint, around, Key, ...)

allints
}
\description{
The \code{tonalInterval} the core tonal pitch representation in \code{\link[humdrumR:humdrumR]{humdrumR}}.
A \code{tonalInterval} is an abstract representation of tonal pitch: since musical pitch
is fundamentally relative, it is the \strong{intervals} (distances), and more generally \emph{relationships},
between "notes" that are important.
All standard musical pitch representations can be represented as \code{tonalIntervals}: thus, \code{tonalIntervals}
are a kind of backend, lingua franca, for \code{humdrumR} pitch functionality.
For the most part, users should not need to interact with \code{tonalInterval}s much directly.
Rather, \code{tonalInterval}s work behind the scene in numerous \code{humdrumR} pitch functions.
See the \link{pitchRepresentations} and \link{tonalTransformations} documentation for details of ussage.
See the \emph{Tonality in humdrumR} vignette for a detailed explanation of the theory and specifics of \code{tonalInterval}s.

These functions translate various pitch representations
between each other. Using the \code{humdrumR} \code{\link[humdrumR:regexDispatch]{regular-expression dispatch system}}
they will even (automatically) read parts of a string which represent a pitch,
and translate only that part (leaving the rest of the string unchanged).
They all have an option \code{inPlace} which can be set to \code{FALSE}
if you want them to discard non-pitch parts of the string(s).
}
\details{
:

The \code{tonalInterval} is a \href{http://adv-r.had.co.nz/S4.html}{S4 class}, which inherits from
\code{humdrumR}'s more general virtual class \link{struct}.
(From \link{struct}, \code{tonalInterval}s inherit a lot of useful "vector-like" behaviors/functionality.)

Under the hood, these functions use the \code{\link{humdrumR}}
\code{\link[humdrumR:tonalInterval]{tonalInterval}} \code{S4} class as the
fundamental, \emph{lingua franca} representation of pitch.
}
\section{Slots}{

\describe{
\item{\code{Octave}}{integers representing the octave offset.}

\item{\code{Fifth}}{integers representing the "line-of-fifths' value.}

\item{\code{Cent}}{numeric values representing cents (1200th of an octave).}
}}

\section{Arithmetic}{


Technically, \code{tonalInterval}s are examples of algebraic \link[=https://en.wikipedia.org/wiki/Module_(mathematics)]{modules over integers}.
This means that certain arithmetic operations are defined for \code{tonalIntervals}, which can be called using
standard arithmatic operators (\code{+}, \code{-}, etc.):
\enumerate{
\item Addition: \code{tonalIntervals} can be added together, acting exactly as you'd expect (i.e., \eqn{M3 + M3 = P5}).
\item Subtraction: \code{tonalIntervals} can be subtracted just as they are added. Also, they can be negated with a single \code{-}
operator (like \code{-M3}).
\item Multiplication: \code{tonalInterval}s can \emph{not} be multiplied together.
However, \href{https://en.wikipedia.org/wiki/Scalar_multiplication}{scalar multiplication} is defined for integers.
thus, \code{tonalIntervals} can be multiplied by integers to create new \code{tonalInterval}s: e.g., \eqn{M2 * 3 = A4}.
\item Division:
Multiplication and division are slightly more limited:
Consequently, a \code{tonalInterval} can be divided by another \code{tonalInterval} to produce
an integer: \eqn{M4 / M2 = 2L}, but not non-integer values.
This means that only simple, \href{https://en.wikipedia.org/wiki/Euclidean_division}{Euclidean}
division is possible: we divide
a \code{tonalInterval} by another \code{tonalInterval} to get \emph{both}
an integer \strong{quotient} and a \code{tonalInterval} \strong{remainder}.
Each of these values can be useful in different ways,
so in \code{R} they are calculated with two separate operators:
\code{\link[base:Arithmetic]{\%\% and \%/\%}}.
The remainder (a.k.a., \emph{modulo}) operator (\code{\%\%}) is especially
useful in pitch calculations, because tonal scales can be seen as
a modulus operation (modulo 7 for diatonic). For instance,
\code{tonalint \%\% tint(-11, 7)} will always calculate the generic
version of an interval.
}
}

\section{Relational Operators}{


\code{tonalInnterval}s can be compared using the standard \link[=relational operations]{base:Comparison}---\code{==},
\code{!=}, \code{>}, \verb{>=``, etc. Two }tonalIntervals\verb{s are equal (according to }==\verb{) only if all their }Octave\verb{, }Fifth\verb{, and }Cent\verb{slots are exactly identical.  Thus, enharmonic notes (like C# and Db) are \\emph\{not\} equal. However, ordinal comparisons (e.g.,}>\verb{, }<=\verb{) between }tonalInterval\verb{s are based on their semitone (equal temperament) size, so enharmonicicty is irrelevant. For instance, }M3 >= A2\code{is}TRUE`.
}

\keyword{datasets}
