% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/humPitch.R
\docType{class}
\name{tonalInterval}
\alias{tonalInterval}
\alias{tint}
\alias{is.tonalInterval}
\alias{as.double.tonalInterval}
\alias{invert}
\alias{allints}
\title{Representation of tonal pitch information}
\format{
An object of class \code{character} of length 93.
}
\usage{
tint(octave, LO5th = 0L, cent = numeric(length(octave)))

is.tonalInterval(x)

\S4method{as.character}{tonalInterval}(x)

\method{as.double}{tonalInterval}(x, ...)

\S4method{+}{character,tonalInterval}(e1, e2)

\S4method{\%\%}{tonalInterval,tonalInterval}(e1, e2)

invert(tint, around = Unison)

allints
}
\description{
This \emph{S4} class is the core tonal pitch representation in the
\code{\link[humdrumR:humdrumR]{humdrumR package}}.
The object is used to represent tonal pitch names ("C", "G#", "Db", etc.), tonal intervals
and scale degrees ("Major 3rd", "Diminished 5th", etc.), and solfege ("Do", "Re", "Fi", etc.).
Each pitch/interval is represented as two integers: one representing octave, the other
position on the circle of fifths. These values are held in the slots \code{\@Octave}
and \code{\@Fifth}.
The interval/pitch represented is the result of the Octaves and Perfect 5ths (actually, Perfect
\emph{12ths}) in the slots added together.
(\code{tonalInterval} interfaces with \code{\link[humdrumR:humdrumR]{humdrumR}}'s other
\code{\link[humdrumR:humTonality]{types of tonal data}}.)

These functions translate various pitch representations
between each other. Using the \code{humdrumR} \code{\link[humdrumR:regexDispatch]{regular-expression dispatch system}}
they will even (automatically) read parts of a string which represent a pitch,
and translate only that part (leaving the rest of the string unchanged).
They all have an option \code{inPlace} which can be set to \code{FALSE}
if you want them to discard non-pitch parts of the string(s).
}
\details{
Tonal intervals (which are rather abstract) can be translated to more concrete
pitch representations using a variety of \code{\link[humdrumR:tonalInterval-write]{as.xxx}}
methods. Tonal intervals can also be created by reading various inputs
using these \code{\link[humdrumR:tonalInterval-read]{read.xxx}} functions.

In the case of fifths, it is not difficult (for learned musicians at least) to
see how the numbers related to tonal pitch names (C = 0, G = 1, D = 2, A = 3,
A# = 10, Bb = -2, etc.), intervals (P1 = 0, P5 = 1, M2 = 2, M6 = 3, A6 = 10, m7 = -2, etc.),
solfege (Do = 0, So = 1, Re = 2, La = 3, Li = 10, Te = -2, etc.).
It's just the circle of fifths!
However, how the Fifth and Octave numbers relate to specific intervals/pitches
is not immediately intuitive, and not is not conducive to human reading. For instance,
given the pair \eqn{(Octave = -3, Fifth = 3)}{(Octave = -3, Fifth = 3)}, I can quicklty recognize that this \code{tonalInterval}
refers to the tonal name "A" (or the interval "Major 6th", or the solfege "La", etc.).
However, it is difficult (even for me) to immediately recognize \emph{which} "A" this is.
This is ok! And it is intentional. The representation is meant to make coding easier, not for users
to actually interact with. (Functions to read/write \code{tonalInteval}s to more familiar
representations are provided with \code{humdrumR}.)

The way the integers in the \code{@Octave} and \code{@Fift
h} slots are interpreted is as follows:
We can think of each \code{Octave} as corresponding to 12 semitones, and each \code{Fifth} corresponding
to 19 semitones (Perfect 12th). Thus, \deqn{(Octave = -1, Fifth = 1) = -12 + 19 = 7}
or the example from previous paragraph:
\deqn{(O=-3, F=3) = -12*3 + 19*3 = -36 + 57 = 21}
which means the "Major 6" is actually a major 13th.
More generally can also think of the two integers as exponents of two bases: \deqn{(O, F) = 2^O * ~3^F}.
If the \code{Fifth} base is actually 3, this represents a "pure" 12th, and thus
the resulting numbers represent \strong{Pythagorean Tuning}.
\deqn{2^{-1} * 3^{1} = \frac{3^1}{2^1} = \frac{3}{2} = 1.5}
If we instead use as our fifth base \eqn{2^{\frac{19}{12}}} we
will get equal temperement:
\deqn{2^{-1} * {2^{\frac{19}{12}}}^1 = 2^{\frac{7}{12}}}

Under the hood, these functions use the \code{\link{humdrumR}}
\code{\link[humdrumR:tonalInterval]{tonalInterval}} \code{S4} class as the
fundamental, \emph{lingua franca} representation of pitch.
}
\section{Slots}{

\describe{
\item{\code{Fifth}}{Integers representing the intervals'
size on the circl of fifths. When considering absolute size
these fifths are actually treated like pure \emph{12ths} (i.e., one
fifth + one octave): 19 semitones, or \deqn{3^1}.}

\item{\code{Octave}}{Integers representing the octave offset of the intervals
(in addition to the fifth). See details for full explanation.}

\item{\code{Cent}}{Real numbers representing the cents (2^(1/1200)) offset of the interval.}
}}

\section{Vectorization}{

\code{tonalInterval} inherits from the virtual class
\code{\linkS4class{struct}}.
This means you can apply normal vectorized commands to \code{tonalInterval}s,
and even put them in \code{\link[base:data.frame]{data.frames}}.
}

\section{Arithmetic}{

\code{tonalInterval} objects have (some) arithmetic operations defined.
Addition and subtraction are straightword and intuitive (i.e., \eqn{M3 + M3 = P5}).

Multiplication and division are slightly more limited:
\href{https://en.wikipedia.org/wiki/Scalar_multiplication}{scalar multiplication}
is defined \emph{for integers}: \eqn{M2 * 3 = A4}
(the result is always a new \code{tonalInterval}).
Consequently, a \code{tonalInterval} can be divided by another \code{tonalInterval} to produce
an integer: \eqn{M4 / M2 = 2L}, but not non-integer values.
This means that only simple, \href{https://en.wikipedia.org/wiki/Euclidean_division}{Euclidean}
division is possible: we divide
a \code{tonalInterval} by another \code{tonalInterval} to get \emph{both}
an integer \strong{quotient} and a \code{tonalInterval} \strong{remainder}.
Each of these values can be useful in different ways,
so in \code{R} they are calculated with two separate operators:
\code{\link[base:Arithmetic]{\%\% and \%/\%}}.
The remainder (a.k.a., \emph{modulo}) operator (\code{\%\%}) is especially
useful in pitch calculations, because tonal scales can be seen as
a modulus operation (modulo 7 for diatonic). For instance,
\code{tonalint \%\% tint(-11, 7)} will always calculate the generic
version of an interval.
}

\section{Relational Operators}{


\code{tonalInnterval}s can be compared using the standard
\code{\link[base:Comparison]{relational operators}}---\code{==},
\code{!=}, \code{>}, \code{>=}, etc.
\code{tonalIntervals}s are equal only if their \code{Octave} and
\code{Fifth} slots are identical. Thus, enharmonic notes are \emph{not}
equal.
Numeric comparisons (e.g., \code{>},
\code{<=}) are based on their semitone (equal temperament) size.
}

\seealso{
humTonality
}
\keyword{datasets}
