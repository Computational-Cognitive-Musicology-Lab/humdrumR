% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tonalInterval.R
\name{tonalInterval}
\alias{tonalInterval}
\alias{tint}
\alias{is.tonalInterval}
\alias{tonalInterval.tonalInterval}
\alias{tonalInterval.logical}
\alias{tonalInterval.NULL}
\alias{tonalInterval.numeric}
\alias{tonalInterval.rational}
\alias{tonalInterval.fraction}
\alias{tonalInterval.integer}
\alias{tonalInterval.character}
\title{Representation of tonal pitch information}
\usage{
tonalInterval(...)

tint(
  octave,
  LO5th = 0L,
  cent = numeric(length(octave)),
  partition = FALSE,
  Key = NULL,
  roundContour = floor
)

is.tonalInterval(x)

tonalInterval(...)

\method{tonalInterval}{tonalInterval}(x, ...)

\method{tonalInterval}{logical}(x, ...)

\method{tonalInterval}{`NULL`}(x, ...)

\method{tonalInterval}{numeric}(
  x,
  tonalHarmonic = 3,
  centMargin = 10,
  accidental.melodic = FALSE,
  ...
)

\method{tonalInterval}{rational}(x, tonalHarmonic = 3, accidental.melodic = FALSE, ...)

\method{tonalInterval}{fraction}(x, tonalHarmonic = 3)

\method{tonalInterval}{integer}(n, accidental.melodic = FALSE, ...)

\method{tonalInterval}{character}(str, Exclusive = NULL, ..., multiDispatch = FALSE)
}
\description{
The \code{tonalInterval} is the core tonal pitch representation in \link[=humdrumR]{humdrumR}.
A \code{tonalInterval} is an abstract representation of tonal pitch, which can be translated to/from all standard "concrete" pitch representations:
solfege, scientific pitch, semitones, frequencies, scale degrees, intervals, etc.
For the most part, users should not need to interact with \code{tonalInterval}s directly---rather, \code{tonalInterval}s work behind the scene in numerous \code{humdrumR} pitch functions.
See the \link{pitchRepresentations} and \link{tonalTransformations} documentation for details of usage and functionality or the \emph{Tonality in humdrumR} vignette for
a detailed explanation of the theory and specifics of \code{tonalInterval}s.
}
\details{
The \code{tonalInterval} is a \href{http://adv-r.had.co.nz/S4.html}{S4} subclass of \code{humdrumR}'s virtual class \link{struct}, from which it inherits a lot of useful "vector-like" behaviors/functionality.

The constructor function \code{tint} can be used to create \code{tonalIntervals} directly.
The three arguments corespond to the three slots: \code{octave}, \code{LO5th} (Fifth), and \code{cent}.
All inputs will be coerced to match in length.
What's more, the \code{octave} argument can be left blank, in which case the appropriate octave will automatically be computed
to place the interval in the octave above middle-C.

By default, the \link[base:character]{as.character} method, and thus (via \link{struct}) the \link[methods:show]{show} method, for \code{tonalInterval}s call \link[=pitchRepresentations]{kern()}.
Thus, if you return a \code{tonalInterval} on the command line (or call \link[base:print]{print} one one) you'll see the \link[=pitchRepresentations]{kern pitch} representation printed.
}
\section{Slots}{

\describe{
\item{\code{Octave}}{integers representing the octave offset.}

\item{\code{Fifth}}{integers representing the "line-of-fifths" value.}

\item{\code{Cent}}{numeric values representing cents (1200th of an octave).}
}}

\section{Arithmetic}{


Technically, \code{tonalInterval}s are examples of algebraic \href{https://en.wikipedia.org/wiki/Module_(mathematics)}{modules over integers}.
This means that certain arithmetic operations are defined for \code{tonalIntervals} and can be called using standard arithmetic operators (\code{+}, \code{-}, etc.):
\itemize{
\item Addition: \code{tonalIntervals} can be added together, acting exactly as you'd expect (i.e., \eqn{M3 + m3 = P5}).
\item Subtraction: \code{tonalIntervals} can be subtracted just as they are added. Also, they can be negated with a single \code{-}
operator (like \code{-M3}).
\item Multiplication: \code{tonalInterval}s can \emph{not} be multiplied together.
However, \href{https://en.wikipedia.org/wiki/Scalar_multiplication}{scalar (integer) multiplication} is defined:
thus, \code{tonalIntervals} can be multiplied by integers to create new \code{tonalInterval}s: e.g., \eqn{M2 * 3L = A4}.
\item Division: as the natural inverse of scale multiplication, \href{https://en.wikipedia.org/wiki/Euclidean_division}{Euclidean division}
is defined for \code{tonalIntervals}---i.e., division by/into whole (integer) pieces, often with leftover "remainders" (modulo).
In R, Euclidean division is achieved with the \link[base:Arithmetic]{\%/\%} operator---\emph{not} \code{/}---, with the associated \link[base:Arithmetic]{\%\%} used for the remainder/modulo.
Two \code{tonalInterval}s can be divided to produced an integer; Conversely, a \code{tonalInterval} can be divided by an integer to produce a \code{tonalInterval}.
}

Take note that the way \code{humdrumR} defines Euclidean division is based in \emph{tonal space}---i.e., the line-of-fifths---not frequency or atonal-semitone space.
For example, an augmented-fourth divided by a major-second \emph{is} \code{3L}, but a diminished-fifth divided by a major-second is \emph{not} 3L---\code{d5 \%/\% M2} equals \code{-3L} with a remainder of \code{P8} (plus an octave)!
The division algorithm works by applying standard Euclidean division to the \verb{@Fifth} slot (line-of-fifths tonal space), and shifting the \verb{@Octave} value in
the remainder to the match the appropriate octave.
This definition has the useful properties that \code{specificinterval \%\% A1 = genericinterval} and \code{interval \%\% d2 = enharmonicinterval}.

Since basic data types can be parsed into \code{tonalInterval} (see below), \code{humdrumR} will attempt to automatically \href{https://en.wikipedia.org/wiki/Type_conversion}{coerce}
data to tonalIntervals when asked to perform arithmetic.
This means that arithmetic can be applied when one of the two arguments is a \code{tonalInterval} and the other is a coercable atomic.
For instance, \code{M3 + 2L} will interpret \code{2L} as two semitones and add a major-second to the major-third!
The clever \link[=regexDispatch]{dispatch system} will even ignore character strings that are not recognized (see examples)!
This is useful when combined with the "Predifined Intervals" (like \code{M3}), described below.
\subsection{Relational Operators}{

\code{tonalInterval}s can be compared using the standard \link[base:Comparison]{relational operations}---\code{==}, \code{!=}, \code{>}, \code{>=}, etc.
Two \code{tonalInterval}s are equal (according to \code{==}) only if all their slots (\code{Octave}, \code{Fifth}, and \code{Cent})
are exactly identical.
Thus, enharmonic notes (like C# and Db) are \emph{not} equal.
In contrast, ordinal comparisons (e.g., \code{>}, \code{<=}) between \code{tonalInterval}s are based on their semitone (equal temperament) size, so enharmonicity is irrelevant.
Thus, \code{m3 >= A2} and \code{A2 >= m3} are both \code{TRUE}, even though \code{m3 == A2} is not.
}

\subsection{Predefined Intervals:}{

\code{humdrumR} automatically exports a bunch of \code{tonalInterval}s, named by their musical interval representation.
Every generic interval from 1 to 15 is combined with every interval quality \code{dd} (doubly diminished), \code{d} (diminished), \code{m} (minor), \code{M} (major), \code{A} (augumented)
\code{AA} (doubly augmented).
Thus, after loading \code{humdrumR}, you can type things like \code{M3 + M3} and get \code{A5}.
In addition, the variables \code{unison} (\verb{= P1 = tint(0, 0)}),  \code{pythagorean.comma} (\verb{= d2 = tint(-19,12)}), and \code{octave} (\code{tint(1, 0)}) are exported as well.
}
}

\section{Parsing}{


\code{humdrumR} includes a easy-to-use but powerful system for parsing pitch information into the \code{tonalInterval} representation.
Basic methods are defined for numeric values representing atonal pitch information:
\itemize{
\item \link[base:integer]{integer} values are interpreted as semitones. Watch out! In R, you need to append an \code{L} to a number to make it an explicit integer:
For example, \code{tonalInterval(3L)}.
\item \link[base:numeric]{numeric}/\code{\link[=double]{double()}} and \code{\link[=rational]{rational()}} values are interpreted as frequency ratios, assuming a \href{https://en.wikipedia.org/wiki/Pythagorean_tuning}{Pythagorean tuning}.
For example, the value \code{2.0} will be interpreted as an octave (two to one ratio.)
}

However, the most useful tool for humdrum data is parsing pitch representations encoded in \code{character} tokens.
The \code{humdrumR} regex/exclusive parsing system is used to interpret character strings as tonalIntervals.
This includes character tokens with pitch information embedded alongside other information, like \verb{"4.ee} in a kern token.
There are six regex-patterns that \code{tonalInterval} known how to parse automatically:\tabular{lcr}{
   Representation \tab Exclusive \tab Example \cr
   Kern \tab **kern \tab \verb{ee-} \cr
   \href{https://en.wikipedia.org/wiki/Scientific_pitch}{Scientific Pitch} \tab **pitch \tab \code{Eb5} \cr
   Interval \tab **hint/**mint/**int \tab \code{+m3} \cr
   Scale degree \tab **deg \tab \code{b3} \cr
   Solfege \tab **solfa \tab \code{me} \cr
   \href{https://lilypond.org/doc/v2.22/Documentation/notation/pitches}{Lilypond pitch} \tab none \tab \verb{ees'} \cr
}


If you call \code{tonalInterval} (or \link[=pitch]{any function that uses tonalInterval as a parser}) on a \code{character} string,
the regex-system will automatically (attempt) to interpret the tokens as on the pitch types above---if there is a conflict
the representations are favored in the order they are presented in the table above.
If a matching exclusive interpretation (see table above) is provided using the \code{Exclusive} argument,
this choice overrides the regex-dispatch.
If there is no match, an NA \code{tonalInterval} is returned.
\subsection{Parsing with Options}{

The six tonal representations listed above function through a common parsing interface.
}
}

\examples{

M3 <- tint(   , 4L)

M2 <- tint(   , 2L)
M9 <- tint(-1L, 2L)

M9 - M2 
# = octave
M9 - 2L
# = octave

M3 \%/\% M2 
# = 2

###

cMajor <- sort(tint( , -1:5))
eMajor <- cMajor + M3
eMajor + 2L 
# f# g# a# b cc# dd# ee#

eMajor[4:5] - octave 
# = A B

"4.ee" + P5 
# = "4.bb"


}
\seealso{
Other {core pitch representation}: 
\code{\link{LO5th}()}
}
\concept{{core pitch representation}}
