% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Rhythm.R
\name{rhythmDeparsing}
\alias{rhythmDeparsing}
\title{Generating ("deparsing") rhythm representations}
\description{
\link{humdrumR} includes a easy-to-use system for
generating a variety of rhythm (time duration) representations,
which can be flexibly modified by users.
"Under the hood" \code{humdrumR} represents all rhythmic duration information as \link[=rational]{rational numbers},
which is typically extracted from input data using the \link[=rhythmParsing]{rhythm parser}.
This \link{rational} representation can then be "deparsed" into a variety of predefined output formats (like \verb{**recip}),
or into new formats that you create!
}
\details{
Deparsing is the second step in the \link[=rhythmFunctions]{rhythm function} processing pipeline:
\itemize{
\item \strong{Input} representation \verb{|>}
\itemize{
\item \emph{Parsing} \verb{|>}
\itemize{
\item \strong{Intermediate} (\link{rational}) representation \verb{|>}
}
\item \emph{Deparsing} (DEPARSING ARGS GO HERE) \verb{|>}
}
\item \strong{Output} representation
}

Various rhythm representations like \verb{**recip}, \verb{**dur}, and \verb{**semibreves} can be generated
using predefined \link[=rhythmFunctions]{rhythm functions} like \code{\link[=recip]{recip()}}
\code{\link[=dur]{dur()}}, and \code{\link[=semibreves]{semibreves()}} respectively.
All of these functions use a common deparsing framework.
\emph{This} documentation talks about this deparsing step.
For an overview of the parsing process, look \link[=rhythmParsing]{here}.
}
\section{Basic rhythm arguments}{


Different rhythms share a few standard arguments which control details of the output.
The most important is the \code{scale} argument.
\subsection{Scalar unit}{

The \code{scale} argument is a \code{numeric} or \link{rational} value which indicates the reference unit used
for duration values: what is "1" duration?
By default, the unit is a "whole note" or semibreve.
By changing the unit, you can rescale your output.
For example, a recip value represents a fraction of the unit: e.g., \code{"2"} equals 1/2 of the unit.
If we call \code{recip('2', scale = 1/16)} this is telling us to get half of a sixteenth: which in this case would be \code{'32'}.

The functions \code{\link[=breves]{breves()}}, \code{\link[=semibreves]{semibreves()}}, \code{\link[=crotchets]{crotchets()}}, \code{\link[=quavers]{quavers()}}, and \code{\link[=semiquavers]{semiquavers()}} are all identical, except with different
default values of the \code{scale} argument.
}

\subsection{In-place parsing}{

In humdrum data, character strings are often encoded with multiple pieces of musical information right besides each other:
for example, \verb{**recip} data might include tokens like \verb{"4.ee-[}.
The \code{humdrumR} parser (\code{rhythmInterval}) will automatically "pull out" rhythm information from within strings, if it can find any
using the appropriate known regular expressions.
For example, \code{semibreves('4.ee-[')} returns 0.375.
However, all the pitch functions (like \code{\link[=recip]{recip()}} and \code{\link[=dur]{dur()}}) have an option to keep the "extra" information
and return the result "in place"---i.e., embedded right where it was found in the input string.
This is controlled with the \code{inPlace} argument, which is \code{FALSE} by default.
So, \code{semibreves('4.ee-[', inPlace = TRUE)} will return 0.375ee-[---keeping the \code{"ee-["}.
Note that \code{inPlace = TRUE} will force functions like \code{semibreves}, which normally return \code{numeric} values, to return \code{character} strings
\emph{if} their input is a \code{character} string.
}
}

\seealso{
All \code{humdrumR} \link[=rhythmFunctions]{rhythm functions} make use of the
deparsing functionality.
}
